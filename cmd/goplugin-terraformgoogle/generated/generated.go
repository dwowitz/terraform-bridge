// Code generated by Lyra DO NOT EDIT.

// This code is generated on a per-provider basis using "tf-gen"
// Long term our hope is to remove this generation step and adopt dynamic approach

package generated

import (
	"sync"

	"github.com/davecgh/go-spew/spew"
	"github.com/hashicorp/go-hclog"
	"github.com/hashicorp/terraform/helper/schema"
	"github.com/hashicorp/terraform/terraform"
	"github.com/lyraproj/terraform-bridge/pkg/bridge"
	"github.com/lyraproj/pcore/px"
	"github.com/lyraproj/servicesdk/service"
)

var once sync.Once
var Config *terraform.ResourceConfig

func configureProvider(p *schema.Provider) {
	once.Do(func() {
		if Config == nil {
			Config = &terraform.ResourceConfig{
				Config: map[string]interface{}{},
			}
		}
		err := p.Configure(Config)
		if err != nil {
			panic(err)
		}
	})
}

func Initialize(sb *service.Builder, p *schema.Provider) {
	var evs []px.Type

	evs = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Google_app_engine_application{}, Google_app_engine_application_rtb))
	sb.RegisterHandler("TerraformGoogle::Google_app_engine_applicationHandler", &Google_app_engine_applicationHandler{provider: p}, evs[0])

	evs = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Google_bigquery_dataset{}, Google_bigquery_dataset_rtb))
	sb.RegisterHandler("TerraformGoogle::Google_bigquery_datasetHandler", &Google_bigquery_datasetHandler{provider: p}, evs[0])

	evs = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Google_bigquery_table{}, Google_bigquery_table_rtb))
	sb.RegisterHandler("TerraformGoogle::Google_bigquery_tableHandler", &Google_bigquery_tableHandler{provider: p}, evs[0])

	evs = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Google_bigtable_instance{}, Google_bigtable_instance_rtb))
	sb.RegisterHandler("TerraformGoogle::Google_bigtable_instanceHandler", &Google_bigtable_instanceHandler{provider: p}, evs[0])

	evs = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Google_bigtable_table{}, Google_bigtable_table_rtb))
	sb.RegisterHandler("TerraformGoogle::Google_bigtable_tableHandler", &Google_bigtable_tableHandler{provider: p}, evs[0])

	evs = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Google_billing_account_iam_binding{}, Google_billing_account_iam_binding_rtb))
	sb.RegisterHandler("TerraformGoogle::Google_billing_account_iam_bindingHandler", &Google_billing_account_iam_bindingHandler{provider: p}, evs[0])

	evs = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Google_billing_account_iam_member{}, Google_billing_account_iam_member_rtb))
	sb.RegisterHandler("TerraformGoogle::Google_billing_account_iam_memberHandler", &Google_billing_account_iam_memberHandler{provider: p}, evs[0])

	evs = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Google_billing_account_iam_policy{}, Google_billing_account_iam_policy_rtb))
	sb.RegisterHandler("TerraformGoogle::Google_billing_account_iam_policyHandler", &Google_billing_account_iam_policyHandler{provider: p}, evs[0])

	evs = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Google_binary_authorization_attestor{}, Google_binary_authorization_attestor_rtb))
	sb.RegisterHandler("TerraformGoogle::Google_binary_authorization_attestorHandler", &Google_binary_authorization_attestorHandler{provider: p}, evs[0])

	evs = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Google_binary_authorization_policy{}, Google_binary_authorization_policy_rtb))
	sb.RegisterHandler("TerraformGoogle::Google_binary_authorization_policyHandler", &Google_binary_authorization_policyHandler{provider: p}, evs[0])

	evs = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Google_cloudbuild_trigger{}, Google_cloudbuild_trigger_rtb))
	sb.RegisterHandler("TerraformGoogle::Google_cloudbuild_triggerHandler", &Google_cloudbuild_triggerHandler{provider: p}, evs[0])

	evs = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Google_cloudfunctions_function{}, Google_cloudfunctions_function_rtb))
	sb.RegisterHandler("TerraformGoogle::Google_cloudfunctions_functionHandler", &Google_cloudfunctions_functionHandler{provider: p}, evs[0])

	evs = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Google_cloudiot_registry{}, Google_cloudiot_registry_rtb))
	sb.RegisterHandler("TerraformGoogle::Google_cloudiot_registryHandler", &Google_cloudiot_registryHandler{provider: p}, evs[0])

	evs = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Google_composer_environment{}, Google_composer_environment_rtb))
	sb.RegisterHandler("TerraformGoogle::Google_composer_environmentHandler", &Google_composer_environmentHandler{provider: p}, evs[0])

	evs = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Google_compute_address{}, Google_compute_address_rtb))
	sb.RegisterHandler("TerraformGoogle::Google_compute_addressHandler", &Google_compute_addressHandler{provider: p}, evs[0])

	evs = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Google_compute_attached_disk{}, Google_compute_attached_disk_rtb))
	sb.RegisterHandler("TerraformGoogle::Google_compute_attached_diskHandler", &Google_compute_attached_diskHandler{provider: p}, evs[0])

	evs = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Google_compute_autoscaler{}, Google_compute_autoscaler_rtb))
	sb.RegisterHandler("TerraformGoogle::Google_compute_autoscalerHandler", &Google_compute_autoscalerHandler{provider: p}, evs[0])

	evs = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Google_compute_backend_bucket{}, Google_compute_backend_bucket_rtb))
	sb.RegisterHandler("TerraformGoogle::Google_compute_backend_bucketHandler", &Google_compute_backend_bucketHandler{provider: p}, evs[0])

	evs = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Google_compute_backend_service{}, Google_compute_backend_service_rtb))
	sb.RegisterHandler("TerraformGoogle::Google_compute_backend_serviceHandler", &Google_compute_backend_serviceHandler{provider: p}, evs[0])

	evs = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Google_compute_disk{}, Google_compute_disk_rtb))
	sb.RegisterHandler("TerraformGoogle::Google_compute_diskHandler", &Google_compute_diskHandler{provider: p}, evs[0])

	evs = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Google_compute_firewall{}, Google_compute_firewall_rtb))
	sb.RegisterHandler("TerraformGoogle::Google_compute_firewallHandler", &Google_compute_firewallHandler{provider: p}, evs[0])

	evs = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Google_compute_forwarding_rule{}, Google_compute_forwarding_rule_rtb))
	sb.RegisterHandler("TerraformGoogle::Google_compute_forwarding_ruleHandler", &Google_compute_forwarding_ruleHandler{provider: p}, evs[0])

	evs = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Google_compute_global_address{}, Google_compute_global_address_rtb))
	sb.RegisterHandler("TerraformGoogle::Google_compute_global_addressHandler", &Google_compute_global_addressHandler{provider: p}, evs[0])

	evs = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Google_compute_global_forwarding_rule{}, Google_compute_global_forwarding_rule_rtb))
	sb.RegisterHandler("TerraformGoogle::Google_compute_global_forwarding_ruleHandler", &Google_compute_global_forwarding_ruleHandler{provider: p}, evs[0])

	evs = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Google_compute_health_check{}, Google_compute_health_check_rtb))
	sb.RegisterHandler("TerraformGoogle::Google_compute_health_checkHandler", &Google_compute_health_checkHandler{provider: p}, evs[0])

	evs = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Google_compute_http_health_check{}, Google_compute_http_health_check_rtb))
	sb.RegisterHandler("TerraformGoogle::Google_compute_http_health_checkHandler", &Google_compute_http_health_checkHandler{provider: p}, evs[0])

	evs = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Google_compute_https_health_check{}, Google_compute_https_health_check_rtb))
	sb.RegisterHandler("TerraformGoogle::Google_compute_https_health_checkHandler", &Google_compute_https_health_checkHandler{provider: p}, evs[0])

	evs = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Google_compute_image{}, Google_compute_image_rtb))
	sb.RegisterHandler("TerraformGoogle::Google_compute_imageHandler", &Google_compute_imageHandler{provider: p}, evs[0])

	evs = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Google_compute_instance{}, Google_compute_instance_rtb))
	sb.RegisterHandler("TerraformGoogle::Google_compute_instanceHandler", &Google_compute_instanceHandler{provider: p}, evs[0])

	evs = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Google_compute_instance_from_template{}, Google_compute_instance_from_template_rtb))
	sb.RegisterHandler("TerraformGoogle::Google_compute_instance_from_templateHandler", &Google_compute_instance_from_templateHandler{provider: p}, evs[0])

	evs = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Google_compute_instance_group{}, Google_compute_instance_group_rtb))
	sb.RegisterHandler("TerraformGoogle::Google_compute_instance_groupHandler", &Google_compute_instance_groupHandler{provider: p}, evs[0])

	evs = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Google_compute_instance_group_manager{}, Google_compute_instance_group_manager_rtb))
	sb.RegisterHandler("TerraformGoogle::Google_compute_instance_group_managerHandler", &Google_compute_instance_group_managerHandler{provider: p}, evs[0])

	evs = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Google_compute_instance_template{}, Google_compute_instance_template_rtb))
	sb.RegisterHandler("TerraformGoogle::Google_compute_instance_templateHandler", &Google_compute_instance_templateHandler{provider: p}, evs[0])

	evs = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Google_compute_interconnect_attachment{}, Google_compute_interconnect_attachment_rtb))
	sb.RegisterHandler("TerraformGoogle::Google_compute_interconnect_attachmentHandler", &Google_compute_interconnect_attachmentHandler{provider: p}, evs[0])

	evs = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Google_compute_network{}, Google_compute_network_rtb))
	sb.RegisterHandler("TerraformGoogle::Google_compute_networkHandler", &Google_compute_networkHandler{provider: p}, evs[0])

	evs = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Google_compute_network_peering{}, Google_compute_network_peering_rtb))
	sb.RegisterHandler("TerraformGoogle::Google_compute_network_peeringHandler", &Google_compute_network_peeringHandler{provider: p}, evs[0])

	evs = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Google_compute_project_metadata{}, Google_compute_project_metadata_rtb))
	sb.RegisterHandler("TerraformGoogle::Google_compute_project_metadataHandler", &Google_compute_project_metadataHandler{provider: p}, evs[0])

	evs = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Google_compute_project_metadata_item{}, Google_compute_project_metadata_item_rtb))
	sb.RegisterHandler("TerraformGoogle::Google_compute_project_metadata_itemHandler", &Google_compute_project_metadata_itemHandler{provider: p}, evs[0])

	evs = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Google_compute_region_autoscaler{}, Google_compute_region_autoscaler_rtb))
	sb.RegisterHandler("TerraformGoogle::Google_compute_region_autoscalerHandler", &Google_compute_region_autoscalerHandler{provider: p}, evs[0])

	evs = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Google_compute_region_backend_service{}, Google_compute_region_backend_service_rtb))
	sb.RegisterHandler("TerraformGoogle::Google_compute_region_backend_serviceHandler", &Google_compute_region_backend_serviceHandler{provider: p}, evs[0])

	evs = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Google_compute_region_disk{}, Google_compute_region_disk_rtb))
	sb.RegisterHandler("TerraformGoogle::Google_compute_region_diskHandler", &Google_compute_region_diskHandler{provider: p}, evs[0])

	evs = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Google_compute_region_instance_group_manager{}, Google_compute_region_instance_group_manager_rtb))
	sb.RegisterHandler("TerraformGoogle::Google_compute_region_instance_group_managerHandler", &Google_compute_region_instance_group_managerHandler{provider: p}, evs[0])

	evs = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Google_compute_route{}, Google_compute_route_rtb))
	sb.RegisterHandler("TerraformGoogle::Google_compute_routeHandler", &Google_compute_routeHandler{provider: p}, evs[0])

	evs = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Google_compute_router{}, Google_compute_router_rtb))
	sb.RegisterHandler("TerraformGoogle::Google_compute_routerHandler", &Google_compute_routerHandler{provider: p}, evs[0])

	evs = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Google_compute_router_interface{}, Google_compute_router_interface_rtb))
	sb.RegisterHandler("TerraformGoogle::Google_compute_router_interfaceHandler", &Google_compute_router_interfaceHandler{provider: p}, evs[0])

	evs = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Google_compute_router_nat{}, Google_compute_router_nat_rtb))
	sb.RegisterHandler("TerraformGoogle::Google_compute_router_natHandler", &Google_compute_router_natHandler{provider: p}, evs[0])

	evs = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Google_compute_router_peer{}, Google_compute_router_peer_rtb))
	sb.RegisterHandler("TerraformGoogle::Google_compute_router_peerHandler", &Google_compute_router_peerHandler{provider: p}, evs[0])

	evs = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Google_compute_security_policy{}, Google_compute_security_policy_rtb))
	sb.RegisterHandler("TerraformGoogle::Google_compute_security_policyHandler", &Google_compute_security_policyHandler{provider: p}, evs[0])

	evs = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Google_compute_shared_vpc_host_project{}, Google_compute_shared_vpc_host_project_rtb))
	sb.RegisterHandler("TerraformGoogle::Google_compute_shared_vpc_host_projectHandler", &Google_compute_shared_vpc_host_projectHandler{provider: p}, evs[0])

	evs = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Google_compute_shared_vpc_service_project{}, Google_compute_shared_vpc_service_project_rtb))
	sb.RegisterHandler("TerraformGoogle::Google_compute_shared_vpc_service_projectHandler", &Google_compute_shared_vpc_service_projectHandler{provider: p}, evs[0])

	evs = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Google_compute_snapshot{}, Google_compute_snapshot_rtb))
	sb.RegisterHandler("TerraformGoogle::Google_compute_snapshotHandler", &Google_compute_snapshotHandler{provider: p}, evs[0])

	evs = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Google_compute_ssl_certificate{}, Google_compute_ssl_certificate_rtb))
	sb.RegisterHandler("TerraformGoogle::Google_compute_ssl_certificateHandler", &Google_compute_ssl_certificateHandler{provider: p}, evs[0])

	evs = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Google_compute_ssl_policy{}, Google_compute_ssl_policy_rtb))
	sb.RegisterHandler("TerraformGoogle::Google_compute_ssl_policyHandler", &Google_compute_ssl_policyHandler{provider: p}, evs[0])

	evs = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Google_compute_subnetwork{}, Google_compute_subnetwork_rtb))
	sb.RegisterHandler("TerraformGoogle::Google_compute_subnetworkHandler", &Google_compute_subnetworkHandler{provider: p}, evs[0])

	evs = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Google_compute_subnetwork_iam_binding{}, Google_compute_subnetwork_iam_binding_rtb))
	sb.RegisterHandler("TerraformGoogle::Google_compute_subnetwork_iam_bindingHandler", &Google_compute_subnetwork_iam_bindingHandler{provider: p}, evs[0])

	evs = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Google_compute_subnetwork_iam_member{}, Google_compute_subnetwork_iam_member_rtb))
	sb.RegisterHandler("TerraformGoogle::Google_compute_subnetwork_iam_memberHandler", &Google_compute_subnetwork_iam_memberHandler{provider: p}, evs[0])

	evs = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Google_compute_subnetwork_iam_policy{}, Google_compute_subnetwork_iam_policy_rtb))
	sb.RegisterHandler("TerraformGoogle::Google_compute_subnetwork_iam_policyHandler", &Google_compute_subnetwork_iam_policyHandler{provider: p}, evs[0])

	evs = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Google_compute_target_http_proxy{}, Google_compute_target_http_proxy_rtb))
	sb.RegisterHandler("TerraformGoogle::Google_compute_target_http_proxyHandler", &Google_compute_target_http_proxyHandler{provider: p}, evs[0])

	evs = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Google_compute_target_https_proxy{}, Google_compute_target_https_proxy_rtb))
	sb.RegisterHandler("TerraformGoogle::Google_compute_target_https_proxyHandler", &Google_compute_target_https_proxyHandler{provider: p}, evs[0])

	evs = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Google_compute_target_pool{}, Google_compute_target_pool_rtb))
	sb.RegisterHandler("TerraformGoogle::Google_compute_target_poolHandler", &Google_compute_target_poolHandler{provider: p}, evs[0])

	evs = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Google_compute_target_ssl_proxy{}, Google_compute_target_ssl_proxy_rtb))
	sb.RegisterHandler("TerraformGoogle::Google_compute_target_ssl_proxyHandler", &Google_compute_target_ssl_proxyHandler{provider: p}, evs[0])

	evs = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Google_compute_target_tcp_proxy{}, Google_compute_target_tcp_proxy_rtb))
	sb.RegisterHandler("TerraformGoogle::Google_compute_target_tcp_proxyHandler", &Google_compute_target_tcp_proxyHandler{provider: p}, evs[0])

	evs = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Google_compute_url_map{}, Google_compute_url_map_rtb))
	sb.RegisterHandler("TerraformGoogle::Google_compute_url_mapHandler", &Google_compute_url_mapHandler{provider: p}, evs[0])

	evs = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Google_compute_vpn_gateway{}, Google_compute_vpn_gateway_rtb))
	sb.RegisterHandler("TerraformGoogle::Google_compute_vpn_gatewayHandler", &Google_compute_vpn_gatewayHandler{provider: p}, evs[0])

	evs = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Google_compute_vpn_tunnel{}, Google_compute_vpn_tunnel_rtb))
	sb.RegisterHandler("TerraformGoogle::Google_compute_vpn_tunnelHandler", &Google_compute_vpn_tunnelHandler{provider: p}, evs[0])

	evs = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Google_container_analysis_note{}, Google_container_analysis_note_rtb))
	sb.RegisterHandler("TerraformGoogle::Google_container_analysis_noteHandler", &Google_container_analysis_noteHandler{provider: p}, evs[0])

	evs = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Google_container_cluster{}, Google_container_cluster_rtb))
	sb.RegisterHandler("TerraformGoogle::Google_container_clusterHandler", &Google_container_clusterHandler{provider: p}, evs[0])

	evs = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Google_container_node_pool{}, Google_container_node_pool_rtb))
	sb.RegisterHandler("TerraformGoogle::Google_container_node_poolHandler", &Google_container_node_poolHandler{provider: p}, evs[0])

	evs = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Google_dataflow_job{}, Google_dataflow_job_rtb))
	sb.RegisterHandler("TerraformGoogle::Google_dataflow_jobHandler", &Google_dataflow_jobHandler{provider: p}, evs[0])

	evs = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Google_dataproc_cluster{}, Google_dataproc_cluster_rtb))
	sb.RegisterHandler("TerraformGoogle::Google_dataproc_clusterHandler", &Google_dataproc_clusterHandler{provider: p}, evs[0])

	evs = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Google_dataproc_job{}, Google_dataproc_job_rtb))
	sb.RegisterHandler("TerraformGoogle::Google_dataproc_jobHandler", &Google_dataproc_jobHandler{provider: p}, evs[0])

	evs = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Google_dns_managed_zone{}, Google_dns_managed_zone_rtb))
	sb.RegisterHandler("TerraformGoogle::Google_dns_managed_zoneHandler", &Google_dns_managed_zoneHandler{provider: p}, evs[0])

	evs = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Google_dns_record_set{}, Google_dns_record_set_rtb))
	sb.RegisterHandler("TerraformGoogle::Google_dns_record_setHandler", &Google_dns_record_setHandler{provider: p}, evs[0])

	evs = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Google_endpoints_service{}, Google_endpoints_service_rtb))
	sb.RegisterHandler("TerraformGoogle::Google_endpoints_serviceHandler", &Google_endpoints_serviceHandler{provider: p}, evs[0])

	evs = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Google_filestore_instance{}, Google_filestore_instance_rtb))
	sb.RegisterHandler("TerraformGoogle::Google_filestore_instanceHandler", &Google_filestore_instanceHandler{provider: p}, evs[0])

	evs = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Google_folder{}, Google_folder_rtb))
	sb.RegisterHandler("TerraformGoogle::Google_folderHandler", &Google_folderHandler{provider: p}, evs[0])

	evs = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Google_folder_iam_binding{}, Google_folder_iam_binding_rtb))
	sb.RegisterHandler("TerraformGoogle::Google_folder_iam_bindingHandler", &Google_folder_iam_bindingHandler{provider: p}, evs[0])

	evs = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Google_folder_iam_member{}, Google_folder_iam_member_rtb))
	sb.RegisterHandler("TerraformGoogle::Google_folder_iam_memberHandler", &Google_folder_iam_memberHandler{provider: p}, evs[0])

	evs = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Google_folder_iam_policy{}, Google_folder_iam_policy_rtb))
	sb.RegisterHandler("TerraformGoogle::Google_folder_iam_policyHandler", &Google_folder_iam_policyHandler{provider: p}, evs[0])

	evs = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Google_folder_organization_policy{}, Google_folder_organization_policy_rtb))
	sb.RegisterHandler("TerraformGoogle::Google_folder_organization_policyHandler", &Google_folder_organization_policyHandler{provider: p}, evs[0])

	evs = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Google_kms_crypto_key{}, Google_kms_crypto_key_rtb))
	sb.RegisterHandler("TerraformGoogle::Google_kms_crypto_keyHandler", &Google_kms_crypto_keyHandler{provider: p}, evs[0])

	evs = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Google_kms_crypto_key_iam_binding{}, Google_kms_crypto_key_iam_binding_rtb))
	sb.RegisterHandler("TerraformGoogle::Google_kms_crypto_key_iam_bindingHandler", &Google_kms_crypto_key_iam_bindingHandler{provider: p}, evs[0])

	evs = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Google_kms_crypto_key_iam_member{}, Google_kms_crypto_key_iam_member_rtb))
	sb.RegisterHandler("TerraformGoogle::Google_kms_crypto_key_iam_memberHandler", &Google_kms_crypto_key_iam_memberHandler{provider: p}, evs[0])

	evs = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Google_kms_key_ring{}, Google_kms_key_ring_rtb))
	sb.RegisterHandler("TerraformGoogle::Google_kms_key_ringHandler", &Google_kms_key_ringHandler{provider: p}, evs[0])

	evs = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Google_kms_key_ring_iam_binding{}, Google_kms_key_ring_iam_binding_rtb))
	sb.RegisterHandler("TerraformGoogle::Google_kms_key_ring_iam_bindingHandler", &Google_kms_key_ring_iam_bindingHandler{provider: p}, evs[0])

	evs = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Google_kms_key_ring_iam_member{}, Google_kms_key_ring_iam_member_rtb))
	sb.RegisterHandler("TerraformGoogle::Google_kms_key_ring_iam_memberHandler", &Google_kms_key_ring_iam_memberHandler{provider: p}, evs[0])

	evs = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Google_kms_key_ring_iam_policy{}, Google_kms_key_ring_iam_policy_rtb))
	sb.RegisterHandler("TerraformGoogle::Google_kms_key_ring_iam_policyHandler", &Google_kms_key_ring_iam_policyHandler{provider: p}, evs[0])

	evs = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Google_logging_billing_account_exclusion{}, Google_logging_billing_account_exclusion_rtb))
	sb.RegisterHandler("TerraformGoogle::Google_logging_billing_account_exclusionHandler", &Google_logging_billing_account_exclusionHandler{provider: p}, evs[0])

	evs = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Google_logging_billing_account_sink{}, Google_logging_billing_account_sink_rtb))
	sb.RegisterHandler("TerraformGoogle::Google_logging_billing_account_sinkHandler", &Google_logging_billing_account_sinkHandler{provider: p}, evs[0])

	evs = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Google_logging_folder_exclusion{}, Google_logging_folder_exclusion_rtb))
	sb.RegisterHandler("TerraformGoogle::Google_logging_folder_exclusionHandler", &Google_logging_folder_exclusionHandler{provider: p}, evs[0])

	evs = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Google_logging_folder_sink{}, Google_logging_folder_sink_rtb))
	sb.RegisterHandler("TerraformGoogle::Google_logging_folder_sinkHandler", &Google_logging_folder_sinkHandler{provider: p}, evs[0])

	evs = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Google_logging_organization_exclusion{}, Google_logging_organization_exclusion_rtb))
	sb.RegisterHandler("TerraformGoogle::Google_logging_organization_exclusionHandler", &Google_logging_organization_exclusionHandler{provider: p}, evs[0])

	evs = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Google_logging_organization_sink{}, Google_logging_organization_sink_rtb))
	sb.RegisterHandler("TerraformGoogle::Google_logging_organization_sinkHandler", &Google_logging_organization_sinkHandler{provider: p}, evs[0])

	evs = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Google_logging_project_exclusion{}, Google_logging_project_exclusion_rtb))
	sb.RegisterHandler("TerraformGoogle::Google_logging_project_exclusionHandler", &Google_logging_project_exclusionHandler{provider: p}, evs[0])

	evs = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Google_logging_project_sink{}, Google_logging_project_sink_rtb))
	sb.RegisterHandler("TerraformGoogle::Google_logging_project_sinkHandler", &Google_logging_project_sinkHandler{provider: p}, evs[0])

	evs = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Google_monitoring_alert_policy{}, Google_monitoring_alert_policy_rtb))
	sb.RegisterHandler("TerraformGoogle::Google_monitoring_alert_policyHandler", &Google_monitoring_alert_policyHandler{provider: p}, evs[0])

	evs = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Google_monitoring_group{}, Google_monitoring_group_rtb))
	sb.RegisterHandler("TerraformGoogle::Google_monitoring_groupHandler", &Google_monitoring_groupHandler{provider: p}, evs[0])

	evs = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Google_monitoring_notification_channel{}, Google_monitoring_notification_channel_rtb))
	sb.RegisterHandler("TerraformGoogle::Google_monitoring_notification_channelHandler", &Google_monitoring_notification_channelHandler{provider: p}, evs[0])

	evs = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Google_monitoring_uptime_check_config{}, Google_monitoring_uptime_check_config_rtb))
	sb.RegisterHandler("TerraformGoogle::Google_monitoring_uptime_check_configHandler", &Google_monitoring_uptime_check_configHandler{provider: p}, evs[0])

	evs = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Google_organization_iam_binding{}, Google_organization_iam_binding_rtb))
	sb.RegisterHandler("TerraformGoogle::Google_organization_iam_bindingHandler", &Google_organization_iam_bindingHandler{provider: p}, evs[0])

	evs = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Google_organization_iam_custom_role{}, Google_organization_iam_custom_role_rtb))
	sb.RegisterHandler("TerraformGoogle::Google_organization_iam_custom_roleHandler", &Google_organization_iam_custom_roleHandler{provider: p}, evs[0])

	evs = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Google_organization_iam_member{}, Google_organization_iam_member_rtb))
	sb.RegisterHandler("TerraformGoogle::Google_organization_iam_memberHandler", &Google_organization_iam_memberHandler{provider: p}, evs[0])

	evs = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Google_organization_iam_policy{}, Google_organization_iam_policy_rtb))
	sb.RegisterHandler("TerraformGoogle::Google_organization_iam_policyHandler", &Google_organization_iam_policyHandler{provider: p}, evs[0])

	evs = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Google_organization_policy{}, Google_organization_policy_rtb))
	sb.RegisterHandler("TerraformGoogle::Google_organization_policyHandler", &Google_organization_policyHandler{provider: p}, evs[0])

	evs = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Google_project{}, Google_project_rtb))
	sb.RegisterHandler("TerraformGoogle::Google_projectHandler", &Google_projectHandler{provider: p}, evs[0])

	evs = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Google_project_iam_binding{}, Google_project_iam_binding_rtb))
	sb.RegisterHandler("TerraformGoogle::Google_project_iam_bindingHandler", &Google_project_iam_bindingHandler{provider: p}, evs[0])

	evs = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Google_project_iam_custom_role{}, Google_project_iam_custom_role_rtb))
	sb.RegisterHandler("TerraformGoogle::Google_project_iam_custom_roleHandler", &Google_project_iam_custom_roleHandler{provider: p}, evs[0])

	evs = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Google_project_iam_member{}, Google_project_iam_member_rtb))
	sb.RegisterHandler("TerraformGoogle::Google_project_iam_memberHandler", &Google_project_iam_memberHandler{provider: p}, evs[0])

	evs = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Google_project_iam_policy{}, Google_project_iam_policy_rtb))
	sb.RegisterHandler("TerraformGoogle::Google_project_iam_policyHandler", &Google_project_iam_policyHandler{provider: p}, evs[0])

	evs = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Google_project_organization_policy{}, Google_project_organization_policy_rtb))
	sb.RegisterHandler("TerraformGoogle::Google_project_organization_policyHandler", &Google_project_organization_policyHandler{provider: p}, evs[0])

	evs = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Google_project_service{}, Google_project_service_rtb))
	sb.RegisterHandler("TerraformGoogle::Google_project_serviceHandler", &Google_project_serviceHandler{provider: p}, evs[0])

	evs = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Google_project_services{}, Google_project_services_rtb))
	sb.RegisterHandler("TerraformGoogle::Google_project_servicesHandler", &Google_project_servicesHandler{provider: p}, evs[0])

	evs = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Google_project_usage_export_bucket{}, Google_project_usage_export_bucket_rtb))
	sb.RegisterHandler("TerraformGoogle::Google_project_usage_export_bucketHandler", &Google_project_usage_export_bucketHandler{provider: p}, evs[0])

	evs = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Google_pubsub_subscription{}, Google_pubsub_subscription_rtb))
	sb.RegisterHandler("TerraformGoogle::Google_pubsub_subscriptionHandler", &Google_pubsub_subscriptionHandler{provider: p}, evs[0])

	evs = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Google_pubsub_subscription_iam_binding{}, Google_pubsub_subscription_iam_binding_rtb))
	sb.RegisterHandler("TerraformGoogle::Google_pubsub_subscription_iam_bindingHandler", &Google_pubsub_subscription_iam_bindingHandler{provider: p}, evs[0])

	evs = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Google_pubsub_subscription_iam_member{}, Google_pubsub_subscription_iam_member_rtb))
	sb.RegisterHandler("TerraformGoogle::Google_pubsub_subscription_iam_memberHandler", &Google_pubsub_subscription_iam_memberHandler{provider: p}, evs[0])

	evs = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Google_pubsub_subscription_iam_policy{}, Google_pubsub_subscription_iam_policy_rtb))
	sb.RegisterHandler("TerraformGoogle::Google_pubsub_subscription_iam_policyHandler", &Google_pubsub_subscription_iam_policyHandler{provider: p}, evs[0])

	evs = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Google_pubsub_topic{}, Google_pubsub_topic_rtb))
	sb.RegisterHandler("TerraformGoogle::Google_pubsub_topicHandler", &Google_pubsub_topicHandler{provider: p}, evs[0])

	evs = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Google_pubsub_topic_iam_binding{}, Google_pubsub_topic_iam_binding_rtb))
	sb.RegisterHandler("TerraformGoogle::Google_pubsub_topic_iam_bindingHandler", &Google_pubsub_topic_iam_bindingHandler{provider: p}, evs[0])

	evs = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Google_pubsub_topic_iam_member{}, Google_pubsub_topic_iam_member_rtb))
	sb.RegisterHandler("TerraformGoogle::Google_pubsub_topic_iam_memberHandler", &Google_pubsub_topic_iam_memberHandler{provider: p}, evs[0])

	evs = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Google_pubsub_topic_iam_policy{}, Google_pubsub_topic_iam_policy_rtb))
	sb.RegisterHandler("TerraformGoogle::Google_pubsub_topic_iam_policyHandler", &Google_pubsub_topic_iam_policyHandler{provider: p}, evs[0])

	evs = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Google_redis_instance{}, Google_redis_instance_rtb))
	sb.RegisterHandler("TerraformGoogle::Google_redis_instanceHandler", &Google_redis_instanceHandler{provider: p}, evs[0])

	evs = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Google_resource_manager_lien{}, Google_resource_manager_lien_rtb))
	sb.RegisterHandler("TerraformGoogle::Google_resource_manager_lienHandler", &Google_resource_manager_lienHandler{provider: p}, evs[0])

	evs = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Google_runtimeconfig_config{}, Google_runtimeconfig_config_rtb))
	sb.RegisterHandler("TerraformGoogle::Google_runtimeconfig_configHandler", &Google_runtimeconfig_configHandler{provider: p}, evs[0])

	evs = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Google_runtimeconfig_variable{}, Google_runtimeconfig_variable_rtb))
	sb.RegisterHandler("TerraformGoogle::Google_runtimeconfig_variableHandler", &Google_runtimeconfig_variableHandler{provider: p}, evs[0])

	evs = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Google_service_account{}, Google_service_account_rtb))
	sb.RegisterHandler("TerraformGoogle::Google_service_accountHandler", &Google_service_accountHandler{provider: p}, evs[0])

	evs = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Google_service_account_iam_binding{}, Google_service_account_iam_binding_rtb))
	sb.RegisterHandler("TerraformGoogle::Google_service_account_iam_bindingHandler", &Google_service_account_iam_bindingHandler{provider: p}, evs[0])

	evs = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Google_service_account_iam_member{}, Google_service_account_iam_member_rtb))
	sb.RegisterHandler("TerraformGoogle::Google_service_account_iam_memberHandler", &Google_service_account_iam_memberHandler{provider: p}, evs[0])

	evs = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Google_service_account_iam_policy{}, Google_service_account_iam_policy_rtb))
	sb.RegisterHandler("TerraformGoogle::Google_service_account_iam_policyHandler", &Google_service_account_iam_policyHandler{provider: p}, evs[0])

	evs = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Google_service_account_key{}, Google_service_account_key_rtb))
	sb.RegisterHandler("TerraformGoogle::Google_service_account_keyHandler", &Google_service_account_keyHandler{provider: p}, evs[0])

	evs = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Google_sourcerepo_repository{}, Google_sourcerepo_repository_rtb))
	sb.RegisterHandler("TerraformGoogle::Google_sourcerepo_repositoryHandler", &Google_sourcerepo_repositoryHandler{provider: p}, evs[0])

	evs = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Google_spanner_database{}, Google_spanner_database_rtb))
	sb.RegisterHandler("TerraformGoogle::Google_spanner_databaseHandler", &Google_spanner_databaseHandler{provider: p}, evs[0])

	evs = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Google_spanner_database_iam_binding{}, Google_spanner_database_iam_binding_rtb))
	sb.RegisterHandler("TerraformGoogle::Google_spanner_database_iam_bindingHandler", &Google_spanner_database_iam_bindingHandler{provider: p}, evs[0])

	evs = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Google_spanner_database_iam_member{}, Google_spanner_database_iam_member_rtb))
	sb.RegisterHandler("TerraformGoogle::Google_spanner_database_iam_memberHandler", &Google_spanner_database_iam_memberHandler{provider: p}, evs[0])

	evs = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Google_spanner_database_iam_policy{}, Google_spanner_database_iam_policy_rtb))
	sb.RegisterHandler("TerraformGoogle::Google_spanner_database_iam_policyHandler", &Google_spanner_database_iam_policyHandler{provider: p}, evs[0])

	evs = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Google_spanner_instance{}, Google_spanner_instance_rtb))
	sb.RegisterHandler("TerraformGoogle::Google_spanner_instanceHandler", &Google_spanner_instanceHandler{provider: p}, evs[0])

	evs = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Google_spanner_instance_iam_binding{}, Google_spanner_instance_iam_binding_rtb))
	sb.RegisterHandler("TerraformGoogle::Google_spanner_instance_iam_bindingHandler", &Google_spanner_instance_iam_bindingHandler{provider: p}, evs[0])

	evs = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Google_spanner_instance_iam_member{}, Google_spanner_instance_iam_member_rtb))
	sb.RegisterHandler("TerraformGoogle::Google_spanner_instance_iam_memberHandler", &Google_spanner_instance_iam_memberHandler{provider: p}, evs[0])

	evs = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Google_spanner_instance_iam_policy{}, Google_spanner_instance_iam_policy_rtb))
	sb.RegisterHandler("TerraformGoogle::Google_spanner_instance_iam_policyHandler", &Google_spanner_instance_iam_policyHandler{provider: p}, evs[0])

	evs = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Google_sql_database{}, Google_sql_database_rtb))
	sb.RegisterHandler("TerraformGoogle::Google_sql_databaseHandler", &Google_sql_databaseHandler{provider: p}, evs[0])

	evs = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Google_sql_database_instance{}, Google_sql_database_instance_rtb))
	sb.RegisterHandler("TerraformGoogle::Google_sql_database_instanceHandler", &Google_sql_database_instanceHandler{provider: p}, evs[0])

	evs = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Google_sql_ssl_cert{}, Google_sql_ssl_cert_rtb))
	sb.RegisterHandler("TerraformGoogle::Google_sql_ssl_certHandler", &Google_sql_ssl_certHandler{provider: p}, evs[0])

	evs = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Google_sql_user{}, Google_sql_user_rtb))
	sb.RegisterHandler("TerraformGoogle::Google_sql_userHandler", &Google_sql_userHandler{provider: p}, evs[0])

	evs = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Google_storage_bucket{}, Google_storage_bucket_rtb))
	sb.RegisterHandler("TerraformGoogle::Google_storage_bucketHandler", &Google_storage_bucketHandler{provider: p}, evs[0])

	evs = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Google_storage_bucket_acl{}, Google_storage_bucket_acl_rtb))
	sb.RegisterHandler("TerraformGoogle::Google_storage_bucket_aclHandler", &Google_storage_bucket_aclHandler{provider: p}, evs[0])

	evs = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Google_storage_bucket_iam_binding{}, Google_storage_bucket_iam_binding_rtb))
	sb.RegisterHandler("TerraformGoogle::Google_storage_bucket_iam_bindingHandler", &Google_storage_bucket_iam_bindingHandler{provider: p}, evs[0])

	evs = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Google_storage_bucket_iam_member{}, Google_storage_bucket_iam_member_rtb))
	sb.RegisterHandler("TerraformGoogle::Google_storage_bucket_iam_memberHandler", &Google_storage_bucket_iam_memberHandler{provider: p}, evs[0])

	evs = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Google_storage_bucket_iam_policy{}, Google_storage_bucket_iam_policy_rtb))
	sb.RegisterHandler("TerraformGoogle::Google_storage_bucket_iam_policyHandler", &Google_storage_bucket_iam_policyHandler{provider: p}, evs[0])

	evs = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Google_storage_bucket_object{}, Google_storage_bucket_object_rtb))
	sb.RegisterHandler("TerraformGoogle::Google_storage_bucket_objectHandler", &Google_storage_bucket_objectHandler{provider: p}, evs[0])

	evs = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Google_storage_default_object_access_control{}, Google_storage_default_object_access_control_rtb))
	sb.RegisterHandler("TerraformGoogle::Google_storage_default_object_access_controlHandler", &Google_storage_default_object_access_controlHandler{provider: p}, evs[0])

	evs = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Google_storage_default_object_acl{}, Google_storage_default_object_acl_rtb))
	sb.RegisterHandler("TerraformGoogle::Google_storage_default_object_aclHandler", &Google_storage_default_object_aclHandler{provider: p}, evs[0])

	evs = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Google_storage_notification{}, Google_storage_notification_rtb))
	sb.RegisterHandler("TerraformGoogle::Google_storage_notificationHandler", &Google_storage_notificationHandler{provider: p}, evs[0])

	evs = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Google_storage_object_access_control{}, Google_storage_object_access_control_rtb))
	sb.RegisterHandler("TerraformGoogle::Google_storage_object_access_controlHandler", &Google_storage_object_access_controlHandler{provider: p}, evs[0])

	evs = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Google_storage_object_acl{}, Google_storage_object_acl_rtb))
	sb.RegisterHandler("TerraformGoogle::Google_storage_object_aclHandler", &Google_storage_object_aclHandler{provider: p}, evs[0])

}

type Google_app_engine_application_feature_settings_1 struct {
	Split_health_checks *bool
}

type Google_app_engine_application_url_dispatch_rule_2 struct {
	Domain *string

	Path *string

	Service *string
}

type Google_app_engine_application struct {
	Google_app_engine_application_id *string `lyra:"ignore"`

	Auth_domain *string

	Code_bucket *string

	Default_bucket *string

	Default_hostname *string

	Feature_settings *[]Google_app_engine_application_feature_settings_1

	Gcr_domain *string

	Location_id string

	Name *string

	Project *string

	Serving_status *string

	Url_dispatch_rule *[]Google_app_engine_application_url_dispatch_rule_2
}

var Google_app_engine_application_rtb = func(rtb service.ResourceTypeBuilder) {
	rtb.ProvidedAttributes(
		"google_app_engine_application_id",

		"auth_domain",

		"code_bucket",

		"default_bucket",

		"default_hostname",

		"feature_settings",

		"gcr_domain",

		"name",

		"project",

		"serving_status",

		"url_dispatch_rule",
	)
	rtb.ImmutableAttributes(

		"project",
	)
}

// Google_app_engine_applicationHandler ...
type Google_app_engine_applicationHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_app_engine_applicationHandler) Create(desired *Google_app_engine_application) (*Google_app_engine_application, string, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Create Google_app_engine_application", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_app_engine_application", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Update ...
func (h *Google_app_engine_applicationHandler) Update(externalID string, desired *Google_app_engine_application) (*Google_app_engine_application, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Update Google_app_engine_application", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	actual, err := bridge.Update(h.provider, "google_app_engine_application", externalID, rc)
	if err != nil {
		return nil, err
	}
	x := &Google_app_engine_application{Google_app_engine_application_id: &externalID}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Update Actual State Google_app_engine_application", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Read ...
func (h *Google_app_engine_applicationHandler) Read(externalID string) (*Google_app_engine_application, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Read Google_app_engine_application", "externalID", externalID)
	}
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_app_engine_application", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_app_engine_application{Google_app_engine_application_id: &id}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Read Actual State Google_app_engine_application", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Delete ...
func (h *Google_app_engine_applicationHandler) Delete(externalID string) error {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Delete Google_app_engine_application", "externalID", externalID)
	}
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_app_engine_application", externalID)
}

type Google_bigquery_dataset_access_3_view_4 struct {
	Dataset_id string

	Project_id string

	Table_id string
}

type Google_bigquery_dataset_access_3 struct {
	Domain *string

	Group_by_email *string

	Role *string

	Special_group *string

	User_by_email *string

	View *[]Google_bigquery_dataset_access_3_view_4
}

type Google_bigquery_dataset struct {
	Google_bigquery_dataset_id *string `lyra:"ignore"`

	Access *[]Google_bigquery_dataset_access_3

	Creation_time *int

	Dataset_id string

	Default_table_expiration_ms *int

	Description *string

	Etag *string

	Friendly_name *string

	Labels *map[string]string

	Last_modified_time *int

	Location *string

	Project *string

	Self_link *string
}

var Google_bigquery_dataset_rtb = func(rtb service.ResourceTypeBuilder) {
	rtb.ProvidedAttributes(
		"google_bigquery_dataset_id",

		"access",

		"creation_time",

		"default_table_expiration_ms",

		"description",

		"etag",

		"friendly_name",

		"labels",

		"last_modified_time",

		"location",

		"project",

		"self_link",
	)
	rtb.ImmutableAttributes(

		"dataset_id",

		"location",

		"project",
	)
}

// Google_bigquery_datasetHandler ...
type Google_bigquery_datasetHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_bigquery_datasetHandler) Create(desired *Google_bigquery_dataset) (*Google_bigquery_dataset, string, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Create Google_bigquery_dataset", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_bigquery_dataset", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Update ...
func (h *Google_bigquery_datasetHandler) Update(externalID string, desired *Google_bigquery_dataset) (*Google_bigquery_dataset, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Update Google_bigquery_dataset", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	actual, err := bridge.Update(h.provider, "google_bigquery_dataset", externalID, rc)
	if err != nil {
		return nil, err
	}
	x := &Google_bigquery_dataset{Google_bigquery_dataset_id: &externalID}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Update Actual State Google_bigquery_dataset", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Read ...
func (h *Google_bigquery_datasetHandler) Read(externalID string) (*Google_bigquery_dataset, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Read Google_bigquery_dataset", "externalID", externalID)
	}
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_bigquery_dataset", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_bigquery_dataset{Google_bigquery_dataset_id: &id}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Read Actual State Google_bigquery_dataset", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Delete ...
func (h *Google_bigquery_datasetHandler) Delete(externalID string) error {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Delete Google_bigquery_dataset", "externalID", externalID)
	}
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_bigquery_dataset", externalID)
}

type Google_bigquery_table_time_partitioning_5 struct {
	Expiration_ms *int

	Field *string

	Type string
}

type Google_bigquery_table_view_6 struct {
	Query string

	Use_legacy_sql *bool
}

type Google_bigquery_table struct {
	Google_bigquery_table_id *string `lyra:"ignore"`

	Creation_time *int

	Dataset_id string

	Description *string

	Etag *string

	Expiration_time *int

	Friendly_name *string

	Labels *map[string]string

	Last_modified_time *int

	Location *string

	Num_bytes *int

	Num_long_term_bytes *int

	Num_rows *int

	Project *string

	Schema *string

	Self_link *string

	Table_id string

	Time_partitioning *[]Google_bigquery_table_time_partitioning_5

	Type *string

	View *[]Google_bigquery_table_view_6
}

var Google_bigquery_table_rtb = func(rtb service.ResourceTypeBuilder) {
	rtb.ProvidedAttributes(
		"google_bigquery_table_id",

		"creation_time",

		"description",

		"etag",

		"expiration_time",

		"friendly_name",

		"labels",

		"last_modified_time",

		"location",

		"num_bytes",

		"num_long_term_bytes",

		"num_rows",

		"project",

		"schema",

		"self_link",

		"time_partitioning",

		"type",

		"view",
	)
	rtb.ImmutableAttributes(

		"dataset_id",

		"project",

		"table_id",
	)
}

// Google_bigquery_tableHandler ...
type Google_bigquery_tableHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_bigquery_tableHandler) Create(desired *Google_bigquery_table) (*Google_bigquery_table, string, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Create Google_bigquery_table", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_bigquery_table", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Update ...
func (h *Google_bigquery_tableHandler) Update(externalID string, desired *Google_bigquery_table) (*Google_bigquery_table, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Update Google_bigquery_table", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	actual, err := bridge.Update(h.provider, "google_bigquery_table", externalID, rc)
	if err != nil {
		return nil, err
	}
	x := &Google_bigquery_table{Google_bigquery_table_id: &externalID}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Update Actual State Google_bigquery_table", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Read ...
func (h *Google_bigquery_tableHandler) Read(externalID string) (*Google_bigquery_table, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Read Google_bigquery_table", "externalID", externalID)
	}
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_bigquery_table", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_bigquery_table{Google_bigquery_table_id: &id}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Read Actual State Google_bigquery_table", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Delete ...
func (h *Google_bigquery_tableHandler) Delete(externalID string) error {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Delete Google_bigquery_table", "externalID", externalID)
	}
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_bigquery_table", externalID)
}

type Google_bigtable_instance_cluster_7 struct {
	Cluster_id *string

	Num_nodes *int

	Storage_type *string

	Zone *string
}

type Google_bigtable_instance struct {
	Google_bigtable_instance_id *string `lyra:"ignore"`

	Cluster *[]Google_bigtable_instance_cluster_7

	Cluster_id *string

	Display_name *string

	Instance_type *string

	Name string

	Num_nodes *int

	Project *string

	Storage_type *string

	Zone *string
}

var Google_bigtable_instance_rtb = func(rtb service.ResourceTypeBuilder) {
	rtb.ProvidedAttributes(
		"google_bigtable_instance_id",

		"cluster",

		"cluster_id",

		"display_name",

		"instance_type",

		"num_nodes",

		"project",

		"storage_type",

		"zone",
	)
	rtb.ImmutableAttributes(

		"display_name",

		"instance_type",

		"name",

		"project",

		"zone",
	)
}

// Google_bigtable_instanceHandler ...
type Google_bigtable_instanceHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_bigtable_instanceHandler) Create(desired *Google_bigtable_instance) (*Google_bigtable_instance, string, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Create Google_bigtable_instance", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_bigtable_instance", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Update ...
func (h *Google_bigtable_instanceHandler) Update(externalID string, desired *Google_bigtable_instance) (*Google_bigtable_instance, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Update Google_bigtable_instance", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	actual, err := bridge.Update(h.provider, "google_bigtable_instance", externalID, rc)
	if err != nil {
		return nil, err
	}
	x := &Google_bigtable_instance{Google_bigtable_instance_id: &externalID}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Update Actual State Google_bigtable_instance", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Read ...
func (h *Google_bigtable_instanceHandler) Read(externalID string) (*Google_bigtable_instance, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Read Google_bigtable_instance", "externalID", externalID)
	}
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_bigtable_instance", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_bigtable_instance{Google_bigtable_instance_id: &id}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Read Actual State Google_bigtable_instance", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Delete ...
func (h *Google_bigtable_instanceHandler) Delete(externalID string) error {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Delete Google_bigtable_instance", "externalID", externalID)
	}
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_bigtable_instance", externalID)
}

type Google_bigtable_table struct {
	Google_bigtable_table_id *string `lyra:"ignore"`

	Instance_name string

	Name string

	Project *string

	Split_keys *[]string
}

var Google_bigtable_table_rtb = func(rtb service.ResourceTypeBuilder) {
	rtb.ProvidedAttributes(
		"google_bigtable_table_id",

		"project",

		"split_keys",
	)
	rtb.ImmutableAttributes(

		"instance_name",

		"name",

		"project",

		"split_keys",
	)
}

// Google_bigtable_tableHandler ...
type Google_bigtable_tableHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_bigtable_tableHandler) Create(desired *Google_bigtable_table) (*Google_bigtable_table, string, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Create Google_bigtable_table", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_bigtable_table", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Update ...
func (h *Google_bigtable_tableHandler) Update(externalID string, desired *Google_bigtable_table) (*Google_bigtable_table, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Update Google_bigtable_table", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	actual, err := bridge.Update(h.provider, "google_bigtable_table", externalID, rc)
	if err != nil {
		return nil, err
	}
	x := &Google_bigtable_table{Google_bigtable_table_id: &externalID}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Update Actual State Google_bigtable_table", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Read ...
func (h *Google_bigtable_tableHandler) Read(externalID string) (*Google_bigtable_table, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Read Google_bigtable_table", "externalID", externalID)
	}
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_bigtable_table", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_bigtable_table{Google_bigtable_table_id: &id}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Read Actual State Google_bigtable_table", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Delete ...
func (h *Google_bigtable_tableHandler) Delete(externalID string) error {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Delete Google_bigtable_table", "externalID", externalID)
	}
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_bigtable_table", externalID)
}

type Google_billing_account_iam_binding struct {
	Google_billing_account_iam_binding_id *string `lyra:"ignore"`

	Billing_account_id string

	Etag *string

	Members []string

	Role string
}

var Google_billing_account_iam_binding_rtb = func(rtb service.ResourceTypeBuilder) {
	rtb.ProvidedAttributes(
		"google_billing_account_iam_binding_id",

		"etag",
	)
	rtb.ImmutableAttributes(

		"billing_account_id",

		"role",
	)
}

// Google_billing_account_iam_bindingHandler ...
type Google_billing_account_iam_bindingHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_billing_account_iam_bindingHandler) Create(desired *Google_billing_account_iam_binding) (*Google_billing_account_iam_binding, string, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Create Google_billing_account_iam_binding", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_billing_account_iam_binding", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Update ...
func (h *Google_billing_account_iam_bindingHandler) Update(externalID string, desired *Google_billing_account_iam_binding) (*Google_billing_account_iam_binding, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Update Google_billing_account_iam_binding", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	actual, err := bridge.Update(h.provider, "google_billing_account_iam_binding", externalID, rc)
	if err != nil {
		return nil, err
	}
	x := &Google_billing_account_iam_binding{Google_billing_account_iam_binding_id: &externalID}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Update Actual State Google_billing_account_iam_binding", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Read ...
func (h *Google_billing_account_iam_bindingHandler) Read(externalID string) (*Google_billing_account_iam_binding, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Read Google_billing_account_iam_binding", "externalID", externalID)
	}
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_billing_account_iam_binding", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_billing_account_iam_binding{Google_billing_account_iam_binding_id: &id}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Read Actual State Google_billing_account_iam_binding", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Delete ...
func (h *Google_billing_account_iam_bindingHandler) Delete(externalID string) error {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Delete Google_billing_account_iam_binding", "externalID", externalID)
	}
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_billing_account_iam_binding", externalID)
}

type Google_billing_account_iam_member struct {
	Google_billing_account_iam_member_id *string `lyra:"ignore"`

	Billing_account_id string

	Etag *string

	Member string

	Role string
}

var Google_billing_account_iam_member_rtb = func(rtb service.ResourceTypeBuilder) {
	rtb.ProvidedAttributes(
		"google_billing_account_iam_member_id",

		"etag",
	)
	rtb.ImmutableAttributes(

		"billing_account_id",

		"member",

		"role",
	)
}

// Google_billing_account_iam_memberHandler ...
type Google_billing_account_iam_memberHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_billing_account_iam_memberHandler) Create(desired *Google_billing_account_iam_member) (*Google_billing_account_iam_member, string, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Create Google_billing_account_iam_member", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_billing_account_iam_member", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Update ...
func (h *Google_billing_account_iam_memberHandler) Update(externalID string, desired *Google_billing_account_iam_member) (*Google_billing_account_iam_member, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Update Google_billing_account_iam_member", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	actual, err := bridge.Update(h.provider, "google_billing_account_iam_member", externalID, rc)
	if err != nil {
		return nil, err
	}
	x := &Google_billing_account_iam_member{Google_billing_account_iam_member_id: &externalID}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Update Actual State Google_billing_account_iam_member", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Read ...
func (h *Google_billing_account_iam_memberHandler) Read(externalID string) (*Google_billing_account_iam_member, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Read Google_billing_account_iam_member", "externalID", externalID)
	}
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_billing_account_iam_member", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_billing_account_iam_member{Google_billing_account_iam_member_id: &id}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Read Actual State Google_billing_account_iam_member", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Delete ...
func (h *Google_billing_account_iam_memberHandler) Delete(externalID string) error {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Delete Google_billing_account_iam_member", "externalID", externalID)
	}
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_billing_account_iam_member", externalID)
}

type Google_billing_account_iam_policy struct {
	Google_billing_account_iam_policy_id *string `lyra:"ignore"`

	Billing_account_id string

	Etag *string

	Policy_data string
}

var Google_billing_account_iam_policy_rtb = func(rtb service.ResourceTypeBuilder) {
	rtb.ProvidedAttributes(
		"google_billing_account_iam_policy_id",

		"etag",
	)
	rtb.ImmutableAttributes(

		"billing_account_id",
	)
}

// Google_billing_account_iam_policyHandler ...
type Google_billing_account_iam_policyHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_billing_account_iam_policyHandler) Create(desired *Google_billing_account_iam_policy) (*Google_billing_account_iam_policy, string, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Create Google_billing_account_iam_policy", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_billing_account_iam_policy", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Update ...
func (h *Google_billing_account_iam_policyHandler) Update(externalID string, desired *Google_billing_account_iam_policy) (*Google_billing_account_iam_policy, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Update Google_billing_account_iam_policy", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	actual, err := bridge.Update(h.provider, "google_billing_account_iam_policy", externalID, rc)
	if err != nil {
		return nil, err
	}
	x := &Google_billing_account_iam_policy{Google_billing_account_iam_policy_id: &externalID}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Update Actual State Google_billing_account_iam_policy", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Read ...
func (h *Google_billing_account_iam_policyHandler) Read(externalID string) (*Google_billing_account_iam_policy, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Read Google_billing_account_iam_policy", "externalID", externalID)
	}
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_billing_account_iam_policy", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_billing_account_iam_policy{Google_billing_account_iam_policy_id: &id}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Read Actual State Google_billing_account_iam_policy", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Delete ...
func (h *Google_billing_account_iam_policyHandler) Delete(externalID string) error {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Delete Google_billing_account_iam_policy", "externalID", externalID)
	}
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_billing_account_iam_policy", externalID)
}

type Google_binary_authorization_attestor_attestation_authority_note_8_public_keys_9 struct {
	Ascii_armored_pgp_public_key string

	Comment *string

	Id *string
}

type Google_binary_authorization_attestor_attestation_authority_note_8 struct {
	Delegation_service_account_email *string

	Note_reference string

	Public_keys *[]Google_binary_authorization_attestor_attestation_authority_note_8_public_keys_9
}

type Google_binary_authorization_attestor struct {
	Google_binary_authorization_attestor_id *string `lyra:"ignore"`

	Attestation_authority_note []Google_binary_authorization_attestor_attestation_authority_note_8

	Description *string

	Name string

	Project *string
}

var Google_binary_authorization_attestor_rtb = func(rtb service.ResourceTypeBuilder) {
	rtb.ProvidedAttributes(
		"google_binary_authorization_attestor_id",

		"description",

		"project",
	)
	rtb.ImmutableAttributes(

		"name",

		"project",
	)
}

// Google_binary_authorization_attestorHandler ...
type Google_binary_authorization_attestorHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_binary_authorization_attestorHandler) Create(desired *Google_binary_authorization_attestor) (*Google_binary_authorization_attestor, string, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Create Google_binary_authorization_attestor", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_binary_authorization_attestor", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Update ...
func (h *Google_binary_authorization_attestorHandler) Update(externalID string, desired *Google_binary_authorization_attestor) (*Google_binary_authorization_attestor, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Update Google_binary_authorization_attestor", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	actual, err := bridge.Update(h.provider, "google_binary_authorization_attestor", externalID, rc)
	if err != nil {
		return nil, err
	}
	x := &Google_binary_authorization_attestor{Google_binary_authorization_attestor_id: &externalID}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Update Actual State Google_binary_authorization_attestor", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Read ...
func (h *Google_binary_authorization_attestorHandler) Read(externalID string) (*Google_binary_authorization_attestor, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Read Google_binary_authorization_attestor", "externalID", externalID)
	}
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_binary_authorization_attestor", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_binary_authorization_attestor{Google_binary_authorization_attestor_id: &id}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Read Actual State Google_binary_authorization_attestor", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Delete ...
func (h *Google_binary_authorization_attestorHandler) Delete(externalID string) error {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Delete Google_binary_authorization_attestor", "externalID", externalID)
	}
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_binary_authorization_attestor", externalID)
}

type Google_binary_authorization_policy_admission_whitelist_patterns_10 struct {
	Name_pattern *string
}

type Google_binary_authorization_policy_cluster_admission_rules_11 struct {
	Cluster string

	Enforcement_mode *string

	Evaluation_mode *string

	Require_attestations_by *[]string
}

type Google_binary_authorization_policy_default_admission_rule_12 struct {
	Enforcement_mode string

	Evaluation_mode string

	Require_attestations_by *[]string
}

type Google_binary_authorization_policy struct {
	Google_binary_authorization_policy_id *string `lyra:"ignore"`

	Admission_whitelist_patterns *[]Google_binary_authorization_policy_admission_whitelist_patterns_10

	Cluster_admission_rules *[]Google_binary_authorization_policy_cluster_admission_rules_11

	Default_admission_rule []Google_binary_authorization_policy_default_admission_rule_12

	Description *string

	Project *string
}

var Google_binary_authorization_policy_rtb = func(rtb service.ResourceTypeBuilder) {
	rtb.ProvidedAttributes(
		"google_binary_authorization_policy_id",

		"admission_whitelist_patterns",

		"cluster_admission_rules",

		"description",

		"project",
	)
	rtb.ImmutableAttributes(

		"project",
	)
}

// Google_binary_authorization_policyHandler ...
type Google_binary_authorization_policyHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_binary_authorization_policyHandler) Create(desired *Google_binary_authorization_policy) (*Google_binary_authorization_policy, string, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Create Google_binary_authorization_policy", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_binary_authorization_policy", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Update ...
func (h *Google_binary_authorization_policyHandler) Update(externalID string, desired *Google_binary_authorization_policy) (*Google_binary_authorization_policy, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Update Google_binary_authorization_policy", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	actual, err := bridge.Update(h.provider, "google_binary_authorization_policy", externalID, rc)
	if err != nil {
		return nil, err
	}
	x := &Google_binary_authorization_policy{Google_binary_authorization_policy_id: &externalID}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Update Actual State Google_binary_authorization_policy", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Read ...
func (h *Google_binary_authorization_policyHandler) Read(externalID string) (*Google_binary_authorization_policy, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Read Google_binary_authorization_policy", "externalID", externalID)
	}
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_binary_authorization_policy", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_binary_authorization_policy{Google_binary_authorization_policy_id: &id}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Read Actual State Google_binary_authorization_policy", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Delete ...
func (h *Google_binary_authorization_policyHandler) Delete(externalID string) error {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Delete Google_binary_authorization_policy", "externalID", externalID)
	}
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_binary_authorization_policy", externalID)
}

type Google_cloudbuild_trigger_build_13_step_14 struct {
	Args *string

	Name *string
}

type Google_cloudbuild_trigger_build_13 struct {
	Images *[]string

	Step *[]Google_cloudbuild_trigger_build_13_step_14

	Tags *[]string
}

type Google_cloudbuild_trigger_trigger_template_15 struct {
	Branch_name *string

	Commit_sha *string

	Dir *string

	Project *string

	Repo_name *string

	Tag_name *string
}

type Google_cloudbuild_trigger struct {
	Google_cloudbuild_trigger_id *string `lyra:"ignore"`

	Build *[]Google_cloudbuild_trigger_build_13

	Description *string

	Filename *string

	Project *string

	Substitutions *map[string]string

	Trigger_template *[]Google_cloudbuild_trigger_trigger_template_15
}

var Google_cloudbuild_trigger_rtb = func(rtb service.ResourceTypeBuilder) {
	rtb.ProvidedAttributes(
		"google_cloudbuild_trigger_id",

		"build",

		"description",

		"filename",

		"project",

		"substitutions",

		"trigger_template",
	)
	rtb.ImmutableAttributes(

		"build",

		"description",

		"filename",

		"project",

		"substitutions",

		"trigger_template",
	)
}

// Google_cloudbuild_triggerHandler ...
type Google_cloudbuild_triggerHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_cloudbuild_triggerHandler) Create(desired *Google_cloudbuild_trigger) (*Google_cloudbuild_trigger, string, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Create Google_cloudbuild_trigger", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_cloudbuild_trigger", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Update ...
func (h *Google_cloudbuild_triggerHandler) Update(externalID string, desired *Google_cloudbuild_trigger) (*Google_cloudbuild_trigger, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Update Google_cloudbuild_trigger", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	actual, err := bridge.Update(h.provider, "google_cloudbuild_trigger", externalID, rc)
	if err != nil {
		return nil, err
	}
	x := &Google_cloudbuild_trigger{Google_cloudbuild_trigger_id: &externalID}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Update Actual State Google_cloudbuild_trigger", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Read ...
func (h *Google_cloudbuild_triggerHandler) Read(externalID string) (*Google_cloudbuild_trigger, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Read Google_cloudbuild_trigger", "externalID", externalID)
	}
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_cloudbuild_trigger", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_cloudbuild_trigger{Google_cloudbuild_trigger_id: &id}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Read Actual State Google_cloudbuild_trigger", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Delete ...
func (h *Google_cloudbuild_triggerHandler) Delete(externalID string) error {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Delete Google_cloudbuild_trigger", "externalID", externalID)
	}
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_cloudbuild_trigger", externalID)
}

type Google_cloudfunctions_function_event_trigger_16_failure_policy_17 struct {
	Retry bool
}

type Google_cloudfunctions_function_event_trigger_16 struct {
	Event_type string

	Failure_policy *[]Google_cloudfunctions_function_event_trigger_16_failure_policy_17

	Resource string
}

type Google_cloudfunctions_function struct {
	Google_cloudfunctions_function_id *string `lyra:"ignore"`

	Available_memory_mb *int

	Description *string

	Entry_point *string

	Environment_variables *map[string]string

	Event_trigger *[]Google_cloudfunctions_function_event_trigger_16

	Https_trigger_url *string

	Labels *map[string]string

	Name string

	Project *string

	Region *string

	Retry_on_failure *bool

	Runtime *string

	Source_archive_bucket string

	Source_archive_object string

	Timeout *int

	Trigger_bucket *string

	Trigger_http *bool

	Trigger_topic *string
}

var Google_cloudfunctions_function_rtb = func(rtb service.ResourceTypeBuilder) {
	rtb.ProvidedAttributes(
		"google_cloudfunctions_function_id",

		"available_memory_mb",

		"description",

		"entry_point",

		"environment_variables",

		"event_trigger",

		"https_trigger_url",

		"labels",

		"project",

		"region",

		"retry_on_failure",

		"runtime",

		"timeout",

		"trigger_bucket",

		"trigger_http",

		"trigger_topic",
	)
	rtb.ImmutableAttributes(

		"entry_point",

		"name",

		"project",

		"region",

		"trigger_http",
	)
}

// Google_cloudfunctions_functionHandler ...
type Google_cloudfunctions_functionHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_cloudfunctions_functionHandler) Create(desired *Google_cloudfunctions_function) (*Google_cloudfunctions_function, string, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Create Google_cloudfunctions_function", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_cloudfunctions_function", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Update ...
func (h *Google_cloudfunctions_functionHandler) Update(externalID string, desired *Google_cloudfunctions_function) (*Google_cloudfunctions_function, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Update Google_cloudfunctions_function", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	actual, err := bridge.Update(h.provider, "google_cloudfunctions_function", externalID, rc)
	if err != nil {
		return nil, err
	}
	x := &Google_cloudfunctions_function{Google_cloudfunctions_function_id: &externalID}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Update Actual State Google_cloudfunctions_function", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Read ...
func (h *Google_cloudfunctions_functionHandler) Read(externalID string) (*Google_cloudfunctions_function, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Read Google_cloudfunctions_function", "externalID", externalID)
	}
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_cloudfunctions_function", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_cloudfunctions_function{Google_cloudfunctions_function_id: &id}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Read Actual State Google_cloudfunctions_function", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Delete ...
func (h *Google_cloudfunctions_functionHandler) Delete(externalID string) error {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Delete Google_cloudfunctions_function", "externalID", externalID)
	}
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_cloudfunctions_function", externalID)
}

type Google_cloudiot_registry_credentials_18 struct {
	Public_key_certificate *map[string]string
}

type Google_cloudiot_registry struct {
	Google_cloudiot_registry_id *string `lyra:"ignore"`

	Credentials *[]Google_cloudiot_registry_credentials_18

	Event_notification_config *map[string]string

	Http_config *map[string]string

	Mqtt_config *map[string]string

	Name string

	Project *string

	Region *string

	State_notification_config *map[string]string
}

var Google_cloudiot_registry_rtb = func(rtb service.ResourceTypeBuilder) {
	rtb.ProvidedAttributes(
		"google_cloudiot_registry_id",

		"credentials",

		"event_notification_config",

		"http_config",

		"mqtt_config",

		"project",

		"region",

		"state_notification_config",
	)
	rtb.ImmutableAttributes(

		"name",

		"project",

		"region",
	)
}

// Google_cloudiot_registryHandler ...
type Google_cloudiot_registryHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_cloudiot_registryHandler) Create(desired *Google_cloudiot_registry) (*Google_cloudiot_registry, string, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Create Google_cloudiot_registry", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_cloudiot_registry", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Update ...
func (h *Google_cloudiot_registryHandler) Update(externalID string, desired *Google_cloudiot_registry) (*Google_cloudiot_registry, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Update Google_cloudiot_registry", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	actual, err := bridge.Update(h.provider, "google_cloudiot_registry", externalID, rc)
	if err != nil {
		return nil, err
	}
	x := &Google_cloudiot_registry{Google_cloudiot_registry_id: &externalID}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Update Actual State Google_cloudiot_registry", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Read ...
func (h *Google_cloudiot_registryHandler) Read(externalID string) (*Google_cloudiot_registry, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Read Google_cloudiot_registry", "externalID", externalID)
	}
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_cloudiot_registry", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_cloudiot_registry{Google_cloudiot_registry_id: &id}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Read Actual State Google_cloudiot_registry", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Delete ...
func (h *Google_cloudiot_registryHandler) Delete(externalID string) error {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Delete Google_cloudiot_registry", "externalID", externalID)
	}
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_cloudiot_registry", externalID)
}

type Google_composer_environment_config_19_node_config_20 struct {
	Disk_size_gb *int

	Machine_type *string

	Network *string

	Oauth_scopes *[]string

	Service_account *string

	Subnetwork *string

	Tags *[]string

	Zone *string
}

type Google_composer_environment_config_19_software_config_21 struct {
	Airflow_config_overrides *map[string]string

	Env_variables *map[string]string

	Image_version *string

	Pypi_packages *map[string]string
}

type Google_composer_environment_config_19 struct {
	Airflow_uri *string

	Dag_gcs_prefix *string

	Gke_cluster *string

	Node_config *[]Google_composer_environment_config_19_node_config_20

	Node_count *int

	Software_config *[]Google_composer_environment_config_19_software_config_21
}

type Google_composer_environment struct {
	Google_composer_environment_id *string `lyra:"ignore"`

	Config *[]Google_composer_environment_config_19

	Labels *map[string]string

	Name string

	Project *string

	Region *string
}

var Google_composer_environment_rtb = func(rtb service.ResourceTypeBuilder) {
	rtb.ProvidedAttributes(
		"google_composer_environment_id",

		"config",

		"labels",

		"project",

		"region",
	)
	rtb.ImmutableAttributes(

		"name",

		"project",

		"region",
	)
}

// Google_composer_environmentHandler ...
type Google_composer_environmentHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_composer_environmentHandler) Create(desired *Google_composer_environment) (*Google_composer_environment, string, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Create Google_composer_environment", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_composer_environment", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Update ...
func (h *Google_composer_environmentHandler) Update(externalID string, desired *Google_composer_environment) (*Google_composer_environment, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Update Google_composer_environment", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	actual, err := bridge.Update(h.provider, "google_composer_environment", externalID, rc)
	if err != nil {
		return nil, err
	}
	x := &Google_composer_environment{Google_composer_environment_id: &externalID}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Update Actual State Google_composer_environment", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Read ...
func (h *Google_composer_environmentHandler) Read(externalID string) (*Google_composer_environment, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Read Google_composer_environment", "externalID", externalID)
	}
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_composer_environment", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_composer_environment{Google_composer_environment_id: &id}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Read Actual State Google_composer_environment", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Delete ...
func (h *Google_composer_environmentHandler) Delete(externalID string) error {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Delete Google_composer_environment", "externalID", externalID)
	}
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_composer_environment", externalID)
}

type Google_compute_address struct {
	Google_compute_address_id *string `lyra:"ignore"`

	Address *string

	Address_type *string

	Creation_timestamp *string

	Description *string

	Label_fingerprint *string

	Labels *map[string]string

	Name string

	Network_tier *string

	Project *string

	Region *string

	Self_link *string

	Subnetwork *string

	Users *[]string
}

var Google_compute_address_rtb = func(rtb service.ResourceTypeBuilder) {
	rtb.ProvidedAttributes(
		"google_compute_address_id",

		"address",

		"address_type",

		"creation_timestamp",

		"description",

		"label_fingerprint",

		"labels",

		"network_tier",

		"project",

		"region",

		"self_link",

		"subnetwork",

		"users",
	)
	rtb.ImmutableAttributes(

		"address",

		"address_type",

		"description",

		"name",

		"network_tier",

		"project",

		"region",

		"subnetwork",
	)
}

// Google_compute_addressHandler ...
type Google_compute_addressHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_compute_addressHandler) Create(desired *Google_compute_address) (*Google_compute_address, string, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Create Google_compute_address", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_compute_address", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Update ...
func (h *Google_compute_addressHandler) Update(externalID string, desired *Google_compute_address) (*Google_compute_address, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Update Google_compute_address", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	actual, err := bridge.Update(h.provider, "google_compute_address", externalID, rc)
	if err != nil {
		return nil, err
	}
	x := &Google_compute_address{Google_compute_address_id: &externalID}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Update Actual State Google_compute_address", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Read ...
func (h *Google_compute_addressHandler) Read(externalID string) (*Google_compute_address, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Read Google_compute_address", "externalID", externalID)
	}
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_compute_address", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_compute_address{Google_compute_address_id: &id}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Read Actual State Google_compute_address", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Delete ...
func (h *Google_compute_addressHandler) Delete(externalID string) error {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Delete Google_compute_address", "externalID", externalID)
	}
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_compute_address", externalID)
}

type Google_compute_attached_disk struct {
	Google_compute_attached_disk_id *string `lyra:"ignore"`

	Device_name *string

	Disk string

	Instance string

	Mode *string

	Project *string

	Zone *string
}

var Google_compute_attached_disk_rtb = func(rtb service.ResourceTypeBuilder) {
	rtb.ProvidedAttributes(
		"google_compute_attached_disk_id",

		"device_name",

		"mode",

		"project",

		"zone",
	)
	rtb.ImmutableAttributes(

		"device_name",

		"disk",

		"instance",

		"mode",

		"project",

		"zone",
	)
}

// Google_compute_attached_diskHandler ...
type Google_compute_attached_diskHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_compute_attached_diskHandler) Create(desired *Google_compute_attached_disk) (*Google_compute_attached_disk, string, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Create Google_compute_attached_disk", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_compute_attached_disk", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Update ...
func (h *Google_compute_attached_diskHandler) Update(externalID string, desired *Google_compute_attached_disk) (*Google_compute_attached_disk, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Update Google_compute_attached_disk", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	actual, err := bridge.Update(h.provider, "google_compute_attached_disk", externalID, rc)
	if err != nil {
		return nil, err
	}
	x := &Google_compute_attached_disk{Google_compute_attached_disk_id: &externalID}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Update Actual State Google_compute_attached_disk", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Read ...
func (h *Google_compute_attached_diskHandler) Read(externalID string) (*Google_compute_attached_disk, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Read Google_compute_attached_disk", "externalID", externalID)
	}
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_compute_attached_disk", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_compute_attached_disk{Google_compute_attached_disk_id: &id}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Read Actual State Google_compute_attached_disk", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Delete ...
func (h *Google_compute_attached_diskHandler) Delete(externalID string) error {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Delete Google_compute_attached_disk", "externalID", externalID)
	}
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_compute_attached_disk", externalID)
}

type Google_compute_autoscaler_autoscaling_policy_22_cpu_utilization_23 struct {
	Target float64
}

type Google_compute_autoscaler_autoscaling_policy_22_load_balancing_utilization_24 struct {
	Target float64
}

type Google_compute_autoscaler_autoscaling_policy_22_metric_25 struct {
	Name string

	Target float64

	Type string
}

type Google_compute_autoscaler_autoscaling_policy_22 struct {
	Cooldown_period *int

	Cpu_utilization *[]Google_compute_autoscaler_autoscaling_policy_22_cpu_utilization_23

	Load_balancing_utilization *[]Google_compute_autoscaler_autoscaling_policy_22_load_balancing_utilization_24

	Max_replicas int

	Metric *[]Google_compute_autoscaler_autoscaling_policy_22_metric_25

	Min_replicas int
}

type Google_compute_autoscaler struct {
	Google_compute_autoscaler_id *string `lyra:"ignore"`

	Autoscaling_policy []Google_compute_autoscaler_autoscaling_policy_22

	Creation_timestamp *string

	Description *string

	Name string

	Project *string

	Self_link *string

	Target string

	Zone *string
}

var Google_compute_autoscaler_rtb = func(rtb service.ResourceTypeBuilder) {
	rtb.ProvidedAttributes(
		"google_compute_autoscaler_id",

		"creation_timestamp",

		"description",

		"project",

		"self_link",

		"zone",
	)
	rtb.ImmutableAttributes(

		"name",

		"project",

		"zone",
	)
}

// Google_compute_autoscalerHandler ...
type Google_compute_autoscalerHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_compute_autoscalerHandler) Create(desired *Google_compute_autoscaler) (*Google_compute_autoscaler, string, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Create Google_compute_autoscaler", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_compute_autoscaler", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Update ...
func (h *Google_compute_autoscalerHandler) Update(externalID string, desired *Google_compute_autoscaler) (*Google_compute_autoscaler, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Update Google_compute_autoscaler", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	actual, err := bridge.Update(h.provider, "google_compute_autoscaler", externalID, rc)
	if err != nil {
		return nil, err
	}
	x := &Google_compute_autoscaler{Google_compute_autoscaler_id: &externalID}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Update Actual State Google_compute_autoscaler", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Read ...
func (h *Google_compute_autoscalerHandler) Read(externalID string) (*Google_compute_autoscaler, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Read Google_compute_autoscaler", "externalID", externalID)
	}
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_compute_autoscaler", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_compute_autoscaler{Google_compute_autoscaler_id: &id}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Read Actual State Google_compute_autoscaler", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Delete ...
func (h *Google_compute_autoscalerHandler) Delete(externalID string) error {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Delete Google_compute_autoscaler", "externalID", externalID)
	}
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_compute_autoscaler", externalID)
}

type Google_compute_backend_bucket struct {
	Google_compute_backend_bucket_id *string `lyra:"ignore"`

	Bucket_name string

	Creation_timestamp *string

	Description *string

	Enable_cdn *bool

	Name string

	Project *string

	Self_link *string
}

var Google_compute_backend_bucket_rtb = func(rtb service.ResourceTypeBuilder) {
	rtb.ProvidedAttributes(
		"google_compute_backend_bucket_id",

		"creation_timestamp",

		"description",

		"enable_cdn",

		"project",

		"self_link",
	)
	rtb.ImmutableAttributes(

		"name",

		"project",
	)
}

// Google_compute_backend_bucketHandler ...
type Google_compute_backend_bucketHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_compute_backend_bucketHandler) Create(desired *Google_compute_backend_bucket) (*Google_compute_backend_bucket, string, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Create Google_compute_backend_bucket", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_compute_backend_bucket", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Update ...
func (h *Google_compute_backend_bucketHandler) Update(externalID string, desired *Google_compute_backend_bucket) (*Google_compute_backend_bucket, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Update Google_compute_backend_bucket", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	actual, err := bridge.Update(h.provider, "google_compute_backend_bucket", externalID, rc)
	if err != nil {
		return nil, err
	}
	x := &Google_compute_backend_bucket{Google_compute_backend_bucket_id: &externalID}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Update Actual State Google_compute_backend_bucket", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Read ...
func (h *Google_compute_backend_bucketHandler) Read(externalID string) (*Google_compute_backend_bucket, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Read Google_compute_backend_bucket", "externalID", externalID)
	}
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_compute_backend_bucket", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_compute_backend_bucket{Google_compute_backend_bucket_id: &id}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Read Actual State Google_compute_backend_bucket", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Delete ...
func (h *Google_compute_backend_bucketHandler) Delete(externalID string) error {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Delete Google_compute_backend_bucket", "externalID", externalID)
	}
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_compute_backend_bucket", externalID)
}

type Google_compute_backend_service_backend_26 struct {
	Balancing_mode *string

	Capacity_scaler *float64

	Description *string

	Group *string

	Max_connections *int

	Max_connections_per_instance *int

	Max_rate *int

	Max_rate_per_instance *float64

	Max_utilization *float64
}

type Google_compute_backend_service_cdn_policy_27_cache_key_policy_28 struct {
	Include_host *bool

	Include_protocol *bool

	Include_query_string *bool

	Query_string_blacklist *[]string

	Query_string_whitelist *[]string
}

type Google_compute_backend_service_cdn_policy_27 struct {
	Cache_key_policy *[]Google_compute_backend_service_cdn_policy_27_cache_key_policy_28
}

type Google_compute_backend_service_iap_29 struct {
	Oauth2_client_id string

	Oauth2_client_secret string
}

type Google_compute_backend_service struct {
	Google_compute_backend_service_id *string `lyra:"ignore"`

	Backend *[]Google_compute_backend_service_backend_26

	Cdn_policy *[]Google_compute_backend_service_cdn_policy_27

	Connection_draining_timeout_sec *int

	Custom_request_headers *[]string

	Description *string

	Enable_cdn *bool

	Fingerprint *string

	Health_checks []string

	Iap *[]Google_compute_backend_service_iap_29

	Name string

	Port_name *string

	Project *string

	Protocol *string

	Region *string

	Security_policy *string

	Self_link *string

	Session_affinity *string

	Timeout_sec *int
}

var Google_compute_backend_service_rtb = func(rtb service.ResourceTypeBuilder) {
	rtb.ProvidedAttributes(
		"google_compute_backend_service_id",

		"backend",

		"cdn_policy",

		"connection_draining_timeout_sec",

		"custom_request_headers",

		"description",

		"enable_cdn",

		"fingerprint",

		"iap",

		"port_name",

		"project",

		"protocol",

		"region",

		"security_policy",

		"self_link",

		"session_affinity",

		"timeout_sec",
	)
	rtb.ImmutableAttributes(

		"name",

		"project",

		"region",
	)
}

// Google_compute_backend_serviceHandler ...
type Google_compute_backend_serviceHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_compute_backend_serviceHandler) Create(desired *Google_compute_backend_service) (*Google_compute_backend_service, string, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Create Google_compute_backend_service", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_compute_backend_service", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Update ...
func (h *Google_compute_backend_serviceHandler) Update(externalID string, desired *Google_compute_backend_service) (*Google_compute_backend_service, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Update Google_compute_backend_service", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	actual, err := bridge.Update(h.provider, "google_compute_backend_service", externalID, rc)
	if err != nil {
		return nil, err
	}
	x := &Google_compute_backend_service{Google_compute_backend_service_id: &externalID}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Update Actual State Google_compute_backend_service", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Read ...
func (h *Google_compute_backend_serviceHandler) Read(externalID string) (*Google_compute_backend_service, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Read Google_compute_backend_service", "externalID", externalID)
	}
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_compute_backend_service", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_compute_backend_service{Google_compute_backend_service_id: &id}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Read Actual State Google_compute_backend_service", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Delete ...
func (h *Google_compute_backend_serviceHandler) Delete(externalID string) error {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Delete Google_compute_backend_service", "externalID", externalID)
	}
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_compute_backend_service", externalID)
}

type Google_compute_disk_disk_encryption_key_30 struct {
	Raw_key *string

	Sha256 *string
}

type Google_compute_disk_source_image_encryption_key_31 struct {
	Raw_key *string

	Sha256 *string
}

type Google_compute_disk_source_snapshot_encryption_key_32 struct {
	Raw_key *string

	Sha256 *string
}

type Google_compute_disk struct {
	Google_compute_disk_id *string `lyra:"ignore"`

	Creation_timestamp *string

	Description *string

	Disk_encryption_key *[]Google_compute_disk_disk_encryption_key_30

	Disk_encryption_key_raw *string

	Disk_encryption_key_sha256 *string

	Image *string

	Label_fingerprint *string

	Labels *map[string]string

	Last_attach_timestamp *string

	Last_detach_timestamp *string

	Name string

	Project *string

	Self_link *string

	Size *int

	Snapshot *string

	Source_image_encryption_key *[]Google_compute_disk_source_image_encryption_key_31

	Source_image_id *string

	Source_snapshot_encryption_key *[]Google_compute_disk_source_snapshot_encryption_key_32

	Source_snapshot_id *string

	Type *string

	Users *[]string

	Zone *string
}

var Google_compute_disk_rtb = func(rtb service.ResourceTypeBuilder) {
	rtb.ProvidedAttributes(
		"google_compute_disk_id",

		"creation_timestamp",

		"description",

		"disk_encryption_key",

		"disk_encryption_key_raw",

		"disk_encryption_key_sha256",

		"image",

		"label_fingerprint",

		"labels",

		"last_attach_timestamp",

		"last_detach_timestamp",

		"project",

		"self_link",

		"size",

		"snapshot",

		"source_image_encryption_key",

		"source_image_id",

		"source_snapshot_encryption_key",

		"source_snapshot_id",

		"type",

		"users",

		"zone",
	)
	rtb.ImmutableAttributes(

		"description",

		"disk_encryption_key",

		"image",

		"name",

		"project",

		"snapshot",

		"source_image_encryption_key",

		"source_snapshot_encryption_key",

		"type",

		"zone",
	)
}

// Google_compute_diskHandler ...
type Google_compute_diskHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_compute_diskHandler) Create(desired *Google_compute_disk) (*Google_compute_disk, string, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Create Google_compute_disk", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_compute_disk", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Update ...
func (h *Google_compute_diskHandler) Update(externalID string, desired *Google_compute_disk) (*Google_compute_disk, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Update Google_compute_disk", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	actual, err := bridge.Update(h.provider, "google_compute_disk", externalID, rc)
	if err != nil {
		return nil, err
	}
	x := &Google_compute_disk{Google_compute_disk_id: &externalID}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Update Actual State Google_compute_disk", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Read ...
func (h *Google_compute_diskHandler) Read(externalID string) (*Google_compute_disk, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Read Google_compute_disk", "externalID", externalID)
	}
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_compute_disk", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_compute_disk{Google_compute_disk_id: &id}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Read Actual State Google_compute_disk", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Delete ...
func (h *Google_compute_diskHandler) Delete(externalID string) error {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Delete Google_compute_disk", "externalID", externalID)
	}
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_compute_disk", externalID)
}

type Google_compute_firewall_allow_33 struct {
	Ports *[]string

	Protocol string
}

type Google_compute_firewall_deny_34 struct {
	Ports *[]string

	Protocol string
}

type Google_compute_firewall struct {
	Google_compute_firewall_id *string `lyra:"ignore"`

	Allow *[]Google_compute_firewall_allow_33

	Creation_timestamp *string

	Deny *[]Google_compute_firewall_deny_34

	Description *string

	Destination_ranges *[]string

	Direction *string

	Disabled *bool

	Enable_logging *bool

	Name string

	Network string

	Priority *int

	Project *string

	Self_link *string

	Source_ranges *[]string

	Source_service_accounts *[]string

	Source_tags *[]string

	Target_service_accounts *[]string

	Target_tags *[]string
}

var Google_compute_firewall_rtb = func(rtb service.ResourceTypeBuilder) {
	rtb.ProvidedAttributes(
		"google_compute_firewall_id",

		"allow",

		"creation_timestamp",

		"deny",

		"description",

		"destination_ranges",

		"direction",

		"disabled",

		"enable_logging",

		"priority",

		"project",

		"self_link",

		"source_ranges",

		"source_service_accounts",

		"source_tags",

		"target_service_accounts",

		"target_tags",
	)
	rtb.ImmutableAttributes(

		"name",

		"project",
	)
}

// Google_compute_firewallHandler ...
type Google_compute_firewallHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_compute_firewallHandler) Create(desired *Google_compute_firewall) (*Google_compute_firewall, string, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Create Google_compute_firewall", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_compute_firewall", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Update ...
func (h *Google_compute_firewallHandler) Update(externalID string, desired *Google_compute_firewall) (*Google_compute_firewall, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Update Google_compute_firewall", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	actual, err := bridge.Update(h.provider, "google_compute_firewall", externalID, rc)
	if err != nil {
		return nil, err
	}
	x := &Google_compute_firewall{Google_compute_firewall_id: &externalID}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Update Actual State Google_compute_firewall", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Read ...
func (h *Google_compute_firewallHandler) Read(externalID string) (*Google_compute_firewall, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Read Google_compute_firewall", "externalID", externalID)
	}
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_compute_firewall", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_compute_firewall{Google_compute_firewall_id: &id}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Read Actual State Google_compute_firewall", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Delete ...
func (h *Google_compute_firewallHandler) Delete(externalID string) error {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Delete Google_compute_firewall", "externalID", externalID)
	}
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_compute_firewall", externalID)
}

type Google_compute_forwarding_rule struct {
	Google_compute_forwarding_rule_id *string `lyra:"ignore"`

	Backend_service *string

	Creation_timestamp *string

	Description *string

	Ip_address *string

	Ip_protocol *string

	Ip_version *string

	Label_fingerprint *string

	Labels *map[string]string

	Load_balancing_scheme *string

	Name string

	Network *string

	Network_tier *string

	Port_range *string

	Ports *[]string

	Project *string

	Region *string

	Self_link *string

	Service_label *string

	Service_name *string

	Subnetwork *string

	Target *string
}

var Google_compute_forwarding_rule_rtb = func(rtb service.ResourceTypeBuilder) {
	rtb.ProvidedAttributes(
		"google_compute_forwarding_rule_id",

		"backend_service",

		"creation_timestamp",

		"description",

		"ip_address",

		"ip_protocol",

		"ip_version",

		"label_fingerprint",

		"labels",

		"load_balancing_scheme",

		"network",

		"network_tier",

		"port_range",

		"ports",

		"project",

		"region",

		"self_link",

		"service_label",

		"service_name",

		"subnetwork",

		"target",
	)
	rtb.ImmutableAttributes(

		"backend_service",

		"description",

		"ip_address",

		"ip_protocol",

		"ip_version",

		"load_balancing_scheme",

		"name",

		"network",

		"network_tier",

		"port_range",

		"ports",

		"project",

		"region",

		"service_label",

		"subnetwork",
	)
}

// Google_compute_forwarding_ruleHandler ...
type Google_compute_forwarding_ruleHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_compute_forwarding_ruleHandler) Create(desired *Google_compute_forwarding_rule) (*Google_compute_forwarding_rule, string, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Create Google_compute_forwarding_rule", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_compute_forwarding_rule", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Update ...
func (h *Google_compute_forwarding_ruleHandler) Update(externalID string, desired *Google_compute_forwarding_rule) (*Google_compute_forwarding_rule, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Update Google_compute_forwarding_rule", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	actual, err := bridge.Update(h.provider, "google_compute_forwarding_rule", externalID, rc)
	if err != nil {
		return nil, err
	}
	x := &Google_compute_forwarding_rule{Google_compute_forwarding_rule_id: &externalID}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Update Actual State Google_compute_forwarding_rule", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Read ...
func (h *Google_compute_forwarding_ruleHandler) Read(externalID string) (*Google_compute_forwarding_rule, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Read Google_compute_forwarding_rule", "externalID", externalID)
	}
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_compute_forwarding_rule", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_compute_forwarding_rule{Google_compute_forwarding_rule_id: &id}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Read Actual State Google_compute_forwarding_rule", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Delete ...
func (h *Google_compute_forwarding_ruleHandler) Delete(externalID string) error {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Delete Google_compute_forwarding_rule", "externalID", externalID)
	}
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_compute_forwarding_rule", externalID)
}

type Google_compute_global_address struct {
	Google_compute_global_address_id *string `lyra:"ignore"`

	Address *string

	Address_type *string

	Creation_timestamp *string

	Description *string

	Ip_version *string

	Label_fingerprint *string

	Labels *map[string]string

	Name string

	Network *string

	Prefix_length *int

	Project *string

	Purpose *string

	Self_link *string
}

var Google_compute_global_address_rtb = func(rtb service.ResourceTypeBuilder) {
	rtb.ProvidedAttributes(
		"google_compute_global_address_id",

		"address",

		"address_type",

		"creation_timestamp",

		"description",

		"ip_version",

		"label_fingerprint",

		"labels",

		"network",

		"prefix_length",

		"project",

		"purpose",

		"self_link",
	)
	rtb.ImmutableAttributes(

		"address_type",

		"description",

		"ip_version",

		"name",

		"network",

		"prefix_length",

		"project",

		"purpose",
	)
}

// Google_compute_global_addressHandler ...
type Google_compute_global_addressHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_compute_global_addressHandler) Create(desired *Google_compute_global_address) (*Google_compute_global_address, string, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Create Google_compute_global_address", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_compute_global_address", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Update ...
func (h *Google_compute_global_addressHandler) Update(externalID string, desired *Google_compute_global_address) (*Google_compute_global_address, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Update Google_compute_global_address", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	actual, err := bridge.Update(h.provider, "google_compute_global_address", externalID, rc)
	if err != nil {
		return nil, err
	}
	x := &Google_compute_global_address{Google_compute_global_address_id: &externalID}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Update Actual State Google_compute_global_address", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Read ...
func (h *Google_compute_global_addressHandler) Read(externalID string) (*Google_compute_global_address, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Read Google_compute_global_address", "externalID", externalID)
	}
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_compute_global_address", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_compute_global_address{Google_compute_global_address_id: &id}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Read Actual State Google_compute_global_address", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Delete ...
func (h *Google_compute_global_addressHandler) Delete(externalID string) error {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Delete Google_compute_global_address", "externalID", externalID)
	}
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_compute_global_address", externalID)
}

type Google_compute_global_forwarding_rule struct {
	Google_compute_global_forwarding_rule_id *string `lyra:"ignore"`

	Description *string

	Ip_address *string

	Ip_protocol *string

	Ip_version *string

	Label_fingerprint *string

	Labels *map[string]string

	Name string

	Port_range *string

	Project *string

	Region *string

	Self_link *string

	Target string
}

var Google_compute_global_forwarding_rule_rtb = func(rtb service.ResourceTypeBuilder) {
	rtb.ProvidedAttributes(
		"google_compute_global_forwarding_rule_id",

		"description",

		"ip_address",

		"ip_protocol",

		"ip_version",

		"label_fingerprint",

		"labels",

		"port_range",

		"project",

		"region",

		"self_link",
	)
	rtb.ImmutableAttributes(

		"description",

		"ip_address",

		"ip_protocol",

		"ip_version",

		"name",

		"port_range",

		"project",

		"region",
	)
}

// Google_compute_global_forwarding_ruleHandler ...
type Google_compute_global_forwarding_ruleHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_compute_global_forwarding_ruleHandler) Create(desired *Google_compute_global_forwarding_rule) (*Google_compute_global_forwarding_rule, string, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Create Google_compute_global_forwarding_rule", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_compute_global_forwarding_rule", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Update ...
func (h *Google_compute_global_forwarding_ruleHandler) Update(externalID string, desired *Google_compute_global_forwarding_rule) (*Google_compute_global_forwarding_rule, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Update Google_compute_global_forwarding_rule", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	actual, err := bridge.Update(h.provider, "google_compute_global_forwarding_rule", externalID, rc)
	if err != nil {
		return nil, err
	}
	x := &Google_compute_global_forwarding_rule{Google_compute_global_forwarding_rule_id: &externalID}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Update Actual State Google_compute_global_forwarding_rule", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Read ...
func (h *Google_compute_global_forwarding_ruleHandler) Read(externalID string) (*Google_compute_global_forwarding_rule, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Read Google_compute_global_forwarding_rule", "externalID", externalID)
	}
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_compute_global_forwarding_rule", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_compute_global_forwarding_rule{Google_compute_global_forwarding_rule_id: &id}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Read Actual State Google_compute_global_forwarding_rule", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Delete ...
func (h *Google_compute_global_forwarding_ruleHandler) Delete(externalID string) error {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Delete Google_compute_global_forwarding_rule", "externalID", externalID)
	}
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_compute_global_forwarding_rule", externalID)
}

type Google_compute_health_check_http_health_check_35 struct {
	Host *string

	Port *int

	Proxy_header *string

	Request_path *string

	Response *string
}

type Google_compute_health_check_https_health_check_36 struct {
	Host *string

	Port *int

	Proxy_header *string

	Request_path *string

	Response *string
}

type Google_compute_health_check_ssl_health_check_37 struct {
	Port *int

	Proxy_header *string

	Request *string

	Response *string
}

type Google_compute_health_check_tcp_health_check_38 struct {
	Port *int

	Proxy_header *string

	Request *string

	Response *string
}

type Google_compute_health_check struct {
	Google_compute_health_check_id *string `lyra:"ignore"`

	Check_interval_sec *int

	Creation_timestamp *string

	Description *string

	Healthy_threshold *int

	Http_health_check *[]Google_compute_health_check_http_health_check_35

	Https_health_check *[]Google_compute_health_check_https_health_check_36

	Name string

	Project *string

	Self_link *string

	Ssl_health_check *[]Google_compute_health_check_ssl_health_check_37

	Tcp_health_check *[]Google_compute_health_check_tcp_health_check_38

	Timeout_sec *int

	Type *string

	Unhealthy_threshold *int
}

var Google_compute_health_check_rtb = func(rtb service.ResourceTypeBuilder) {
	rtb.ProvidedAttributes(
		"google_compute_health_check_id",

		"check_interval_sec",

		"creation_timestamp",

		"description",

		"healthy_threshold",

		"http_health_check",

		"https_health_check",

		"project",

		"self_link",

		"ssl_health_check",

		"tcp_health_check",

		"timeout_sec",

		"type",

		"unhealthy_threshold",
	)
	rtb.ImmutableAttributes(

		"name",

		"project",
	)
}

// Google_compute_health_checkHandler ...
type Google_compute_health_checkHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_compute_health_checkHandler) Create(desired *Google_compute_health_check) (*Google_compute_health_check, string, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Create Google_compute_health_check", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_compute_health_check", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Update ...
func (h *Google_compute_health_checkHandler) Update(externalID string, desired *Google_compute_health_check) (*Google_compute_health_check, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Update Google_compute_health_check", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	actual, err := bridge.Update(h.provider, "google_compute_health_check", externalID, rc)
	if err != nil {
		return nil, err
	}
	x := &Google_compute_health_check{Google_compute_health_check_id: &externalID}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Update Actual State Google_compute_health_check", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Read ...
func (h *Google_compute_health_checkHandler) Read(externalID string) (*Google_compute_health_check, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Read Google_compute_health_check", "externalID", externalID)
	}
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_compute_health_check", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_compute_health_check{Google_compute_health_check_id: &id}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Read Actual State Google_compute_health_check", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Delete ...
func (h *Google_compute_health_checkHandler) Delete(externalID string) error {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Delete Google_compute_health_check", "externalID", externalID)
	}
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_compute_health_check", externalID)
}

type Google_compute_http_health_check struct {
	Google_compute_http_health_check_id *string `lyra:"ignore"`

	Check_interval_sec *int

	Creation_timestamp *string

	Description *string

	Healthy_threshold *int

	Host *string

	Name string

	Port *int

	Project *string

	Request_path *string

	Self_link *string

	Timeout_sec *int

	Unhealthy_threshold *int
}

var Google_compute_http_health_check_rtb = func(rtb service.ResourceTypeBuilder) {
	rtb.ProvidedAttributes(
		"google_compute_http_health_check_id",

		"check_interval_sec",

		"creation_timestamp",

		"description",

		"healthy_threshold",

		"host",

		"port",

		"project",

		"request_path",

		"self_link",

		"timeout_sec",

		"unhealthy_threshold",
	)
	rtb.ImmutableAttributes(

		"name",

		"project",
	)
}

// Google_compute_http_health_checkHandler ...
type Google_compute_http_health_checkHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_compute_http_health_checkHandler) Create(desired *Google_compute_http_health_check) (*Google_compute_http_health_check, string, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Create Google_compute_http_health_check", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_compute_http_health_check", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Update ...
func (h *Google_compute_http_health_checkHandler) Update(externalID string, desired *Google_compute_http_health_check) (*Google_compute_http_health_check, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Update Google_compute_http_health_check", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	actual, err := bridge.Update(h.provider, "google_compute_http_health_check", externalID, rc)
	if err != nil {
		return nil, err
	}
	x := &Google_compute_http_health_check{Google_compute_http_health_check_id: &externalID}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Update Actual State Google_compute_http_health_check", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Read ...
func (h *Google_compute_http_health_checkHandler) Read(externalID string) (*Google_compute_http_health_check, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Read Google_compute_http_health_check", "externalID", externalID)
	}
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_compute_http_health_check", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_compute_http_health_check{Google_compute_http_health_check_id: &id}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Read Actual State Google_compute_http_health_check", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Delete ...
func (h *Google_compute_http_health_checkHandler) Delete(externalID string) error {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Delete Google_compute_http_health_check", "externalID", externalID)
	}
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_compute_http_health_check", externalID)
}

type Google_compute_https_health_check struct {
	Google_compute_https_health_check_id *string `lyra:"ignore"`

	Check_interval_sec *int

	Creation_timestamp *string

	Description *string

	Healthy_threshold *int

	Host *string

	Name string

	Port *int

	Project *string

	Request_path *string

	Self_link *string

	Timeout_sec *int

	Unhealthy_threshold *int
}

var Google_compute_https_health_check_rtb = func(rtb service.ResourceTypeBuilder) {
	rtb.ProvidedAttributes(
		"google_compute_https_health_check_id",

		"check_interval_sec",

		"creation_timestamp",

		"description",

		"healthy_threshold",

		"host",

		"port",

		"project",

		"request_path",

		"self_link",

		"timeout_sec",

		"unhealthy_threshold",
	)
	rtb.ImmutableAttributes(

		"name",

		"project",
	)
}

// Google_compute_https_health_checkHandler ...
type Google_compute_https_health_checkHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_compute_https_health_checkHandler) Create(desired *Google_compute_https_health_check) (*Google_compute_https_health_check, string, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Create Google_compute_https_health_check", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_compute_https_health_check", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Update ...
func (h *Google_compute_https_health_checkHandler) Update(externalID string, desired *Google_compute_https_health_check) (*Google_compute_https_health_check, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Update Google_compute_https_health_check", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	actual, err := bridge.Update(h.provider, "google_compute_https_health_check", externalID, rc)
	if err != nil {
		return nil, err
	}
	x := &Google_compute_https_health_check{Google_compute_https_health_check_id: &externalID}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Update Actual State Google_compute_https_health_check", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Read ...
func (h *Google_compute_https_health_checkHandler) Read(externalID string) (*Google_compute_https_health_check, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Read Google_compute_https_health_check", "externalID", externalID)
	}
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_compute_https_health_check", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_compute_https_health_check{Google_compute_https_health_check_id: &id}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Read Actual State Google_compute_https_health_check", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Delete ...
func (h *Google_compute_https_health_checkHandler) Delete(externalID string) error {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Delete Google_compute_https_health_check", "externalID", externalID)
	}
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_compute_https_health_check", externalID)
}

type Google_compute_image_raw_disk_39 struct {
	Container_type *string

	Sha1 *string

	Source string
}

type Google_compute_image struct {
	Google_compute_image_id *string `lyra:"ignore"`

	Create_timeout *int

	Description *string

	Family *string

	Label_fingerprint *string

	Labels *map[string]string

	Licenses *[]string

	Name string

	Project *string

	Raw_disk *[]Google_compute_image_raw_disk_39

	Self_link *string

	Source_disk *string
}

var Google_compute_image_rtb = func(rtb service.ResourceTypeBuilder) {
	rtb.ProvidedAttributes(
		"google_compute_image_id",

		"create_timeout",

		"description",

		"family",

		"label_fingerprint",

		"labels",

		"licenses",

		"project",

		"raw_disk",

		"self_link",

		"source_disk",
	)
	rtb.ImmutableAttributes(

		"description",

		"family",

		"licenses",

		"name",

		"project",

		"raw_disk",

		"source_disk",
	)
}

// Google_compute_imageHandler ...
type Google_compute_imageHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_compute_imageHandler) Create(desired *Google_compute_image) (*Google_compute_image, string, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Create Google_compute_image", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_compute_image", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Update ...
func (h *Google_compute_imageHandler) Update(externalID string, desired *Google_compute_image) (*Google_compute_image, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Update Google_compute_image", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	actual, err := bridge.Update(h.provider, "google_compute_image", externalID, rc)
	if err != nil {
		return nil, err
	}
	x := &Google_compute_image{Google_compute_image_id: &externalID}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Update Actual State Google_compute_image", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Read ...
func (h *Google_compute_imageHandler) Read(externalID string) (*Google_compute_image, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Read Google_compute_image", "externalID", externalID)
	}
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_compute_image", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_compute_image{Google_compute_image_id: &id}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Read Actual State Google_compute_image", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Delete ...
func (h *Google_compute_imageHandler) Delete(externalID string) error {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Delete Google_compute_image", "externalID", externalID)
	}
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_compute_image", externalID)
}

type Google_compute_instance_attached_disk_40 struct {
	Device_name *string

	Disk_encryption_key_raw *string

	Disk_encryption_key_sha256 *string

	Mode *string

	Source string
}

type Google_compute_instance_boot_disk_41_initialize_params_42 struct {
	Image *string

	Size *int

	Type *string
}

type Google_compute_instance_boot_disk_41 struct {
	Auto_delete *bool

	Device_name *string

	Disk_encryption_key_raw *string

	Disk_encryption_key_sha256 *string

	Initialize_params *[]Google_compute_instance_boot_disk_41_initialize_params_42

	Source *string
}

type Google_compute_instance_disk_43 struct {
	Auto_delete *bool

	Device_name *string

	Disk *string

	Disk_encryption_key_raw *string

	Disk_encryption_key_sha256 *string

	Image *string

	Scratch *bool

	Size *int

	Type *string
}

type Google_compute_instance_guest_accelerator_44 struct {
	Count int

	Type string
}

type Google_compute_instance_network_45 struct {
	Address *string

	External_address *string

	Internal_address *string

	Name *string

	Source string
}

type Google_compute_instance_network_interface_46_access_config_47 struct {
	Assigned_nat_ip *string

	Nat_ip *string

	Network_tier *string

	Public_ptr_domain_name *string
}

type Google_compute_instance_network_interface_46_alias_ip_range_48 struct {
	Ip_cidr_range string

	Subnetwork_range_name *string
}

type Google_compute_instance_network_interface_46 struct {
	Access_config *[]Google_compute_instance_network_interface_46_access_config_47

	Address *string

	Alias_ip_range *[]Google_compute_instance_network_interface_46_alias_ip_range_48

	Name *string

	Network *string

	Network_ip *string

	Subnetwork *string

	Subnetwork_project *string
}

type Google_compute_instance_scheduling_49 struct {
	Automatic_restart *bool

	On_host_maintenance *string

	Preemptible *bool
}

type Google_compute_instance_scratch_disk_50 struct {
	Interface *string
}

type Google_compute_instance_service_account_51 struct {
	Email *string

	Scopes []string
}

type Google_compute_instance struct {
	Google_compute_instance_id *string `lyra:"ignore"`

	Allow_stopping_for_update *bool

	Attached_disk *[]Google_compute_instance_attached_disk_40

	Boot_disk []Google_compute_instance_boot_disk_41

	Can_ip_forward *bool

	Cpu_platform *string

	Create_timeout *int

	Deletion_protection *bool

	Description *string

	Disk *[]Google_compute_instance_disk_43

	Guest_accelerator *[]Google_compute_instance_guest_accelerator_44

	Instance_id *string

	Label_fingerprint *string

	Labels *map[string]string

	Machine_type string

	Metadata *map[string]string

	Metadata_fingerprint *string

	Metadata_startup_script *string

	Min_cpu_platform *string

	Name string

	Network *[]Google_compute_instance_network_45

	Network_interface []Google_compute_instance_network_interface_46

	Project *string

	Scheduling *[]Google_compute_instance_scheduling_49

	Scratch_disk *[]Google_compute_instance_scratch_disk_50

	Self_link *string

	Service_account *[]Google_compute_instance_service_account_51

	Tags *[]string

	Tags_fingerprint *string

	Zone *string
}

var Google_compute_instance_rtb = func(rtb service.ResourceTypeBuilder) {
	rtb.ProvidedAttributes(
		"google_compute_instance_id",

		"allow_stopping_for_update",

		"attached_disk",

		"can_ip_forward",

		"cpu_platform",

		"create_timeout",

		"deletion_protection",

		"description",

		"disk",

		"guest_accelerator",

		"instance_id",

		"label_fingerprint",

		"labels",

		"metadata",

		"metadata_fingerprint",

		"metadata_startup_script",

		"min_cpu_platform",

		"network",

		"project",

		"scheduling",

		"scratch_disk",

		"self_link",

		"service_account",

		"tags",

		"tags_fingerprint",

		"zone",
	)
	rtb.ImmutableAttributes(

		"boot_disk",

		"can_ip_forward",

		"description",

		"disk",

		"guest_accelerator",

		"metadata_startup_script",

		"name",

		"network",

		"network_interface",

		"project",

		"scratch_disk",

		"zone",
	)
}

// Google_compute_instanceHandler ...
type Google_compute_instanceHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_compute_instanceHandler) Create(desired *Google_compute_instance) (*Google_compute_instance, string, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Create Google_compute_instance", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_compute_instance", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Update ...
func (h *Google_compute_instanceHandler) Update(externalID string, desired *Google_compute_instance) (*Google_compute_instance, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Update Google_compute_instance", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	actual, err := bridge.Update(h.provider, "google_compute_instance", externalID, rc)
	if err != nil {
		return nil, err
	}
	x := &Google_compute_instance{Google_compute_instance_id: &externalID}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Update Actual State Google_compute_instance", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Read ...
func (h *Google_compute_instanceHandler) Read(externalID string) (*Google_compute_instance, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Read Google_compute_instance", "externalID", externalID)
	}
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_compute_instance", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_compute_instance{Google_compute_instance_id: &id}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Read Actual State Google_compute_instance", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Delete ...
func (h *Google_compute_instanceHandler) Delete(externalID string) error {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Delete Google_compute_instance", "externalID", externalID)
	}
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_compute_instance", externalID)
}

type Google_compute_instance_from_template_attached_disk_52 struct {
	Device_name *string

	Disk_encryption_key_raw *string

	Disk_encryption_key_sha256 *string

	Mode *string

	Source string
}

type Google_compute_instance_from_template_boot_disk_53_initialize_params_54 struct {
	Image *string

	Size *int

	Type *string
}

type Google_compute_instance_from_template_boot_disk_53 struct {
	Auto_delete *bool

	Device_name *string

	Disk_encryption_key_raw *string

	Disk_encryption_key_sha256 *string

	Initialize_params *[]Google_compute_instance_from_template_boot_disk_53_initialize_params_54

	Source *string
}

type Google_compute_instance_from_template_guest_accelerator_55 struct {
	Count int

	Type string
}

type Google_compute_instance_from_template_network_interface_56_access_config_57 struct {
	Assigned_nat_ip *string

	Nat_ip *string

	Network_tier *string

	Public_ptr_domain_name *string
}

type Google_compute_instance_from_template_network_interface_56_alias_ip_range_58 struct {
	Ip_cidr_range string

	Subnetwork_range_name *string
}

type Google_compute_instance_from_template_network_interface_56 struct {
	Access_config *[]Google_compute_instance_from_template_network_interface_56_access_config_57

	Address *string

	Alias_ip_range *[]Google_compute_instance_from_template_network_interface_56_alias_ip_range_58

	Name *string

	Network *string

	Network_ip *string

	Subnetwork *string

	Subnetwork_project *string
}

type Google_compute_instance_from_template_scheduling_59 struct {
	Automatic_restart *bool

	On_host_maintenance *string

	Preemptible *bool
}

type Google_compute_instance_from_template_scratch_disk_60 struct {
	Interface *string
}

type Google_compute_instance_from_template_service_account_61 struct {
	Email *string

	Scopes []string
}

type Google_compute_instance_from_template struct {
	Google_compute_instance_from_template_id *string `lyra:"ignore"`

	Allow_stopping_for_update *bool

	Attached_disk *[]Google_compute_instance_from_template_attached_disk_52

	Boot_disk *[]Google_compute_instance_from_template_boot_disk_53

	Can_ip_forward *bool

	Cpu_platform *string

	Deletion_protection *bool

	Description *string

	Guest_accelerator *[]Google_compute_instance_from_template_guest_accelerator_55

	Instance_id *string

	Label_fingerprint *string

	Labels *map[string]string

	Machine_type *string

	Metadata *map[string]string

	Metadata_fingerprint *string

	Metadata_startup_script *string

	Min_cpu_platform *string

	Name string

	Network_interface *[]Google_compute_instance_from_template_network_interface_56

	Project *string

	Scheduling *[]Google_compute_instance_from_template_scheduling_59

	Scratch_disk *[]Google_compute_instance_from_template_scratch_disk_60

	Self_link *string

	Service_account *[]Google_compute_instance_from_template_service_account_61

	Source_instance_template string

	Tags *[]string

	Tags_fingerprint *string

	Zone *string
}

var Google_compute_instance_from_template_rtb = func(rtb service.ResourceTypeBuilder) {
	rtb.ProvidedAttributes(
		"google_compute_instance_from_template_id",

		"allow_stopping_for_update",

		"attached_disk",

		"boot_disk",

		"can_ip_forward",

		"cpu_platform",

		"deletion_protection",

		"description",

		"guest_accelerator",

		"instance_id",

		"label_fingerprint",

		"labels",

		"machine_type",

		"metadata",

		"metadata_fingerprint",

		"metadata_startup_script",

		"min_cpu_platform",

		"network_interface",

		"project",

		"scheduling",

		"scratch_disk",

		"self_link",

		"service_account",

		"tags",

		"tags_fingerprint",

		"zone",
	)
	rtb.ImmutableAttributes(

		"boot_disk",

		"can_ip_forward",

		"description",

		"guest_accelerator",

		"metadata_startup_script",

		"name",

		"network_interface",

		"project",

		"scratch_disk",

		"source_instance_template",

		"zone",
	)
}

// Google_compute_instance_from_templateHandler ...
type Google_compute_instance_from_templateHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_compute_instance_from_templateHandler) Create(desired *Google_compute_instance_from_template) (*Google_compute_instance_from_template, string, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Create Google_compute_instance_from_template", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_compute_instance_from_template", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Update ...
func (h *Google_compute_instance_from_templateHandler) Update(externalID string, desired *Google_compute_instance_from_template) (*Google_compute_instance_from_template, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Update Google_compute_instance_from_template", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	actual, err := bridge.Update(h.provider, "google_compute_instance_from_template", externalID, rc)
	if err != nil {
		return nil, err
	}
	x := &Google_compute_instance_from_template{Google_compute_instance_from_template_id: &externalID}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Update Actual State Google_compute_instance_from_template", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Read ...
func (h *Google_compute_instance_from_templateHandler) Read(externalID string) (*Google_compute_instance_from_template, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Read Google_compute_instance_from_template", "externalID", externalID)
	}
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_compute_instance_from_template", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_compute_instance_from_template{Google_compute_instance_from_template_id: &id}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Read Actual State Google_compute_instance_from_template", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Delete ...
func (h *Google_compute_instance_from_templateHandler) Delete(externalID string) error {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Delete Google_compute_instance_from_template", "externalID", externalID)
	}
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_compute_instance_from_template", externalID)
}

type Google_compute_instance_group_named_port_62 struct {
	Name string

	Port int
}

type Google_compute_instance_group struct {
	Google_compute_instance_group_id *string `lyra:"ignore"`

	Description *string

	Instances *[]string

	Name string

	Named_port *[]Google_compute_instance_group_named_port_62

	Network *string

	Project *string

	Self_link *string

	Size *int

	Zone *string
}

var Google_compute_instance_group_rtb = func(rtb service.ResourceTypeBuilder) {
	rtb.ProvidedAttributes(
		"google_compute_instance_group_id",

		"description",

		"instances",

		"named_port",

		"network",

		"project",

		"self_link",

		"size",

		"zone",
	)
	rtb.ImmutableAttributes(

		"description",

		"name",

		"network",

		"project",

		"zone",
	)
}

// Google_compute_instance_groupHandler ...
type Google_compute_instance_groupHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_compute_instance_groupHandler) Create(desired *Google_compute_instance_group) (*Google_compute_instance_group, string, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Create Google_compute_instance_group", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_compute_instance_group", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Update ...
func (h *Google_compute_instance_groupHandler) Update(externalID string, desired *Google_compute_instance_group) (*Google_compute_instance_group, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Update Google_compute_instance_group", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	actual, err := bridge.Update(h.provider, "google_compute_instance_group", externalID, rc)
	if err != nil {
		return nil, err
	}
	x := &Google_compute_instance_group{Google_compute_instance_group_id: &externalID}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Update Actual State Google_compute_instance_group", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Read ...
func (h *Google_compute_instance_groupHandler) Read(externalID string) (*Google_compute_instance_group, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Read Google_compute_instance_group", "externalID", externalID)
	}
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_compute_instance_group", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_compute_instance_group{Google_compute_instance_group_id: &id}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Read Actual State Google_compute_instance_group", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Delete ...
func (h *Google_compute_instance_groupHandler) Delete(externalID string) error {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Delete Google_compute_instance_group", "externalID", externalID)
	}
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_compute_instance_group", externalID)
}

type Google_compute_instance_group_manager_auto_healing_policies_63 struct {
	Health_check string

	Initial_delay_sec int
}

type Google_compute_instance_group_manager_named_port_64 struct {
	Name string

	Port int
}

type Google_compute_instance_group_manager_rolling_update_policy_65 struct {
	Max_surge_fixed *int

	Max_surge_percent *int

	Max_unavailable_fixed *int

	Max_unavailable_percent *int

	Min_ready_sec *int

	Minimal_action string

	Type string
}

type Google_compute_instance_group_manager_version_66_target_size_67 struct {
	Fixed *int

	Percent *int
}

type Google_compute_instance_group_manager_version_66 struct {
	Instance_template string

	Name string

	Target_size *[]Google_compute_instance_group_manager_version_66_target_size_67
}

type Google_compute_instance_group_manager struct {
	Google_compute_instance_group_manager_id *string `lyra:"ignore"`

	Auto_healing_policies *[]Google_compute_instance_group_manager_auto_healing_policies_63

	Base_instance_name string

	Description *string

	Fingerprint *string

	Instance_group *string

	Instance_template *string

	Name string

	Named_port *[]Google_compute_instance_group_manager_named_port_64

	Project *string

	Rolling_update_policy *[]Google_compute_instance_group_manager_rolling_update_policy_65

	Self_link *string

	Target_pools *[]string

	Target_size *int

	Update_strategy *string

	Version *[]Google_compute_instance_group_manager_version_66

	Wait_for_instances *bool

	Zone *string
}

var Google_compute_instance_group_manager_rtb = func(rtb service.ResourceTypeBuilder) {
	rtb.ProvidedAttributes(
		"google_compute_instance_group_manager_id",

		"auto_healing_policies",

		"description",

		"fingerprint",

		"instance_group",

		"instance_template",

		"named_port",

		"project",

		"rolling_update_policy",

		"self_link",

		"target_pools",

		"target_size",

		"update_strategy",

		"version",

		"wait_for_instances",

		"zone",
	)
	rtb.ImmutableAttributes(

		"base_instance_name",

		"description",

		"name",

		"project",

		"zone",
	)
}

// Google_compute_instance_group_managerHandler ...
type Google_compute_instance_group_managerHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_compute_instance_group_managerHandler) Create(desired *Google_compute_instance_group_manager) (*Google_compute_instance_group_manager, string, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Create Google_compute_instance_group_manager", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_compute_instance_group_manager", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Update ...
func (h *Google_compute_instance_group_managerHandler) Update(externalID string, desired *Google_compute_instance_group_manager) (*Google_compute_instance_group_manager, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Update Google_compute_instance_group_manager", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	actual, err := bridge.Update(h.provider, "google_compute_instance_group_manager", externalID, rc)
	if err != nil {
		return nil, err
	}
	x := &Google_compute_instance_group_manager{Google_compute_instance_group_manager_id: &externalID}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Update Actual State Google_compute_instance_group_manager", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Read ...
func (h *Google_compute_instance_group_managerHandler) Read(externalID string) (*Google_compute_instance_group_manager, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Read Google_compute_instance_group_manager", "externalID", externalID)
	}
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_compute_instance_group_manager", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_compute_instance_group_manager{Google_compute_instance_group_manager_id: &id}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Read Actual State Google_compute_instance_group_manager", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Delete ...
func (h *Google_compute_instance_group_managerHandler) Delete(externalID string) error {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Delete Google_compute_instance_group_manager", "externalID", externalID)
	}
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_compute_instance_group_manager", externalID)
}

type Google_compute_instance_template_disk_68_disk_encryption_key_69 struct {
	Kms_key_self_link *string
}

type Google_compute_instance_template_disk_68 struct {
	Auto_delete *bool

	Boot *bool

	Device_name *string

	Disk_encryption_key *[]Google_compute_instance_template_disk_68_disk_encryption_key_69

	Disk_name *string

	Disk_size_gb *int

	Disk_type *string

	Interface *string

	Mode *string

	Source *string

	Source_image *string

	Type *string
}

type Google_compute_instance_template_guest_accelerator_70 struct {
	Count int

	Type string
}

type Google_compute_instance_template_network_interface_71_access_config_72 struct {
	Assigned_nat_ip *string

	Nat_ip *string

	Network_tier *string
}

type Google_compute_instance_template_network_interface_71_alias_ip_range_73 struct {
	Ip_cidr_range string

	Subnetwork_range_name *string
}

type Google_compute_instance_template_network_interface_71 struct {
	Access_config *[]Google_compute_instance_template_network_interface_71_access_config_72

	Address *string

	Alias_ip_range *[]Google_compute_instance_template_network_interface_71_alias_ip_range_73

	Network *string

	Network_ip *string

	Subnetwork *string

	Subnetwork_project *string
}

type Google_compute_instance_template_scheduling_74 struct {
	Automatic_restart *bool

	On_host_maintenance *string

	Preemptible *bool
}

type Google_compute_instance_template_service_account_75 struct {
	Email *string

	Scopes []string
}

type Google_compute_instance_template struct {
	Google_compute_instance_template_id *string `lyra:"ignore"`

	Automatic_restart *bool

	Can_ip_forward *bool

	Description *string

	Disk []Google_compute_instance_template_disk_68

	Guest_accelerator *[]Google_compute_instance_template_guest_accelerator_70

	Instance_description *string

	Labels *map[string]string

	Machine_type string

	Metadata *map[string]string

	Metadata_fingerprint *string

	Metadata_startup_script *string

	Min_cpu_platform *string

	Name *string

	Name_prefix *string

	Network_interface *[]Google_compute_instance_template_network_interface_71

	On_host_maintenance *string

	Project *string

	Region *string

	Scheduling *[]Google_compute_instance_template_scheduling_74

	Self_link *string

	Service_account *[]Google_compute_instance_template_service_account_75

	Tags *[]string

	Tags_fingerprint *string
}

var Google_compute_instance_template_rtb = func(rtb service.ResourceTypeBuilder) {
	rtb.ProvidedAttributes(
		"google_compute_instance_template_id",

		"automatic_restart",

		"can_ip_forward",

		"description",

		"guest_accelerator",

		"instance_description",

		"labels",

		"metadata",

		"metadata_fingerprint",

		"metadata_startup_script",

		"min_cpu_platform",

		"name",

		"name_prefix",

		"network_interface",

		"on_host_maintenance",

		"project",

		"region",

		"scheduling",

		"self_link",

		"service_account",

		"tags",

		"tags_fingerprint",
	)
	rtb.ImmutableAttributes(

		"automatic_restart",

		"can_ip_forward",

		"description",

		"disk",

		"guest_accelerator",

		"instance_description",

		"labels",

		"machine_type",

		"metadata",

		"metadata_startup_script",

		"min_cpu_platform",

		"name",

		"name_prefix",

		"network_interface",

		"on_host_maintenance",

		"project",

		"region",

		"scheduling",

		"service_account",

		"tags",
	)
}

// Google_compute_instance_templateHandler ...
type Google_compute_instance_templateHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_compute_instance_templateHandler) Create(desired *Google_compute_instance_template) (*Google_compute_instance_template, string, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Create Google_compute_instance_template", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_compute_instance_template", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Update ...
func (h *Google_compute_instance_templateHandler) Update(externalID string, desired *Google_compute_instance_template) (*Google_compute_instance_template, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Update Google_compute_instance_template", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	actual, err := bridge.Update(h.provider, "google_compute_instance_template", externalID, rc)
	if err != nil {
		return nil, err
	}
	x := &Google_compute_instance_template{Google_compute_instance_template_id: &externalID}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Update Actual State Google_compute_instance_template", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Read ...
func (h *Google_compute_instance_templateHandler) Read(externalID string) (*Google_compute_instance_template, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Read Google_compute_instance_template", "externalID", externalID)
	}
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_compute_instance_template", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_compute_instance_template{Google_compute_instance_template_id: &id}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Read Actual State Google_compute_instance_template", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Delete ...
func (h *Google_compute_instance_templateHandler) Delete(externalID string) error {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Delete Google_compute_instance_template", "externalID", externalID)
	}
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_compute_instance_template", externalID)
}

type Google_compute_interconnect_attachment_private_interconnect_info_76 struct {
	Tag8021q *int
}

type Google_compute_interconnect_attachment struct {
	Google_compute_interconnect_attachment_id *string `lyra:"ignore"`

	Cloud_router_ip_address *string

	Creation_timestamp *string

	Customer_router_ip_address *string

	Description *string

	Google_reference_id *string

	Interconnect string

	Name string

	Private_interconnect_info *[]Google_compute_interconnect_attachment_private_interconnect_info_76

	Project *string

	Region *string

	Router string

	Self_link *string
}

var Google_compute_interconnect_attachment_rtb = func(rtb service.ResourceTypeBuilder) {
	rtb.ProvidedAttributes(
		"google_compute_interconnect_attachment_id",

		"cloud_router_ip_address",

		"creation_timestamp",

		"customer_router_ip_address",

		"description",

		"google_reference_id",

		"private_interconnect_info",

		"project",

		"region",

		"self_link",
	)
	rtb.ImmutableAttributes(

		"description",

		"interconnect",

		"name",

		"project",

		"region",

		"router",
	)
}

// Google_compute_interconnect_attachmentHandler ...
type Google_compute_interconnect_attachmentHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_compute_interconnect_attachmentHandler) Create(desired *Google_compute_interconnect_attachment) (*Google_compute_interconnect_attachment, string, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Create Google_compute_interconnect_attachment", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_compute_interconnect_attachment", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Update ...
func (h *Google_compute_interconnect_attachmentHandler) Update(externalID string, desired *Google_compute_interconnect_attachment) (*Google_compute_interconnect_attachment, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Update Google_compute_interconnect_attachment", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	actual, err := bridge.Update(h.provider, "google_compute_interconnect_attachment", externalID, rc)
	if err != nil {
		return nil, err
	}
	x := &Google_compute_interconnect_attachment{Google_compute_interconnect_attachment_id: &externalID}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Update Actual State Google_compute_interconnect_attachment", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Read ...
func (h *Google_compute_interconnect_attachmentHandler) Read(externalID string) (*Google_compute_interconnect_attachment, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Read Google_compute_interconnect_attachment", "externalID", externalID)
	}
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_compute_interconnect_attachment", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_compute_interconnect_attachment{Google_compute_interconnect_attachment_id: &id}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Read Actual State Google_compute_interconnect_attachment", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Delete ...
func (h *Google_compute_interconnect_attachmentHandler) Delete(externalID string) error {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Delete Google_compute_interconnect_attachment", "externalID", externalID)
	}
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_compute_interconnect_attachment", externalID)
}

type Google_compute_network struct {
	Google_compute_network_id *string `lyra:"ignore"`

	Auto_create_subnetworks *bool

	Description *string

	Gateway_ipv4 *string

	Ipv4_range *string

	Name string

	Project *string

	Routing_mode *string

	Self_link *string
}

var Google_compute_network_rtb = func(rtb service.ResourceTypeBuilder) {
	rtb.ProvidedAttributes(
		"google_compute_network_id",

		"auto_create_subnetworks",

		"description",

		"gateway_ipv4",

		"ipv4_range",

		"project",

		"routing_mode",

		"self_link",
	)
	rtb.ImmutableAttributes(

		"auto_create_subnetworks",

		"description",

		"ipv4_range",

		"name",

		"project",
	)
}

// Google_compute_networkHandler ...
type Google_compute_networkHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_compute_networkHandler) Create(desired *Google_compute_network) (*Google_compute_network, string, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Create Google_compute_network", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_compute_network", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Update ...
func (h *Google_compute_networkHandler) Update(externalID string, desired *Google_compute_network) (*Google_compute_network, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Update Google_compute_network", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	actual, err := bridge.Update(h.provider, "google_compute_network", externalID, rc)
	if err != nil {
		return nil, err
	}
	x := &Google_compute_network{Google_compute_network_id: &externalID}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Update Actual State Google_compute_network", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Read ...
func (h *Google_compute_networkHandler) Read(externalID string) (*Google_compute_network, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Read Google_compute_network", "externalID", externalID)
	}
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_compute_network", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_compute_network{Google_compute_network_id: &id}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Read Actual State Google_compute_network", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Delete ...
func (h *Google_compute_networkHandler) Delete(externalID string) error {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Delete Google_compute_network", "externalID", externalID)
	}
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_compute_network", externalID)
}

type Google_compute_network_peering struct {
	Google_compute_network_peering_id *string `lyra:"ignore"`

	Auto_create_routes *bool

	Name string

	Network string

	Peer_network string

	State *string

	State_details *string
}

var Google_compute_network_peering_rtb = func(rtb service.ResourceTypeBuilder) {
	rtb.ProvidedAttributes(
		"google_compute_network_peering_id",

		"auto_create_routes",

		"state",

		"state_details",
	)
	rtb.ImmutableAttributes(

		"auto_create_routes",

		"name",

		"network",

		"peer_network",
	)
}

// Google_compute_network_peeringHandler ...
type Google_compute_network_peeringHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_compute_network_peeringHandler) Create(desired *Google_compute_network_peering) (*Google_compute_network_peering, string, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Create Google_compute_network_peering", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_compute_network_peering", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Update ...
func (h *Google_compute_network_peeringHandler) Update(externalID string, desired *Google_compute_network_peering) (*Google_compute_network_peering, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Update Google_compute_network_peering", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	actual, err := bridge.Update(h.provider, "google_compute_network_peering", externalID, rc)
	if err != nil {
		return nil, err
	}
	x := &Google_compute_network_peering{Google_compute_network_peering_id: &externalID}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Update Actual State Google_compute_network_peering", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Read ...
func (h *Google_compute_network_peeringHandler) Read(externalID string) (*Google_compute_network_peering, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Read Google_compute_network_peering", "externalID", externalID)
	}
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_compute_network_peering", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_compute_network_peering{Google_compute_network_peering_id: &id}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Read Actual State Google_compute_network_peering", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Delete ...
func (h *Google_compute_network_peeringHandler) Delete(externalID string) error {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Delete Google_compute_network_peering", "externalID", externalID)
	}
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_compute_network_peering", externalID)
}

type Google_compute_project_metadata struct {
	Google_compute_project_metadata_id *string `lyra:"ignore"`

	Metadata map[string]string

	Project *string
}

var Google_compute_project_metadata_rtb = func(rtb service.ResourceTypeBuilder) {
	rtb.ProvidedAttributes(
		"google_compute_project_metadata_id",

		"project",
	)
	rtb.ImmutableAttributes(

		"project",
	)
}

// Google_compute_project_metadataHandler ...
type Google_compute_project_metadataHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_compute_project_metadataHandler) Create(desired *Google_compute_project_metadata) (*Google_compute_project_metadata, string, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Create Google_compute_project_metadata", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_compute_project_metadata", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Update ...
func (h *Google_compute_project_metadataHandler) Update(externalID string, desired *Google_compute_project_metadata) (*Google_compute_project_metadata, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Update Google_compute_project_metadata", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	actual, err := bridge.Update(h.provider, "google_compute_project_metadata", externalID, rc)
	if err != nil {
		return nil, err
	}
	x := &Google_compute_project_metadata{Google_compute_project_metadata_id: &externalID}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Update Actual State Google_compute_project_metadata", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Read ...
func (h *Google_compute_project_metadataHandler) Read(externalID string) (*Google_compute_project_metadata, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Read Google_compute_project_metadata", "externalID", externalID)
	}
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_compute_project_metadata", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_compute_project_metadata{Google_compute_project_metadata_id: &id}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Read Actual State Google_compute_project_metadata", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Delete ...
func (h *Google_compute_project_metadataHandler) Delete(externalID string) error {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Delete Google_compute_project_metadata", "externalID", externalID)
	}
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_compute_project_metadata", externalID)
}

type Google_compute_project_metadata_item struct {
	Google_compute_project_metadata_item_id *string `lyra:"ignore"`

	Key string

	Project *string

	Value string
}

var Google_compute_project_metadata_item_rtb = func(rtb service.ResourceTypeBuilder) {
	rtb.ProvidedAttributes(
		"google_compute_project_metadata_item_id",

		"project",
	)
	rtb.ImmutableAttributes(

		"key",

		"project",
	)
}

// Google_compute_project_metadata_itemHandler ...
type Google_compute_project_metadata_itemHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_compute_project_metadata_itemHandler) Create(desired *Google_compute_project_metadata_item) (*Google_compute_project_metadata_item, string, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Create Google_compute_project_metadata_item", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_compute_project_metadata_item", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Update ...
func (h *Google_compute_project_metadata_itemHandler) Update(externalID string, desired *Google_compute_project_metadata_item) (*Google_compute_project_metadata_item, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Update Google_compute_project_metadata_item", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	actual, err := bridge.Update(h.provider, "google_compute_project_metadata_item", externalID, rc)
	if err != nil {
		return nil, err
	}
	x := &Google_compute_project_metadata_item{Google_compute_project_metadata_item_id: &externalID}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Update Actual State Google_compute_project_metadata_item", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Read ...
func (h *Google_compute_project_metadata_itemHandler) Read(externalID string) (*Google_compute_project_metadata_item, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Read Google_compute_project_metadata_item", "externalID", externalID)
	}
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_compute_project_metadata_item", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_compute_project_metadata_item{Google_compute_project_metadata_item_id: &id}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Read Actual State Google_compute_project_metadata_item", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Delete ...
func (h *Google_compute_project_metadata_itemHandler) Delete(externalID string) error {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Delete Google_compute_project_metadata_item", "externalID", externalID)
	}
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_compute_project_metadata_item", externalID)
}

type Google_compute_region_autoscaler_autoscaling_policy_77_cpu_utilization_78 struct {
	Target float64
}

type Google_compute_region_autoscaler_autoscaling_policy_77_load_balancing_utilization_79 struct {
	Target float64
}

type Google_compute_region_autoscaler_autoscaling_policy_77_metric_80 struct {
	Name string

	Target float64

	Type string
}

type Google_compute_region_autoscaler_autoscaling_policy_77 struct {
	Cooldown_period *int

	Cpu_utilization *[]Google_compute_region_autoscaler_autoscaling_policy_77_cpu_utilization_78

	Load_balancing_utilization *[]Google_compute_region_autoscaler_autoscaling_policy_77_load_balancing_utilization_79

	Max_replicas int

	Metric *[]Google_compute_region_autoscaler_autoscaling_policy_77_metric_80

	Min_replicas int
}

type Google_compute_region_autoscaler struct {
	Google_compute_region_autoscaler_id *string `lyra:"ignore"`

	Autoscaling_policy []Google_compute_region_autoscaler_autoscaling_policy_77

	Creation_timestamp *string

	Description *string

	Name string

	Project *string

	Region *string

	Self_link *string

	Target string
}

var Google_compute_region_autoscaler_rtb = func(rtb service.ResourceTypeBuilder) {
	rtb.ProvidedAttributes(
		"google_compute_region_autoscaler_id",

		"creation_timestamp",

		"description",

		"project",

		"region",

		"self_link",
	)
	rtb.ImmutableAttributes(

		"name",

		"project",

		"region",
	)
}

// Google_compute_region_autoscalerHandler ...
type Google_compute_region_autoscalerHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_compute_region_autoscalerHandler) Create(desired *Google_compute_region_autoscaler) (*Google_compute_region_autoscaler, string, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Create Google_compute_region_autoscaler", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_compute_region_autoscaler", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Update ...
func (h *Google_compute_region_autoscalerHandler) Update(externalID string, desired *Google_compute_region_autoscaler) (*Google_compute_region_autoscaler, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Update Google_compute_region_autoscaler", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	actual, err := bridge.Update(h.provider, "google_compute_region_autoscaler", externalID, rc)
	if err != nil {
		return nil, err
	}
	x := &Google_compute_region_autoscaler{Google_compute_region_autoscaler_id: &externalID}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Update Actual State Google_compute_region_autoscaler", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Read ...
func (h *Google_compute_region_autoscalerHandler) Read(externalID string) (*Google_compute_region_autoscaler, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Read Google_compute_region_autoscaler", "externalID", externalID)
	}
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_compute_region_autoscaler", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_compute_region_autoscaler{Google_compute_region_autoscaler_id: &id}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Read Actual State Google_compute_region_autoscaler", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Delete ...
func (h *Google_compute_region_autoscalerHandler) Delete(externalID string) error {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Delete Google_compute_region_autoscaler", "externalID", externalID)
	}
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_compute_region_autoscaler", externalID)
}

type Google_compute_region_backend_service_backend_81 struct {
	Description *string

	Group *string
}

type Google_compute_region_backend_service struct {
	Google_compute_region_backend_service_id *string `lyra:"ignore"`

	Backend *[]Google_compute_region_backend_service_backend_81

	Connection_draining_timeout_sec *int

	Description *string

	Fingerprint *string

	Health_checks []string

	Name string

	Project *string

	Protocol *string

	Region *string

	Self_link *string

	Session_affinity *string

	Timeout_sec *int
}

var Google_compute_region_backend_service_rtb = func(rtb service.ResourceTypeBuilder) {
	rtb.ProvidedAttributes(
		"google_compute_region_backend_service_id",

		"backend",

		"connection_draining_timeout_sec",

		"description",

		"fingerprint",

		"project",

		"protocol",

		"region",

		"self_link",

		"session_affinity",

		"timeout_sec",
	)
	rtb.ImmutableAttributes(

		"name",

		"project",

		"region",
	)
}

// Google_compute_region_backend_serviceHandler ...
type Google_compute_region_backend_serviceHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_compute_region_backend_serviceHandler) Create(desired *Google_compute_region_backend_service) (*Google_compute_region_backend_service, string, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Create Google_compute_region_backend_service", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_compute_region_backend_service", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Update ...
func (h *Google_compute_region_backend_serviceHandler) Update(externalID string, desired *Google_compute_region_backend_service) (*Google_compute_region_backend_service, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Update Google_compute_region_backend_service", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	actual, err := bridge.Update(h.provider, "google_compute_region_backend_service", externalID, rc)
	if err != nil {
		return nil, err
	}
	x := &Google_compute_region_backend_service{Google_compute_region_backend_service_id: &externalID}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Update Actual State Google_compute_region_backend_service", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Read ...
func (h *Google_compute_region_backend_serviceHandler) Read(externalID string) (*Google_compute_region_backend_service, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Read Google_compute_region_backend_service", "externalID", externalID)
	}
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_compute_region_backend_service", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_compute_region_backend_service{Google_compute_region_backend_service_id: &id}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Read Actual State Google_compute_region_backend_service", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Delete ...
func (h *Google_compute_region_backend_serviceHandler) Delete(externalID string) error {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Delete Google_compute_region_backend_service", "externalID", externalID)
	}
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_compute_region_backend_service", externalID)
}

type Google_compute_region_disk_disk_encryption_key_82 struct {
	Raw_key *string

	Sha256 *string
}

type Google_compute_region_disk_source_snapshot_encryption_key_83 struct {
	Raw_key *string

	Sha256 *string
}

type Google_compute_region_disk struct {
	Google_compute_region_disk_id *string `lyra:"ignore"`

	Creation_timestamp *string

	Description *string

	Disk_encryption_key *[]Google_compute_region_disk_disk_encryption_key_82

	Label_fingerprint *string

	Labels *map[string]string

	Last_attach_timestamp *string

	Last_detach_timestamp *string

	Name string

	Project *string

	Region *string

	Replica_zones []string

	Self_link *string

	Size *int

	Snapshot *string

	Source_snapshot_encryption_key *[]Google_compute_region_disk_source_snapshot_encryption_key_83

	Source_snapshot_id *string

	Type *string

	Users *[]string
}

var Google_compute_region_disk_rtb = func(rtb service.ResourceTypeBuilder) {
	rtb.ProvidedAttributes(
		"google_compute_region_disk_id",

		"creation_timestamp",

		"description",

		"disk_encryption_key",

		"label_fingerprint",

		"labels",

		"last_attach_timestamp",

		"last_detach_timestamp",

		"project",

		"region",

		"self_link",

		"size",

		"snapshot",

		"source_snapshot_encryption_key",

		"source_snapshot_id",

		"type",

		"users",
	)
	rtb.ImmutableAttributes(

		"description",

		"disk_encryption_key",

		"name",

		"project",

		"region",

		"replica_zones",

		"snapshot",

		"source_snapshot_encryption_key",

		"type",
	)
}

// Google_compute_region_diskHandler ...
type Google_compute_region_diskHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_compute_region_diskHandler) Create(desired *Google_compute_region_disk) (*Google_compute_region_disk, string, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Create Google_compute_region_disk", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_compute_region_disk", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Update ...
func (h *Google_compute_region_diskHandler) Update(externalID string, desired *Google_compute_region_disk) (*Google_compute_region_disk, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Update Google_compute_region_disk", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	actual, err := bridge.Update(h.provider, "google_compute_region_disk", externalID, rc)
	if err != nil {
		return nil, err
	}
	x := &Google_compute_region_disk{Google_compute_region_disk_id: &externalID}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Update Actual State Google_compute_region_disk", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Read ...
func (h *Google_compute_region_diskHandler) Read(externalID string) (*Google_compute_region_disk, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Read Google_compute_region_disk", "externalID", externalID)
	}
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_compute_region_disk", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_compute_region_disk{Google_compute_region_disk_id: &id}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Read Actual State Google_compute_region_disk", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Delete ...
func (h *Google_compute_region_diskHandler) Delete(externalID string) error {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Delete Google_compute_region_disk", "externalID", externalID)
	}
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_compute_region_disk", externalID)
}

type Google_compute_region_instance_group_manager_auto_healing_policies_84 struct {
	Health_check string

	Initial_delay_sec int
}

type Google_compute_region_instance_group_manager_named_port_85 struct {
	Name string

	Port int
}

type Google_compute_region_instance_group_manager_rolling_update_policy_86 struct {
	Max_surge_fixed *int

	Max_surge_percent *int

	Max_unavailable_fixed *int

	Max_unavailable_percent *int

	Min_ready_sec *int

	Minimal_action string

	Type string
}

type Google_compute_region_instance_group_manager_version_87_target_size_88 struct {
	Fixed *int

	Percent *int
}

type Google_compute_region_instance_group_manager_version_87 struct {
	Instance_template string

	Name string

	Target_size *[]Google_compute_region_instance_group_manager_version_87_target_size_88
}

type Google_compute_region_instance_group_manager struct {
	Google_compute_region_instance_group_manager_id *string `lyra:"ignore"`

	Auto_healing_policies *[]Google_compute_region_instance_group_manager_auto_healing_policies_84

	Base_instance_name string

	Description *string

	Distribution_policy_zones *[]string

	Fingerprint *string

	Instance_group *string

	Instance_template *string

	Name string

	Named_port *[]Google_compute_region_instance_group_manager_named_port_85

	Project *string

	Region string

	Rolling_update_policy *[]Google_compute_region_instance_group_manager_rolling_update_policy_86

	Self_link *string

	Target_pools *[]string

	Target_size *int

	Update_strategy *string

	Version *[]Google_compute_region_instance_group_manager_version_87

	Wait_for_instances *bool
}

var Google_compute_region_instance_group_manager_rtb = func(rtb service.ResourceTypeBuilder) {
	rtb.ProvidedAttributes(
		"google_compute_region_instance_group_manager_id",

		"auto_healing_policies",

		"description",

		"distribution_policy_zones",

		"fingerprint",

		"instance_group",

		"instance_template",

		"named_port",

		"project",

		"rolling_update_policy",

		"self_link",

		"target_pools",

		"target_size",

		"update_strategy",

		"version",

		"wait_for_instances",
	)
	rtb.ImmutableAttributes(

		"base_instance_name",

		"description",

		"distribution_policy_zones",

		"name",

		"project",

		"region",
	)
}

// Google_compute_region_instance_group_managerHandler ...
type Google_compute_region_instance_group_managerHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_compute_region_instance_group_managerHandler) Create(desired *Google_compute_region_instance_group_manager) (*Google_compute_region_instance_group_manager, string, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Create Google_compute_region_instance_group_manager", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_compute_region_instance_group_manager", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Update ...
func (h *Google_compute_region_instance_group_managerHandler) Update(externalID string, desired *Google_compute_region_instance_group_manager) (*Google_compute_region_instance_group_manager, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Update Google_compute_region_instance_group_manager", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	actual, err := bridge.Update(h.provider, "google_compute_region_instance_group_manager", externalID, rc)
	if err != nil {
		return nil, err
	}
	x := &Google_compute_region_instance_group_manager{Google_compute_region_instance_group_manager_id: &externalID}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Update Actual State Google_compute_region_instance_group_manager", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Read ...
func (h *Google_compute_region_instance_group_managerHandler) Read(externalID string) (*Google_compute_region_instance_group_manager, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Read Google_compute_region_instance_group_manager", "externalID", externalID)
	}
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_compute_region_instance_group_manager", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_compute_region_instance_group_manager{Google_compute_region_instance_group_manager_id: &id}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Read Actual State Google_compute_region_instance_group_manager", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Delete ...
func (h *Google_compute_region_instance_group_managerHandler) Delete(externalID string) error {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Delete Google_compute_region_instance_group_manager", "externalID", externalID)
	}
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_compute_region_instance_group_manager", externalID)
}

type Google_compute_route struct {
	Google_compute_route_id *string `lyra:"ignore"`

	Description *string

	Dest_range string

	Name string

	Network string

	Next_hop_gateway *string

	Next_hop_instance *string

	Next_hop_instance_zone *string

	Next_hop_ip *string

	Next_hop_network *string

	Next_hop_vpn_tunnel *string

	Priority *int

	Project *string

	Self_link *string

	Tags *[]string
}

var Google_compute_route_rtb = func(rtb service.ResourceTypeBuilder) {
	rtb.ProvidedAttributes(
		"google_compute_route_id",

		"description",

		"next_hop_gateway",

		"next_hop_instance",

		"next_hop_instance_zone",

		"next_hop_ip",

		"next_hop_network",

		"next_hop_vpn_tunnel",

		"priority",

		"project",

		"self_link",

		"tags",
	)
	rtb.ImmutableAttributes(

		"description",

		"dest_range",

		"name",

		"network",

		"next_hop_gateway",

		"next_hop_instance",

		"next_hop_instance_zone",

		"next_hop_ip",

		"next_hop_vpn_tunnel",

		"priority",

		"project",

		"tags",
	)
}

// Google_compute_routeHandler ...
type Google_compute_routeHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_compute_routeHandler) Create(desired *Google_compute_route) (*Google_compute_route, string, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Create Google_compute_route", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_compute_route", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Update ...
func (h *Google_compute_routeHandler) Update(externalID string, desired *Google_compute_route) (*Google_compute_route, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Update Google_compute_route", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	actual, err := bridge.Update(h.provider, "google_compute_route", externalID, rc)
	if err != nil {
		return nil, err
	}
	x := &Google_compute_route{Google_compute_route_id: &externalID}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Update Actual State Google_compute_route", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Read ...
func (h *Google_compute_routeHandler) Read(externalID string) (*Google_compute_route, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Read Google_compute_route", "externalID", externalID)
	}
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_compute_route", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_compute_route{Google_compute_route_id: &id}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Read Actual State Google_compute_route", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Delete ...
func (h *Google_compute_routeHandler) Delete(externalID string) error {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Delete Google_compute_route", "externalID", externalID)
	}
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_compute_route", externalID)
}

type Google_compute_router_bgp_89_advertised_ip_ranges_90 struct {
	Description *string

	Range *string
}

type Google_compute_router_bgp_89 struct {
	Advertise_mode *string

	Advertised_groups *[]string

	Advertised_ip_ranges *[]Google_compute_router_bgp_89_advertised_ip_ranges_90

	Asn int
}

type Google_compute_router struct {
	Google_compute_router_id *string `lyra:"ignore"`

	Bgp *[]Google_compute_router_bgp_89

	Creation_timestamp *string

	Description *string

	Name string

	Network string

	Project *string

	Region *string

	Self_link *string
}

var Google_compute_router_rtb = func(rtb service.ResourceTypeBuilder) {
	rtb.ProvidedAttributes(
		"google_compute_router_id",

		"bgp",

		"creation_timestamp",

		"description",

		"project",

		"region",

		"self_link",
	)
	rtb.ImmutableAttributes(

		"name",

		"network",

		"project",

		"region",
	)
}

// Google_compute_routerHandler ...
type Google_compute_routerHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_compute_routerHandler) Create(desired *Google_compute_router) (*Google_compute_router, string, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Create Google_compute_router", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_compute_router", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Update ...
func (h *Google_compute_routerHandler) Update(externalID string, desired *Google_compute_router) (*Google_compute_router, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Update Google_compute_router", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	actual, err := bridge.Update(h.provider, "google_compute_router", externalID, rc)
	if err != nil {
		return nil, err
	}
	x := &Google_compute_router{Google_compute_router_id: &externalID}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Update Actual State Google_compute_router", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Read ...
func (h *Google_compute_routerHandler) Read(externalID string) (*Google_compute_router, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Read Google_compute_router", "externalID", externalID)
	}
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_compute_router", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_compute_router{Google_compute_router_id: &id}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Read Actual State Google_compute_router", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Delete ...
func (h *Google_compute_routerHandler) Delete(externalID string) error {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Delete Google_compute_router", "externalID", externalID)
	}
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_compute_router", externalID)
}

type Google_compute_router_interface struct {
	Google_compute_router_interface_id *string `lyra:"ignore"`

	Ip_range *string

	Name string

	Project *string

	Region *string

	Router string

	Vpn_tunnel string
}

var Google_compute_router_interface_rtb = func(rtb service.ResourceTypeBuilder) {
	rtb.ProvidedAttributes(
		"google_compute_router_interface_id",

		"ip_range",

		"project",

		"region",
	)
	rtb.ImmutableAttributes(

		"ip_range",

		"name",

		"project",

		"region",

		"router",

		"vpn_tunnel",
	)
}

// Google_compute_router_interfaceHandler ...
type Google_compute_router_interfaceHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_compute_router_interfaceHandler) Create(desired *Google_compute_router_interface) (*Google_compute_router_interface, string, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Create Google_compute_router_interface", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_compute_router_interface", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Update ...
func (h *Google_compute_router_interfaceHandler) Update(externalID string, desired *Google_compute_router_interface) (*Google_compute_router_interface, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Update Google_compute_router_interface", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	actual, err := bridge.Update(h.provider, "google_compute_router_interface", externalID, rc)
	if err != nil {
		return nil, err
	}
	x := &Google_compute_router_interface{Google_compute_router_interface_id: &externalID}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Update Actual State Google_compute_router_interface", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Read ...
func (h *Google_compute_router_interfaceHandler) Read(externalID string) (*Google_compute_router_interface, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Read Google_compute_router_interface", "externalID", externalID)
	}
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_compute_router_interface", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_compute_router_interface{Google_compute_router_interface_id: &id}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Read Actual State Google_compute_router_interface", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Delete ...
func (h *Google_compute_router_interfaceHandler) Delete(externalID string) error {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Delete Google_compute_router_interface", "externalID", externalID)
	}
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_compute_router_interface", externalID)
}

type Google_compute_router_nat_subnetwork_91 struct {
	Name string

	Secondary_ip_range_names *[]string

	Source_ip_ranges_to_nat *[]string
}

type Google_compute_router_nat struct {
	Google_compute_router_nat_id *string `lyra:"ignore"`

	Icmp_idle_timeout_sec *int

	Min_ports_per_vm *int

	Name string

	Nat_ip_allocate_option string

	Nat_ips *[]string

	Project *string

	Region *string

	Router string

	Source_subnetwork_ip_ranges_to_nat *string

	Subnetwork *[]Google_compute_router_nat_subnetwork_91

	Tcp_established_idle_timeout_sec *int

	Tcp_transitory_idle_timeout_sec *int

	Udp_idle_timeout_sec *int
}

var Google_compute_router_nat_rtb = func(rtb service.ResourceTypeBuilder) {
	rtb.ProvidedAttributes(
		"google_compute_router_nat_id",

		"icmp_idle_timeout_sec",

		"min_ports_per_vm",

		"nat_ips",

		"project",

		"region",

		"source_subnetwork_ip_ranges_to_nat",

		"subnetwork",

		"tcp_established_idle_timeout_sec",

		"tcp_transitory_idle_timeout_sec",

		"udp_idle_timeout_sec",
	)
	rtb.ImmutableAttributes(

		"icmp_idle_timeout_sec",

		"min_ports_per_vm",

		"name",

		"nat_ip_allocate_option",

		"nat_ips",

		"project",

		"region",

		"router",

		"source_subnetwork_ip_ranges_to_nat",

		"subnetwork",

		"tcp_established_idle_timeout_sec",

		"tcp_transitory_idle_timeout_sec",

		"udp_idle_timeout_sec",
	)
}

// Google_compute_router_natHandler ...
type Google_compute_router_natHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_compute_router_natHandler) Create(desired *Google_compute_router_nat) (*Google_compute_router_nat, string, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Create Google_compute_router_nat", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_compute_router_nat", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Update ...
func (h *Google_compute_router_natHandler) Update(externalID string, desired *Google_compute_router_nat) (*Google_compute_router_nat, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Update Google_compute_router_nat", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	actual, err := bridge.Update(h.provider, "google_compute_router_nat", externalID, rc)
	if err != nil {
		return nil, err
	}
	x := &Google_compute_router_nat{Google_compute_router_nat_id: &externalID}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Update Actual State Google_compute_router_nat", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Read ...
func (h *Google_compute_router_natHandler) Read(externalID string) (*Google_compute_router_nat, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Read Google_compute_router_nat", "externalID", externalID)
	}
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_compute_router_nat", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_compute_router_nat{Google_compute_router_nat_id: &id}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Read Actual State Google_compute_router_nat", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Delete ...
func (h *Google_compute_router_natHandler) Delete(externalID string) error {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Delete Google_compute_router_nat", "externalID", externalID)
	}
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_compute_router_nat", externalID)
}

type Google_compute_router_peer struct {
	Google_compute_router_peer_id *string `lyra:"ignore"`

	Advertised_route_priority *int

	Interface string

	Ip_address *string

	Name string

	Peer_asn int

	Peer_ip_address *string

	Project *string

	Region *string

	Router string
}

var Google_compute_router_peer_rtb = func(rtb service.ResourceTypeBuilder) {
	rtb.ProvidedAttributes(
		"google_compute_router_peer_id",

		"advertised_route_priority",

		"ip_address",

		"peer_ip_address",

		"project",

		"region",
	)
	rtb.ImmutableAttributes(

		"advertised_route_priority",

		"interface",

		"name",

		"peer_asn",

		"peer_ip_address",

		"project",

		"region",

		"router",
	)
}

// Google_compute_router_peerHandler ...
type Google_compute_router_peerHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_compute_router_peerHandler) Create(desired *Google_compute_router_peer) (*Google_compute_router_peer, string, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Create Google_compute_router_peer", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_compute_router_peer", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Update ...
func (h *Google_compute_router_peerHandler) Update(externalID string, desired *Google_compute_router_peer) (*Google_compute_router_peer, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Update Google_compute_router_peer", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	actual, err := bridge.Update(h.provider, "google_compute_router_peer", externalID, rc)
	if err != nil {
		return nil, err
	}
	x := &Google_compute_router_peer{Google_compute_router_peer_id: &externalID}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Update Actual State Google_compute_router_peer", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Read ...
func (h *Google_compute_router_peerHandler) Read(externalID string) (*Google_compute_router_peer, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Read Google_compute_router_peer", "externalID", externalID)
	}
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_compute_router_peer", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_compute_router_peer{Google_compute_router_peer_id: &id}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Read Actual State Google_compute_router_peer", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Delete ...
func (h *Google_compute_router_peerHandler) Delete(externalID string) error {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Delete Google_compute_router_peer", "externalID", externalID)
	}
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_compute_router_peer", externalID)
}

type Google_compute_security_policy_rule_92_match_93_config_94 struct {
	Src_ip_ranges []string
}

type Google_compute_security_policy_rule_92_match_93 struct {
	Config []Google_compute_security_policy_rule_92_match_93_config_94

	Versioned_expr string
}

type Google_compute_security_policy_rule_92 struct {
	Action string

	Description *string

	Match []Google_compute_security_policy_rule_92_match_93

	Preview *bool

	Priority int
}

type Google_compute_security_policy struct {
	Google_compute_security_policy_id *string `lyra:"ignore"`

	Description *string

	Fingerprint *string

	Name string

	Project *string

	Rule *[]Google_compute_security_policy_rule_92

	Self_link *string
}

var Google_compute_security_policy_rtb = func(rtb service.ResourceTypeBuilder) {
	rtb.ProvidedAttributes(
		"google_compute_security_policy_id",

		"description",

		"fingerprint",

		"project",

		"rule",

		"self_link",
	)
	rtb.ImmutableAttributes(

		"name",

		"project",
	)
}

// Google_compute_security_policyHandler ...
type Google_compute_security_policyHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_compute_security_policyHandler) Create(desired *Google_compute_security_policy) (*Google_compute_security_policy, string, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Create Google_compute_security_policy", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_compute_security_policy", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Update ...
func (h *Google_compute_security_policyHandler) Update(externalID string, desired *Google_compute_security_policy) (*Google_compute_security_policy, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Update Google_compute_security_policy", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	actual, err := bridge.Update(h.provider, "google_compute_security_policy", externalID, rc)
	if err != nil {
		return nil, err
	}
	x := &Google_compute_security_policy{Google_compute_security_policy_id: &externalID}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Update Actual State Google_compute_security_policy", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Read ...
func (h *Google_compute_security_policyHandler) Read(externalID string) (*Google_compute_security_policy, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Read Google_compute_security_policy", "externalID", externalID)
	}
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_compute_security_policy", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_compute_security_policy{Google_compute_security_policy_id: &id}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Read Actual State Google_compute_security_policy", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Delete ...
func (h *Google_compute_security_policyHandler) Delete(externalID string) error {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Delete Google_compute_security_policy", "externalID", externalID)
	}
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_compute_security_policy", externalID)
}

type Google_compute_shared_vpc_host_project struct {
	Google_compute_shared_vpc_host_project_id *string `lyra:"ignore"`

	Project string
}

var Google_compute_shared_vpc_host_project_rtb = func(rtb service.ResourceTypeBuilder) {
	rtb.ProvidedAttributes(
		"google_compute_shared_vpc_host_project_id",
	)
	rtb.ImmutableAttributes(

		"project",
	)
}

// Google_compute_shared_vpc_host_projectHandler ...
type Google_compute_shared_vpc_host_projectHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_compute_shared_vpc_host_projectHandler) Create(desired *Google_compute_shared_vpc_host_project) (*Google_compute_shared_vpc_host_project, string, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Create Google_compute_shared_vpc_host_project", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_compute_shared_vpc_host_project", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Update ...
func (h *Google_compute_shared_vpc_host_projectHandler) Update(externalID string, desired *Google_compute_shared_vpc_host_project) (*Google_compute_shared_vpc_host_project, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Update Google_compute_shared_vpc_host_project", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	actual, err := bridge.Update(h.provider, "google_compute_shared_vpc_host_project", externalID, rc)
	if err != nil {
		return nil, err
	}
	x := &Google_compute_shared_vpc_host_project{Google_compute_shared_vpc_host_project_id: &externalID}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Update Actual State Google_compute_shared_vpc_host_project", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Read ...
func (h *Google_compute_shared_vpc_host_projectHandler) Read(externalID string) (*Google_compute_shared_vpc_host_project, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Read Google_compute_shared_vpc_host_project", "externalID", externalID)
	}
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_compute_shared_vpc_host_project", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_compute_shared_vpc_host_project{Google_compute_shared_vpc_host_project_id: &id}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Read Actual State Google_compute_shared_vpc_host_project", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Delete ...
func (h *Google_compute_shared_vpc_host_projectHandler) Delete(externalID string) error {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Delete Google_compute_shared_vpc_host_project", "externalID", externalID)
	}
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_compute_shared_vpc_host_project", externalID)
}

type Google_compute_shared_vpc_service_project struct {
	Google_compute_shared_vpc_service_project_id *string `lyra:"ignore"`

	Host_project string

	Service_project string
}

var Google_compute_shared_vpc_service_project_rtb = func(rtb service.ResourceTypeBuilder) {
	rtb.ProvidedAttributes(
		"google_compute_shared_vpc_service_project_id",
	)
	rtb.ImmutableAttributes(

		"host_project",

		"service_project",
	)
}

// Google_compute_shared_vpc_service_projectHandler ...
type Google_compute_shared_vpc_service_projectHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_compute_shared_vpc_service_projectHandler) Create(desired *Google_compute_shared_vpc_service_project) (*Google_compute_shared_vpc_service_project, string, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Create Google_compute_shared_vpc_service_project", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_compute_shared_vpc_service_project", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Update ...
func (h *Google_compute_shared_vpc_service_projectHandler) Update(externalID string, desired *Google_compute_shared_vpc_service_project) (*Google_compute_shared_vpc_service_project, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Update Google_compute_shared_vpc_service_project", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	actual, err := bridge.Update(h.provider, "google_compute_shared_vpc_service_project", externalID, rc)
	if err != nil {
		return nil, err
	}
	x := &Google_compute_shared_vpc_service_project{Google_compute_shared_vpc_service_project_id: &externalID}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Update Actual State Google_compute_shared_vpc_service_project", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Read ...
func (h *Google_compute_shared_vpc_service_projectHandler) Read(externalID string) (*Google_compute_shared_vpc_service_project, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Read Google_compute_shared_vpc_service_project", "externalID", externalID)
	}
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_compute_shared_vpc_service_project", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_compute_shared_vpc_service_project{Google_compute_shared_vpc_service_project_id: &id}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Read Actual State Google_compute_shared_vpc_service_project", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Delete ...
func (h *Google_compute_shared_vpc_service_projectHandler) Delete(externalID string) error {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Delete Google_compute_shared_vpc_service_project", "externalID", externalID)
	}
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_compute_shared_vpc_service_project", externalID)
}

type Google_compute_snapshot_snapshot_encryption_key_95 struct {
	Raw_key *string

	Sha256 *string
}

type Google_compute_snapshot_source_disk_encryption_key_96 struct {
	Raw_key *string
}

type Google_compute_snapshot struct {
	Google_compute_snapshot_id *string `lyra:"ignore"`

	Creation_timestamp *string

	Description *string

	Disk_size_gb *int

	Label_fingerprint *string

	Labels *map[string]string

	Licenses *[]string

	Name string

	Project *string

	Self_link *string

	Snapshot_encryption_key *[]Google_compute_snapshot_snapshot_encryption_key_95

	Snapshot_encryption_key_raw *string

	Snapshot_encryption_key_sha256 *string

	Snapshot_id *int

	Source_disk string

	Source_disk_encryption_key *[]Google_compute_snapshot_source_disk_encryption_key_96

	Source_disk_encryption_key_raw *string

	Source_disk_encryption_key_sha256 *string

	Source_disk_link *string

	Storage_bytes *int

	Zone *string
}

var Google_compute_snapshot_rtb = func(rtb service.ResourceTypeBuilder) {
	rtb.ProvidedAttributes(
		"google_compute_snapshot_id",

		"creation_timestamp",

		"description",

		"disk_size_gb",

		"label_fingerprint",

		"labels",

		"licenses",

		"project",

		"self_link",

		"snapshot_encryption_key",

		"snapshot_encryption_key_raw",

		"snapshot_encryption_key_sha256",

		"snapshot_id",

		"source_disk_encryption_key",

		"source_disk_encryption_key_raw",

		"source_disk_encryption_key_sha256",

		"source_disk_link",

		"storage_bytes",

		"zone",
	)
	rtb.ImmutableAttributes(

		"description",

		"name",

		"project",

		"source_disk",

		"zone",
	)
}

// Google_compute_snapshotHandler ...
type Google_compute_snapshotHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_compute_snapshotHandler) Create(desired *Google_compute_snapshot) (*Google_compute_snapshot, string, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Create Google_compute_snapshot", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_compute_snapshot", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Update ...
func (h *Google_compute_snapshotHandler) Update(externalID string, desired *Google_compute_snapshot) (*Google_compute_snapshot, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Update Google_compute_snapshot", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	actual, err := bridge.Update(h.provider, "google_compute_snapshot", externalID, rc)
	if err != nil {
		return nil, err
	}
	x := &Google_compute_snapshot{Google_compute_snapshot_id: &externalID}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Update Actual State Google_compute_snapshot", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Read ...
func (h *Google_compute_snapshotHandler) Read(externalID string) (*Google_compute_snapshot, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Read Google_compute_snapshot", "externalID", externalID)
	}
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_compute_snapshot", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_compute_snapshot{Google_compute_snapshot_id: &id}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Read Actual State Google_compute_snapshot", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Delete ...
func (h *Google_compute_snapshotHandler) Delete(externalID string) error {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Delete Google_compute_snapshot", "externalID", externalID)
	}
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_compute_snapshot", externalID)
}

type Google_compute_ssl_certificate struct {
	Google_compute_ssl_certificate_id *string `lyra:"ignore"`

	Certificate string

	Certificate_id *int

	Creation_timestamp *string

	Description *string

	Name *string

	Name_prefix *string

	Private_key string

	Project *string

	Self_link *string
}

var Google_compute_ssl_certificate_rtb = func(rtb service.ResourceTypeBuilder) {
	rtb.ProvidedAttributes(
		"google_compute_ssl_certificate_id",

		"certificate_id",

		"creation_timestamp",

		"description",

		"name",

		"name_prefix",

		"project",

		"self_link",
	)
	rtb.ImmutableAttributes(

		"certificate",

		"description",

		"name",

		"name_prefix",

		"private_key",

		"project",
	)
}

// Google_compute_ssl_certificateHandler ...
type Google_compute_ssl_certificateHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_compute_ssl_certificateHandler) Create(desired *Google_compute_ssl_certificate) (*Google_compute_ssl_certificate, string, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Create Google_compute_ssl_certificate", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_compute_ssl_certificate", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Update ...
func (h *Google_compute_ssl_certificateHandler) Update(externalID string, desired *Google_compute_ssl_certificate) (*Google_compute_ssl_certificate, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Update Google_compute_ssl_certificate", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	actual, err := bridge.Update(h.provider, "google_compute_ssl_certificate", externalID, rc)
	if err != nil {
		return nil, err
	}
	x := &Google_compute_ssl_certificate{Google_compute_ssl_certificate_id: &externalID}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Update Actual State Google_compute_ssl_certificate", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Read ...
func (h *Google_compute_ssl_certificateHandler) Read(externalID string) (*Google_compute_ssl_certificate, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Read Google_compute_ssl_certificate", "externalID", externalID)
	}
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_compute_ssl_certificate", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_compute_ssl_certificate{Google_compute_ssl_certificate_id: &id}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Read Actual State Google_compute_ssl_certificate", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Delete ...
func (h *Google_compute_ssl_certificateHandler) Delete(externalID string) error {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Delete Google_compute_ssl_certificate", "externalID", externalID)
	}
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_compute_ssl_certificate", externalID)
}

type Google_compute_ssl_policy struct {
	Google_compute_ssl_policy_id *string `lyra:"ignore"`

	Creation_timestamp *string

	Custom_features *[]string

	Description *string

	Enabled_features *[]string

	Fingerprint *string

	Min_tls_version *string

	Name string

	Profile *string

	Project *string

	Self_link *string
}

var Google_compute_ssl_policy_rtb = func(rtb service.ResourceTypeBuilder) {
	rtb.ProvidedAttributes(
		"google_compute_ssl_policy_id",

		"creation_timestamp",

		"custom_features",

		"description",

		"enabled_features",

		"fingerprint",

		"min_tls_version",

		"profile",

		"project",

		"self_link",
	)
	rtb.ImmutableAttributes(

		"description",

		"name",

		"project",
	)
}

// Google_compute_ssl_policyHandler ...
type Google_compute_ssl_policyHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_compute_ssl_policyHandler) Create(desired *Google_compute_ssl_policy) (*Google_compute_ssl_policy, string, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Create Google_compute_ssl_policy", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_compute_ssl_policy", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Update ...
func (h *Google_compute_ssl_policyHandler) Update(externalID string, desired *Google_compute_ssl_policy) (*Google_compute_ssl_policy, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Update Google_compute_ssl_policy", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	actual, err := bridge.Update(h.provider, "google_compute_ssl_policy", externalID, rc)
	if err != nil {
		return nil, err
	}
	x := &Google_compute_ssl_policy{Google_compute_ssl_policy_id: &externalID}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Update Actual State Google_compute_ssl_policy", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Read ...
func (h *Google_compute_ssl_policyHandler) Read(externalID string) (*Google_compute_ssl_policy, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Read Google_compute_ssl_policy", "externalID", externalID)
	}
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_compute_ssl_policy", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_compute_ssl_policy{Google_compute_ssl_policy_id: &id}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Read Actual State Google_compute_ssl_policy", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Delete ...
func (h *Google_compute_ssl_policyHandler) Delete(externalID string) error {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Delete Google_compute_ssl_policy", "externalID", externalID)
	}
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_compute_ssl_policy", externalID)
}

type Google_compute_subnetwork_secondary_ip_range_97 struct {
	Ip_cidr_range string

	Range_name string
}

type Google_compute_subnetwork struct {
	Google_compute_subnetwork_id *string `lyra:"ignore"`

	Creation_timestamp *string

	Description *string

	Enable_flow_logs *bool

	Fingerprint *string

	Gateway_address *string

	Ip_cidr_range string

	Name string

	Network string

	Private_ip_google_access *bool

	Project *string

	Region *string

	Secondary_ip_range *[]Google_compute_subnetwork_secondary_ip_range_97

	Self_link *string
}

var Google_compute_subnetwork_rtb = func(rtb service.ResourceTypeBuilder) {
	rtb.ProvidedAttributes(
		"google_compute_subnetwork_id",

		"creation_timestamp",

		"description",

		"enable_flow_logs",

		"fingerprint",

		"gateway_address",

		"private_ip_google_access",

		"project",

		"region",

		"secondary_ip_range",

		"self_link",
	)
	rtb.ImmutableAttributes(

		"description",

		"name",

		"network",

		"project",

		"region",
	)
}

// Google_compute_subnetworkHandler ...
type Google_compute_subnetworkHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_compute_subnetworkHandler) Create(desired *Google_compute_subnetwork) (*Google_compute_subnetwork, string, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Create Google_compute_subnetwork", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_compute_subnetwork", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Update ...
func (h *Google_compute_subnetworkHandler) Update(externalID string, desired *Google_compute_subnetwork) (*Google_compute_subnetwork, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Update Google_compute_subnetwork", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	actual, err := bridge.Update(h.provider, "google_compute_subnetwork", externalID, rc)
	if err != nil {
		return nil, err
	}
	x := &Google_compute_subnetwork{Google_compute_subnetwork_id: &externalID}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Update Actual State Google_compute_subnetwork", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Read ...
func (h *Google_compute_subnetworkHandler) Read(externalID string) (*Google_compute_subnetwork, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Read Google_compute_subnetwork", "externalID", externalID)
	}
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_compute_subnetwork", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_compute_subnetwork{Google_compute_subnetwork_id: &id}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Read Actual State Google_compute_subnetwork", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Delete ...
func (h *Google_compute_subnetworkHandler) Delete(externalID string) error {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Delete Google_compute_subnetwork", "externalID", externalID)
	}
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_compute_subnetwork", externalID)
}

type Google_compute_subnetwork_iam_binding struct {
	Google_compute_subnetwork_iam_binding_id *string `lyra:"ignore"`

	Etag *string

	Members []string

	Project *string

	Region *string

	Role string

	Subnetwork string
}

var Google_compute_subnetwork_iam_binding_rtb = func(rtb service.ResourceTypeBuilder) {
	rtb.ProvidedAttributes(
		"google_compute_subnetwork_iam_binding_id",

		"etag",

		"project",

		"region",
	)
	rtb.ImmutableAttributes(

		"project",

		"region",

		"role",

		"subnetwork",
	)
}

// Google_compute_subnetwork_iam_bindingHandler ...
type Google_compute_subnetwork_iam_bindingHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_compute_subnetwork_iam_bindingHandler) Create(desired *Google_compute_subnetwork_iam_binding) (*Google_compute_subnetwork_iam_binding, string, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Create Google_compute_subnetwork_iam_binding", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_compute_subnetwork_iam_binding", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Update ...
func (h *Google_compute_subnetwork_iam_bindingHandler) Update(externalID string, desired *Google_compute_subnetwork_iam_binding) (*Google_compute_subnetwork_iam_binding, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Update Google_compute_subnetwork_iam_binding", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	actual, err := bridge.Update(h.provider, "google_compute_subnetwork_iam_binding", externalID, rc)
	if err != nil {
		return nil, err
	}
	x := &Google_compute_subnetwork_iam_binding{Google_compute_subnetwork_iam_binding_id: &externalID}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Update Actual State Google_compute_subnetwork_iam_binding", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Read ...
func (h *Google_compute_subnetwork_iam_bindingHandler) Read(externalID string) (*Google_compute_subnetwork_iam_binding, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Read Google_compute_subnetwork_iam_binding", "externalID", externalID)
	}
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_compute_subnetwork_iam_binding", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_compute_subnetwork_iam_binding{Google_compute_subnetwork_iam_binding_id: &id}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Read Actual State Google_compute_subnetwork_iam_binding", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Delete ...
func (h *Google_compute_subnetwork_iam_bindingHandler) Delete(externalID string) error {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Delete Google_compute_subnetwork_iam_binding", "externalID", externalID)
	}
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_compute_subnetwork_iam_binding", externalID)
}

type Google_compute_subnetwork_iam_member struct {
	Google_compute_subnetwork_iam_member_id *string `lyra:"ignore"`

	Etag *string

	Member string

	Project *string

	Region *string

	Role string

	Subnetwork string
}

var Google_compute_subnetwork_iam_member_rtb = func(rtb service.ResourceTypeBuilder) {
	rtb.ProvidedAttributes(
		"google_compute_subnetwork_iam_member_id",

		"etag",

		"project",

		"region",
	)
	rtb.ImmutableAttributes(

		"member",

		"project",

		"region",

		"role",

		"subnetwork",
	)
}

// Google_compute_subnetwork_iam_memberHandler ...
type Google_compute_subnetwork_iam_memberHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_compute_subnetwork_iam_memberHandler) Create(desired *Google_compute_subnetwork_iam_member) (*Google_compute_subnetwork_iam_member, string, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Create Google_compute_subnetwork_iam_member", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_compute_subnetwork_iam_member", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Update ...
func (h *Google_compute_subnetwork_iam_memberHandler) Update(externalID string, desired *Google_compute_subnetwork_iam_member) (*Google_compute_subnetwork_iam_member, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Update Google_compute_subnetwork_iam_member", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	actual, err := bridge.Update(h.provider, "google_compute_subnetwork_iam_member", externalID, rc)
	if err != nil {
		return nil, err
	}
	x := &Google_compute_subnetwork_iam_member{Google_compute_subnetwork_iam_member_id: &externalID}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Update Actual State Google_compute_subnetwork_iam_member", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Read ...
func (h *Google_compute_subnetwork_iam_memberHandler) Read(externalID string) (*Google_compute_subnetwork_iam_member, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Read Google_compute_subnetwork_iam_member", "externalID", externalID)
	}
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_compute_subnetwork_iam_member", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_compute_subnetwork_iam_member{Google_compute_subnetwork_iam_member_id: &id}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Read Actual State Google_compute_subnetwork_iam_member", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Delete ...
func (h *Google_compute_subnetwork_iam_memberHandler) Delete(externalID string) error {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Delete Google_compute_subnetwork_iam_member", "externalID", externalID)
	}
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_compute_subnetwork_iam_member", externalID)
}

type Google_compute_subnetwork_iam_policy struct {
	Google_compute_subnetwork_iam_policy_id *string `lyra:"ignore"`

	Etag *string

	Policy_data string

	Project *string

	Region *string

	Subnetwork string
}

var Google_compute_subnetwork_iam_policy_rtb = func(rtb service.ResourceTypeBuilder) {
	rtb.ProvidedAttributes(
		"google_compute_subnetwork_iam_policy_id",

		"etag",

		"project",

		"region",
	)
	rtb.ImmutableAttributes(

		"project",

		"region",

		"subnetwork",
	)
}

// Google_compute_subnetwork_iam_policyHandler ...
type Google_compute_subnetwork_iam_policyHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_compute_subnetwork_iam_policyHandler) Create(desired *Google_compute_subnetwork_iam_policy) (*Google_compute_subnetwork_iam_policy, string, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Create Google_compute_subnetwork_iam_policy", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_compute_subnetwork_iam_policy", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Update ...
func (h *Google_compute_subnetwork_iam_policyHandler) Update(externalID string, desired *Google_compute_subnetwork_iam_policy) (*Google_compute_subnetwork_iam_policy, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Update Google_compute_subnetwork_iam_policy", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	actual, err := bridge.Update(h.provider, "google_compute_subnetwork_iam_policy", externalID, rc)
	if err != nil {
		return nil, err
	}
	x := &Google_compute_subnetwork_iam_policy{Google_compute_subnetwork_iam_policy_id: &externalID}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Update Actual State Google_compute_subnetwork_iam_policy", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Read ...
func (h *Google_compute_subnetwork_iam_policyHandler) Read(externalID string) (*Google_compute_subnetwork_iam_policy, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Read Google_compute_subnetwork_iam_policy", "externalID", externalID)
	}
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_compute_subnetwork_iam_policy", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_compute_subnetwork_iam_policy{Google_compute_subnetwork_iam_policy_id: &id}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Read Actual State Google_compute_subnetwork_iam_policy", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Delete ...
func (h *Google_compute_subnetwork_iam_policyHandler) Delete(externalID string) error {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Delete Google_compute_subnetwork_iam_policy", "externalID", externalID)
	}
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_compute_subnetwork_iam_policy", externalID)
}

type Google_compute_target_http_proxy struct {
	Google_compute_target_http_proxy_id *string `lyra:"ignore"`

	Creation_timestamp *string

	Description *string

	Name string

	Project *string

	Proxy_id *int

	Self_link *string

	Url_map string
}

var Google_compute_target_http_proxy_rtb = func(rtb service.ResourceTypeBuilder) {
	rtb.ProvidedAttributes(
		"google_compute_target_http_proxy_id",

		"creation_timestamp",

		"description",

		"project",

		"proxy_id",

		"self_link",
	)
	rtb.ImmutableAttributes(

		"description",

		"name",

		"project",
	)
}

// Google_compute_target_http_proxyHandler ...
type Google_compute_target_http_proxyHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_compute_target_http_proxyHandler) Create(desired *Google_compute_target_http_proxy) (*Google_compute_target_http_proxy, string, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Create Google_compute_target_http_proxy", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_compute_target_http_proxy", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Update ...
func (h *Google_compute_target_http_proxyHandler) Update(externalID string, desired *Google_compute_target_http_proxy) (*Google_compute_target_http_proxy, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Update Google_compute_target_http_proxy", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	actual, err := bridge.Update(h.provider, "google_compute_target_http_proxy", externalID, rc)
	if err != nil {
		return nil, err
	}
	x := &Google_compute_target_http_proxy{Google_compute_target_http_proxy_id: &externalID}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Update Actual State Google_compute_target_http_proxy", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Read ...
func (h *Google_compute_target_http_proxyHandler) Read(externalID string) (*Google_compute_target_http_proxy, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Read Google_compute_target_http_proxy", "externalID", externalID)
	}
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_compute_target_http_proxy", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_compute_target_http_proxy{Google_compute_target_http_proxy_id: &id}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Read Actual State Google_compute_target_http_proxy", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Delete ...
func (h *Google_compute_target_http_proxyHandler) Delete(externalID string) error {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Delete Google_compute_target_http_proxy", "externalID", externalID)
	}
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_compute_target_http_proxy", externalID)
}

type Google_compute_target_https_proxy struct {
	Google_compute_target_https_proxy_id *string `lyra:"ignore"`

	Creation_timestamp *string

	Description *string

	Name string

	Project *string

	Proxy_id *int

	Quic_override *string

	Self_link *string

	Ssl_certificates []string

	Ssl_policy *string

	Url_map string
}

var Google_compute_target_https_proxy_rtb = func(rtb service.ResourceTypeBuilder) {
	rtb.ProvidedAttributes(
		"google_compute_target_https_proxy_id",

		"creation_timestamp",

		"description",

		"project",

		"proxy_id",

		"quic_override",

		"self_link",

		"ssl_policy",
	)
	rtb.ImmutableAttributes(

		"description",

		"name",

		"project",
	)
}

// Google_compute_target_https_proxyHandler ...
type Google_compute_target_https_proxyHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_compute_target_https_proxyHandler) Create(desired *Google_compute_target_https_proxy) (*Google_compute_target_https_proxy, string, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Create Google_compute_target_https_proxy", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_compute_target_https_proxy", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Update ...
func (h *Google_compute_target_https_proxyHandler) Update(externalID string, desired *Google_compute_target_https_proxy) (*Google_compute_target_https_proxy, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Update Google_compute_target_https_proxy", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	actual, err := bridge.Update(h.provider, "google_compute_target_https_proxy", externalID, rc)
	if err != nil {
		return nil, err
	}
	x := &Google_compute_target_https_proxy{Google_compute_target_https_proxy_id: &externalID}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Update Actual State Google_compute_target_https_proxy", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Read ...
func (h *Google_compute_target_https_proxyHandler) Read(externalID string) (*Google_compute_target_https_proxy, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Read Google_compute_target_https_proxy", "externalID", externalID)
	}
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_compute_target_https_proxy", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_compute_target_https_proxy{Google_compute_target_https_proxy_id: &id}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Read Actual State Google_compute_target_https_proxy", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Delete ...
func (h *Google_compute_target_https_proxyHandler) Delete(externalID string) error {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Delete Google_compute_target_https_proxy", "externalID", externalID)
	}
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_compute_target_https_proxy", externalID)
}

type Google_compute_target_pool struct {
	Google_compute_target_pool_id *string `lyra:"ignore"`

	Backup_pool *string

	Description *string

	Failover_ratio *float64

	Health_checks *[]string

	Instances *[]string

	Name string

	Project *string

	Region *string

	Self_link *string

	Session_affinity *string
}

var Google_compute_target_pool_rtb = func(rtb service.ResourceTypeBuilder) {
	rtb.ProvidedAttributes(
		"google_compute_target_pool_id",

		"backup_pool",

		"description",

		"failover_ratio",

		"health_checks",

		"instances",

		"project",

		"region",

		"self_link",

		"session_affinity",
	)
	rtb.ImmutableAttributes(

		"description",

		"failover_ratio",

		"name",

		"project",

		"region",

		"session_affinity",
	)
}

// Google_compute_target_poolHandler ...
type Google_compute_target_poolHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_compute_target_poolHandler) Create(desired *Google_compute_target_pool) (*Google_compute_target_pool, string, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Create Google_compute_target_pool", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_compute_target_pool", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Update ...
func (h *Google_compute_target_poolHandler) Update(externalID string, desired *Google_compute_target_pool) (*Google_compute_target_pool, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Update Google_compute_target_pool", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	actual, err := bridge.Update(h.provider, "google_compute_target_pool", externalID, rc)
	if err != nil {
		return nil, err
	}
	x := &Google_compute_target_pool{Google_compute_target_pool_id: &externalID}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Update Actual State Google_compute_target_pool", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Read ...
func (h *Google_compute_target_poolHandler) Read(externalID string) (*Google_compute_target_pool, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Read Google_compute_target_pool", "externalID", externalID)
	}
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_compute_target_pool", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_compute_target_pool{Google_compute_target_pool_id: &id}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Read Actual State Google_compute_target_pool", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Delete ...
func (h *Google_compute_target_poolHandler) Delete(externalID string) error {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Delete Google_compute_target_pool", "externalID", externalID)
	}
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_compute_target_pool", externalID)
}

type Google_compute_target_ssl_proxy struct {
	Google_compute_target_ssl_proxy_id *string `lyra:"ignore"`

	Backend_service string

	Creation_timestamp *string

	Description *string

	Name string

	Project *string

	Proxy_header *string

	Proxy_id *int

	Self_link *string

	Ssl_certificates []string

	Ssl_policy *string
}

var Google_compute_target_ssl_proxy_rtb = func(rtb service.ResourceTypeBuilder) {
	rtb.ProvidedAttributes(
		"google_compute_target_ssl_proxy_id",

		"creation_timestamp",

		"description",

		"project",

		"proxy_header",

		"proxy_id",

		"self_link",

		"ssl_policy",
	)
	rtb.ImmutableAttributes(

		"description",

		"name",

		"project",
	)
}

// Google_compute_target_ssl_proxyHandler ...
type Google_compute_target_ssl_proxyHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_compute_target_ssl_proxyHandler) Create(desired *Google_compute_target_ssl_proxy) (*Google_compute_target_ssl_proxy, string, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Create Google_compute_target_ssl_proxy", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_compute_target_ssl_proxy", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Update ...
func (h *Google_compute_target_ssl_proxyHandler) Update(externalID string, desired *Google_compute_target_ssl_proxy) (*Google_compute_target_ssl_proxy, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Update Google_compute_target_ssl_proxy", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	actual, err := bridge.Update(h.provider, "google_compute_target_ssl_proxy", externalID, rc)
	if err != nil {
		return nil, err
	}
	x := &Google_compute_target_ssl_proxy{Google_compute_target_ssl_proxy_id: &externalID}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Update Actual State Google_compute_target_ssl_proxy", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Read ...
func (h *Google_compute_target_ssl_proxyHandler) Read(externalID string) (*Google_compute_target_ssl_proxy, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Read Google_compute_target_ssl_proxy", "externalID", externalID)
	}
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_compute_target_ssl_proxy", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_compute_target_ssl_proxy{Google_compute_target_ssl_proxy_id: &id}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Read Actual State Google_compute_target_ssl_proxy", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Delete ...
func (h *Google_compute_target_ssl_proxyHandler) Delete(externalID string) error {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Delete Google_compute_target_ssl_proxy", "externalID", externalID)
	}
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_compute_target_ssl_proxy", externalID)
}

type Google_compute_target_tcp_proxy struct {
	Google_compute_target_tcp_proxy_id *string `lyra:"ignore"`

	Backend_service string

	Creation_timestamp *string

	Description *string

	Name string

	Project *string

	Proxy_header *string

	Proxy_id *int

	Self_link *string
}

var Google_compute_target_tcp_proxy_rtb = func(rtb service.ResourceTypeBuilder) {
	rtb.ProvidedAttributes(
		"google_compute_target_tcp_proxy_id",

		"creation_timestamp",

		"description",

		"project",

		"proxy_header",

		"proxy_id",

		"self_link",
	)
	rtb.ImmutableAttributes(

		"description",

		"name",

		"project",
	)
}

// Google_compute_target_tcp_proxyHandler ...
type Google_compute_target_tcp_proxyHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_compute_target_tcp_proxyHandler) Create(desired *Google_compute_target_tcp_proxy) (*Google_compute_target_tcp_proxy, string, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Create Google_compute_target_tcp_proxy", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_compute_target_tcp_proxy", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Update ...
func (h *Google_compute_target_tcp_proxyHandler) Update(externalID string, desired *Google_compute_target_tcp_proxy) (*Google_compute_target_tcp_proxy, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Update Google_compute_target_tcp_proxy", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	actual, err := bridge.Update(h.provider, "google_compute_target_tcp_proxy", externalID, rc)
	if err != nil {
		return nil, err
	}
	x := &Google_compute_target_tcp_proxy{Google_compute_target_tcp_proxy_id: &externalID}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Update Actual State Google_compute_target_tcp_proxy", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Read ...
func (h *Google_compute_target_tcp_proxyHandler) Read(externalID string) (*Google_compute_target_tcp_proxy, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Read Google_compute_target_tcp_proxy", "externalID", externalID)
	}
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_compute_target_tcp_proxy", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_compute_target_tcp_proxy{Google_compute_target_tcp_proxy_id: &id}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Read Actual State Google_compute_target_tcp_proxy", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Delete ...
func (h *Google_compute_target_tcp_proxyHandler) Delete(externalID string) error {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Delete Google_compute_target_tcp_proxy", "externalID", externalID)
	}
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_compute_target_tcp_proxy", externalID)
}

type Google_compute_url_map_host_rule_98 struct {
	Description *string

	Hosts []string

	Path_matcher string
}

type Google_compute_url_map_path_matcher_99_path_rule_100 struct {
	Paths []string

	Service string
}

type Google_compute_url_map_path_matcher_99 struct {
	Default_service string

	Description *string

	Name string

	Path_rule *[]Google_compute_url_map_path_matcher_99_path_rule_100
}

type Google_compute_url_map_test_101 struct {
	Description *string

	Host string

	Path string

	Service string
}

type Google_compute_url_map struct {
	Google_compute_url_map_id *string `lyra:"ignore"`

	Default_service string

	Description *string

	Fingerprint *string

	Host_rule *[]Google_compute_url_map_host_rule_98

	Map_id *string

	Name string

	Path_matcher *[]Google_compute_url_map_path_matcher_99

	Project *string

	Self_link *string

	Test *[]Google_compute_url_map_test_101
}

var Google_compute_url_map_rtb = func(rtb service.ResourceTypeBuilder) {
	rtb.ProvidedAttributes(
		"google_compute_url_map_id",

		"description",

		"fingerprint",

		"host_rule",

		"map_id",

		"path_matcher",

		"project",

		"self_link",

		"test",
	)
	rtb.ImmutableAttributes(

		"name",

		"project",
	)
}

// Google_compute_url_mapHandler ...
type Google_compute_url_mapHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_compute_url_mapHandler) Create(desired *Google_compute_url_map) (*Google_compute_url_map, string, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Create Google_compute_url_map", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_compute_url_map", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Update ...
func (h *Google_compute_url_mapHandler) Update(externalID string, desired *Google_compute_url_map) (*Google_compute_url_map, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Update Google_compute_url_map", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	actual, err := bridge.Update(h.provider, "google_compute_url_map", externalID, rc)
	if err != nil {
		return nil, err
	}
	x := &Google_compute_url_map{Google_compute_url_map_id: &externalID}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Update Actual State Google_compute_url_map", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Read ...
func (h *Google_compute_url_mapHandler) Read(externalID string) (*Google_compute_url_map, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Read Google_compute_url_map", "externalID", externalID)
	}
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_compute_url_map", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_compute_url_map{Google_compute_url_map_id: &id}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Read Actual State Google_compute_url_map", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Delete ...
func (h *Google_compute_url_mapHandler) Delete(externalID string) error {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Delete Google_compute_url_map", "externalID", externalID)
	}
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_compute_url_map", externalID)
}

type Google_compute_vpn_gateway struct {
	Google_compute_vpn_gateway_id *string `lyra:"ignore"`

	Creation_timestamp *string

	Description *string

	Name string

	Network string

	Project *string

	Region *string

	Self_link *string
}

var Google_compute_vpn_gateway_rtb = func(rtb service.ResourceTypeBuilder) {
	rtb.ProvidedAttributes(
		"google_compute_vpn_gateway_id",

		"creation_timestamp",

		"description",

		"project",

		"region",

		"self_link",
	)
	rtb.ImmutableAttributes(

		"description",

		"name",

		"network",

		"project",

		"region",
	)
}

// Google_compute_vpn_gatewayHandler ...
type Google_compute_vpn_gatewayHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_compute_vpn_gatewayHandler) Create(desired *Google_compute_vpn_gateway) (*Google_compute_vpn_gateway, string, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Create Google_compute_vpn_gateway", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_compute_vpn_gateway", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Update ...
func (h *Google_compute_vpn_gatewayHandler) Update(externalID string, desired *Google_compute_vpn_gateway) (*Google_compute_vpn_gateway, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Update Google_compute_vpn_gateway", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	actual, err := bridge.Update(h.provider, "google_compute_vpn_gateway", externalID, rc)
	if err != nil {
		return nil, err
	}
	x := &Google_compute_vpn_gateway{Google_compute_vpn_gateway_id: &externalID}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Update Actual State Google_compute_vpn_gateway", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Read ...
func (h *Google_compute_vpn_gatewayHandler) Read(externalID string) (*Google_compute_vpn_gateway, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Read Google_compute_vpn_gateway", "externalID", externalID)
	}
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_compute_vpn_gateway", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_compute_vpn_gateway{Google_compute_vpn_gateway_id: &id}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Read Actual State Google_compute_vpn_gateway", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Delete ...
func (h *Google_compute_vpn_gatewayHandler) Delete(externalID string) error {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Delete Google_compute_vpn_gateway", "externalID", externalID)
	}
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_compute_vpn_gateway", externalID)
}

type Google_compute_vpn_tunnel struct {
	Google_compute_vpn_tunnel_id *string `lyra:"ignore"`

	Creation_timestamp *string

	Description *string

	Detailed_status *string

	Ike_version *int

	Label_fingerprint *string

	Labels *map[string]string

	Local_traffic_selector *[]string

	Name string

	Peer_ip string

	Project *string

	Region *string

	Remote_traffic_selector *[]string

	Router *string

	Self_link *string

	Shared_secret string

	Shared_secret_hash *string

	Target_vpn_gateway string
}

var Google_compute_vpn_tunnel_rtb = func(rtb service.ResourceTypeBuilder) {
	rtb.ProvidedAttributes(
		"google_compute_vpn_tunnel_id",

		"creation_timestamp",

		"description",

		"detailed_status",

		"ike_version",

		"label_fingerprint",

		"labels",

		"local_traffic_selector",

		"project",

		"region",

		"remote_traffic_selector",

		"router",

		"self_link",

		"shared_secret_hash",
	)
	rtb.ImmutableAttributes(

		"description",

		"ike_version",

		"local_traffic_selector",

		"name",

		"peer_ip",

		"project",

		"region",

		"remote_traffic_selector",

		"router",

		"shared_secret",

		"target_vpn_gateway",
	)
}

// Google_compute_vpn_tunnelHandler ...
type Google_compute_vpn_tunnelHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_compute_vpn_tunnelHandler) Create(desired *Google_compute_vpn_tunnel) (*Google_compute_vpn_tunnel, string, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Create Google_compute_vpn_tunnel", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_compute_vpn_tunnel", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Update ...
func (h *Google_compute_vpn_tunnelHandler) Update(externalID string, desired *Google_compute_vpn_tunnel) (*Google_compute_vpn_tunnel, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Update Google_compute_vpn_tunnel", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	actual, err := bridge.Update(h.provider, "google_compute_vpn_tunnel", externalID, rc)
	if err != nil {
		return nil, err
	}
	x := &Google_compute_vpn_tunnel{Google_compute_vpn_tunnel_id: &externalID}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Update Actual State Google_compute_vpn_tunnel", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Read ...
func (h *Google_compute_vpn_tunnelHandler) Read(externalID string) (*Google_compute_vpn_tunnel, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Read Google_compute_vpn_tunnel", "externalID", externalID)
	}
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_compute_vpn_tunnel", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_compute_vpn_tunnel{Google_compute_vpn_tunnel_id: &id}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Read Actual State Google_compute_vpn_tunnel", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Delete ...
func (h *Google_compute_vpn_tunnelHandler) Delete(externalID string) error {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Delete Google_compute_vpn_tunnel", "externalID", externalID)
	}
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_compute_vpn_tunnel", externalID)
}

type Google_container_analysis_note_attestation_authority_102_hint_103 struct {
	Human_readable_name string
}

type Google_container_analysis_note_attestation_authority_102 struct {
	Hint []Google_container_analysis_note_attestation_authority_102_hint_103
}

type Google_container_analysis_note struct {
	Google_container_analysis_note_id *string `lyra:"ignore"`

	Attestation_authority []Google_container_analysis_note_attestation_authority_102

	Name string

	Project *string
}

var Google_container_analysis_note_rtb = func(rtb service.ResourceTypeBuilder) {
	rtb.ProvidedAttributes(
		"google_container_analysis_note_id",

		"project",
	)
	rtb.ImmutableAttributes(

		"name",

		"project",
	)
}

// Google_container_analysis_noteHandler ...
type Google_container_analysis_noteHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_container_analysis_noteHandler) Create(desired *Google_container_analysis_note) (*Google_container_analysis_note, string, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Create Google_container_analysis_note", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_container_analysis_note", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Update ...
func (h *Google_container_analysis_noteHandler) Update(externalID string, desired *Google_container_analysis_note) (*Google_container_analysis_note, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Update Google_container_analysis_note", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	actual, err := bridge.Update(h.provider, "google_container_analysis_note", externalID, rc)
	if err != nil {
		return nil, err
	}
	x := &Google_container_analysis_note{Google_container_analysis_note_id: &externalID}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Update Actual State Google_container_analysis_note", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Read ...
func (h *Google_container_analysis_noteHandler) Read(externalID string) (*Google_container_analysis_note, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Read Google_container_analysis_note", "externalID", externalID)
	}
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_container_analysis_note", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_container_analysis_note{Google_container_analysis_note_id: &id}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Read Actual State Google_container_analysis_note", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Delete ...
func (h *Google_container_analysis_noteHandler) Delete(externalID string) error {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Delete Google_container_analysis_note", "externalID", externalID)
	}
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_container_analysis_note", externalID)
}

type Google_container_cluster_addons_config_104_horizontal_pod_autoscaling_105 struct {
	Disabled *bool
}

type Google_container_cluster_addons_config_104_http_load_balancing_106 struct {
	Disabled *bool
}

type Google_container_cluster_addons_config_104_kubernetes_dashboard_107 struct {
	Disabled *bool
}

type Google_container_cluster_addons_config_104_network_policy_config_108 struct {
	Disabled *bool
}

type Google_container_cluster_addons_config_104 struct {
	Horizontal_pod_autoscaling *[]Google_container_cluster_addons_config_104_horizontal_pod_autoscaling_105

	Http_load_balancing *[]Google_container_cluster_addons_config_104_http_load_balancing_106

	Kubernetes_dashboard *[]Google_container_cluster_addons_config_104_kubernetes_dashboard_107

	Network_policy_config *[]Google_container_cluster_addons_config_104_network_policy_config_108
}

type Google_container_cluster_cluster_autoscaling_109_resource_limits_110 struct {
	Maximum *int

	Minimum *int

	Resource_type string
}

type Google_container_cluster_cluster_autoscaling_109 struct {
	Enabled bool

	Resource_limits *[]Google_container_cluster_cluster_autoscaling_109_resource_limits_110
}

type Google_container_cluster_ip_allocation_policy_111 struct {
	Cluster_ipv4_cidr_block *string

	Cluster_secondary_range_name *string

	Create_subnetwork *bool

	Services_ipv4_cidr_block *string

	Services_secondary_range_name *string

	Subnetwork_name *string
}

type Google_container_cluster_maintenance_policy_112_daily_maintenance_window_113 struct {
	Duration *string

	Start_time string
}

type Google_container_cluster_maintenance_policy_112 struct {
	Daily_maintenance_window []Google_container_cluster_maintenance_policy_112_daily_maintenance_window_113
}

type Google_container_cluster_master_auth_114_client_certificate_config_115 struct {
	Issue_client_certificate bool
}

type Google_container_cluster_master_auth_114 struct {
	Client_certificate *string

	Client_certificate_config *[]Google_container_cluster_master_auth_114_client_certificate_config_115

	Client_key *string

	Cluster_ca_certificate *string

	Password string

	Username string
}

type Google_container_cluster_master_authorized_networks_config_116_cidr_blocks_117 struct {
	Cidr_block string

	Display_name *string
}

type Google_container_cluster_master_authorized_networks_config_116 struct {
	Cidr_blocks *[]Google_container_cluster_master_authorized_networks_config_116_cidr_blocks_117
}

type Google_container_cluster_network_policy_118 struct {
	Enabled *bool

	Provider *string
}

type Google_container_cluster_node_config_119_guest_accelerator_120 struct {
	Count int

	Type string
}

type Google_container_cluster_node_config_119_taint_121 struct {
	Effect string

	Key string

	Value string
}

type Google_container_cluster_node_config_119_workload_metadata_config_122 struct {
	Node_metadata string
}

type Google_container_cluster_node_config_119 struct {
	Disk_size_gb *int

	Disk_type *string

	Guest_accelerator *[]Google_container_cluster_node_config_119_guest_accelerator_120

	Image_type *string

	Labels *map[string]string

	Local_ssd_count *int

	Machine_type *string

	Metadata *map[string]string

	Min_cpu_platform *string

	Oauth_scopes *[]string

	Preemptible *bool

	Service_account *string

	Tags *[]string

	Taint *[]Google_container_cluster_node_config_119_taint_121

	Workload_metadata_config *[]Google_container_cluster_node_config_119_workload_metadata_config_122
}

type Google_container_cluster_node_pool_123_autoscaling_124 struct {
	Max_node_count int

	Min_node_count int
}

type Google_container_cluster_node_pool_123_management_125 struct {
	Auto_repair *bool

	Auto_upgrade *bool
}

type Google_container_cluster_node_pool_123_node_config_126_guest_accelerator_127 struct {
	Count int

	Type string
}

type Google_container_cluster_node_pool_123_node_config_126_taint_128 struct {
	Effect string

	Key string

	Value string
}

type Google_container_cluster_node_pool_123_node_config_126_workload_metadata_config_129 struct {
	Node_metadata string
}

type Google_container_cluster_node_pool_123_node_config_126 struct {
	Disk_size_gb *int

	Disk_type *string

	Guest_accelerator *[]Google_container_cluster_node_pool_123_node_config_126_guest_accelerator_127

	Image_type *string

	Labels *map[string]string

	Local_ssd_count *int

	Machine_type *string

	Metadata *map[string]string

	Min_cpu_platform *string

	Oauth_scopes *[]string

	Preemptible *bool

	Service_account *string

	Tags *[]string

	Taint *[]Google_container_cluster_node_pool_123_node_config_126_taint_128

	Workload_metadata_config *[]Google_container_cluster_node_pool_123_node_config_126_workload_metadata_config_129
}

type Google_container_cluster_node_pool_123 struct {
	Autoscaling *[]Google_container_cluster_node_pool_123_autoscaling_124

	Initial_node_count *int

	Instance_group_urls *[]string

	Management *[]Google_container_cluster_node_pool_123_management_125

	Max_pods_per_node *int

	Name *string

	Name_prefix *string

	Node_config *[]Google_container_cluster_node_pool_123_node_config_126

	Node_count *int

	Version *string
}

type Google_container_cluster_pod_security_policy_config_130 struct {
	Enabled bool
}

type Google_container_cluster_private_cluster_config_131 struct {
	Enable_private_endpoint *bool

	Enable_private_nodes *bool

	Master_ipv4_cidr_block *string

	Private_endpoint *string

	Public_endpoint *string
}

type Google_container_cluster struct {
	Google_container_cluster_id *string `lyra:"ignore"`

	Additional_zones *[]string

	Addons_config *[]Google_container_cluster_addons_config_104

	Cluster_autoscaling *[]Google_container_cluster_cluster_autoscaling_109

	Cluster_ipv4_cidr *string

	Description *string

	Enable_binary_authorization *bool

	Enable_kubernetes_alpha *bool

	Enable_legacy_abac *bool

	Enable_tpu *bool

	Endpoint *string

	Initial_node_count *int

	Instance_group_urls *[]string

	Ip_allocation_policy *[]Google_container_cluster_ip_allocation_policy_111

	Logging_service *string

	Maintenance_policy *[]Google_container_cluster_maintenance_policy_112

	Master_auth *[]Google_container_cluster_master_auth_114

	Master_authorized_networks_config *[]Google_container_cluster_master_authorized_networks_config_116

	Master_ipv4_cidr_block *string

	Master_version *string

	Min_master_version *string

	Monitoring_service *string

	Name string

	Network *string

	Network_policy *[]Google_container_cluster_network_policy_118

	Node_config *[]Google_container_cluster_node_config_119

	Node_pool *[]Google_container_cluster_node_pool_123

	Node_version *string

	Pod_security_policy_config *[]Google_container_cluster_pod_security_policy_config_130

	Private_cluster *bool

	Private_cluster_config *[]Google_container_cluster_private_cluster_config_131

	Project *string

	Region *string

	Remove_default_node_pool *bool

	Resource_labels *map[string]string

	Subnetwork *string

	Zone *string
}

var Google_container_cluster_rtb = func(rtb service.ResourceTypeBuilder) {
	rtb.ProvidedAttributes(
		"google_container_cluster_id",

		"additional_zones",

		"addons_config",

		"cluster_autoscaling",

		"cluster_ipv4_cidr",

		"description",

		"enable_binary_authorization",

		"enable_kubernetes_alpha",

		"enable_legacy_abac",

		"enable_tpu",

		"endpoint",

		"initial_node_count",

		"instance_group_urls",

		"ip_allocation_policy",

		"logging_service",

		"maintenance_policy",

		"master_auth",

		"master_authorized_networks_config",

		"master_ipv4_cidr_block",

		"master_version",

		"min_master_version",

		"monitoring_service",

		"network",

		"network_policy",

		"node_config",

		"node_pool",

		"node_version",

		"pod_security_policy_config",

		"private_cluster",

		"private_cluster_config",

		"project",

		"region",

		"remove_default_node_pool",

		"resource_labels",

		"subnetwork",

		"zone",
	)
	rtb.ImmutableAttributes(

		"cluster_ipv4_cidr",

		"description",

		"enable_kubernetes_alpha",

		"enable_tpu",

		"initial_node_count",

		"ip_allocation_policy",

		"master_ipv4_cidr_block",

		"name",

		"network",

		"node_config",

		"node_pool",

		"private_cluster",

		"project",

		"region",

		"subnetwork",

		"zone",
	)
}

// Google_container_clusterHandler ...
type Google_container_clusterHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_container_clusterHandler) Create(desired *Google_container_cluster) (*Google_container_cluster, string, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Create Google_container_cluster", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_container_cluster", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Update ...
func (h *Google_container_clusterHandler) Update(externalID string, desired *Google_container_cluster) (*Google_container_cluster, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Update Google_container_cluster", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	actual, err := bridge.Update(h.provider, "google_container_cluster", externalID, rc)
	if err != nil {
		return nil, err
	}
	x := &Google_container_cluster{Google_container_cluster_id: &externalID}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Update Actual State Google_container_cluster", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Read ...
func (h *Google_container_clusterHandler) Read(externalID string) (*Google_container_cluster, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Read Google_container_cluster", "externalID", externalID)
	}
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_container_cluster", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_container_cluster{Google_container_cluster_id: &id}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Read Actual State Google_container_cluster", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Delete ...
func (h *Google_container_clusterHandler) Delete(externalID string) error {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Delete Google_container_cluster", "externalID", externalID)
	}
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_container_cluster", externalID)
}

type Google_container_node_pool_autoscaling_132 struct {
	Max_node_count int

	Min_node_count int
}

type Google_container_node_pool_management_133 struct {
	Auto_repair *bool

	Auto_upgrade *bool
}

type Google_container_node_pool_node_config_134_guest_accelerator_135 struct {
	Count int

	Type string
}

type Google_container_node_pool_node_config_134_taint_136 struct {
	Effect string

	Key string

	Value string
}

type Google_container_node_pool_node_config_134_workload_metadata_config_137 struct {
	Node_metadata string
}

type Google_container_node_pool_node_config_134 struct {
	Disk_size_gb *int

	Disk_type *string

	Guest_accelerator *[]Google_container_node_pool_node_config_134_guest_accelerator_135

	Image_type *string

	Labels *map[string]string

	Local_ssd_count *int

	Machine_type *string

	Metadata *map[string]string

	Min_cpu_platform *string

	Oauth_scopes *[]string

	Preemptible *bool

	Service_account *string

	Tags *[]string

	Taint *[]Google_container_node_pool_node_config_134_taint_136

	Workload_metadata_config *[]Google_container_node_pool_node_config_134_workload_metadata_config_137
}

type Google_container_node_pool struct {
	Google_container_node_pool_id *string `lyra:"ignore"`

	Autoscaling *[]Google_container_node_pool_autoscaling_132

	Cluster string

	Initial_node_count *int

	Instance_group_urls *[]string

	Management *[]Google_container_node_pool_management_133

	Max_pods_per_node *int

	Name *string

	Name_prefix *string

	Node_config *[]Google_container_node_pool_node_config_134

	Node_count *int

	Project *string

	Region *string

	Version *string

	Zone *string
}

var Google_container_node_pool_rtb = func(rtb service.ResourceTypeBuilder) {
	rtb.ProvidedAttributes(
		"google_container_node_pool_id",

		"autoscaling",

		"initial_node_count",

		"instance_group_urls",

		"management",

		"max_pods_per_node",

		"name",

		"name_prefix",

		"node_config",

		"node_count",

		"project",

		"region",

		"version",

		"zone",
	)
	rtb.ImmutableAttributes(

		"cluster",

		"initial_node_count",

		"max_pods_per_node",

		"name",

		"name_prefix",

		"node_config",

		"project",

		"region",

		"zone",
	)
}

// Google_container_node_poolHandler ...
type Google_container_node_poolHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_container_node_poolHandler) Create(desired *Google_container_node_pool) (*Google_container_node_pool, string, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Create Google_container_node_pool", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_container_node_pool", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Update ...
func (h *Google_container_node_poolHandler) Update(externalID string, desired *Google_container_node_pool) (*Google_container_node_pool, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Update Google_container_node_pool", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	actual, err := bridge.Update(h.provider, "google_container_node_pool", externalID, rc)
	if err != nil {
		return nil, err
	}
	x := &Google_container_node_pool{Google_container_node_pool_id: &externalID}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Update Actual State Google_container_node_pool", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Read ...
func (h *Google_container_node_poolHandler) Read(externalID string) (*Google_container_node_pool, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Read Google_container_node_pool", "externalID", externalID)
	}
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_container_node_pool", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_container_node_pool{Google_container_node_pool_id: &id}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Read Actual State Google_container_node_pool", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Delete ...
func (h *Google_container_node_poolHandler) Delete(externalID string) error {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Delete Google_container_node_pool", "externalID", externalID)
	}
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_container_node_pool", externalID)
}

type Google_dataflow_job struct {
	Google_dataflow_job_id *string `lyra:"ignore"`

	Max_workers *int

	Name string

	On_delete *string

	Parameters *map[string]string

	Project *string

	Region *string

	State *string

	Temp_gcs_location string

	Template_gcs_path string

	Zone *string
}

var Google_dataflow_job_rtb = func(rtb service.ResourceTypeBuilder) {
	rtb.ProvidedAttributes(
		"google_dataflow_job_id",

		"max_workers",

		"on_delete",

		"parameters",

		"project",

		"region",

		"state",

		"zone",
	)
	rtb.ImmutableAttributes(

		"max_workers",

		"name",

		"on_delete",

		"parameters",

		"project",

		"region",

		"temp_gcs_location",

		"template_gcs_path",

		"zone",
	)
}

// Google_dataflow_jobHandler ...
type Google_dataflow_jobHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_dataflow_jobHandler) Create(desired *Google_dataflow_job) (*Google_dataflow_job, string, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Create Google_dataflow_job", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_dataflow_job", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Update ...
func (h *Google_dataflow_jobHandler) Update(externalID string, desired *Google_dataflow_job) (*Google_dataflow_job, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Update Google_dataflow_job", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	actual, err := bridge.Update(h.provider, "google_dataflow_job", externalID, rc)
	if err != nil {
		return nil, err
	}
	x := &Google_dataflow_job{Google_dataflow_job_id: &externalID}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Update Actual State Google_dataflow_job", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Read ...
func (h *Google_dataflow_jobHandler) Read(externalID string) (*Google_dataflow_job, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Read Google_dataflow_job", "externalID", externalID)
	}
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_dataflow_job", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_dataflow_job{Google_dataflow_job_id: &id}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Read Actual State Google_dataflow_job", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Delete ...
func (h *Google_dataflow_jobHandler) Delete(externalID string) error {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Delete Google_dataflow_job", "externalID", externalID)
	}
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_dataflow_job", externalID)
}

type Google_dataproc_cluster_cluster_config_138_gce_cluster_config_139 struct {
	Internal_ip_only *bool

	Metadata *map[string]string

	Network *string

	Service_account *string

	Service_account_scopes *[]string

	Subnetwork *string

	Tags *[]string

	Zone *string
}

type Google_dataproc_cluster_cluster_config_138_initialization_action_140 struct {
	Script string

	Timeout_sec *int
}

type Google_dataproc_cluster_cluster_config_138_master_config_141_disk_config_142 struct {
	Boot_disk_size_gb *int

	Boot_disk_type *string

	Num_local_ssds *int
}

type Google_dataproc_cluster_cluster_config_138_master_config_141 struct {
	Disk_config *[]Google_dataproc_cluster_cluster_config_138_master_config_141_disk_config_142

	Instance_names *[]string

	Machine_type *string

	Num_instances *int
}

type Google_dataproc_cluster_cluster_config_138_preemptible_worker_config_143_disk_config_144 struct {
	Boot_disk_size_gb *int
}

type Google_dataproc_cluster_cluster_config_138_preemptible_worker_config_143 struct {
	Disk_config *[]Google_dataproc_cluster_cluster_config_138_preemptible_worker_config_143_disk_config_144

	Instance_names *[]string

	Num_instances *int
}

type Google_dataproc_cluster_cluster_config_138_software_config_145 struct {
	Image_version *string

	Override_properties *map[string]string

	Properties *map[string]string
}

type Google_dataproc_cluster_cluster_config_138_worker_config_146_disk_config_147 struct {
	Boot_disk_size_gb *int

	Boot_disk_type *string

	Num_local_ssds *int
}

type Google_dataproc_cluster_cluster_config_138_worker_config_146 struct {
	Disk_config *[]Google_dataproc_cluster_cluster_config_138_worker_config_146_disk_config_147

	Instance_names *[]string

	Machine_type *string

	Num_instances *int
}

type Google_dataproc_cluster_cluster_config_138 struct {
	Bucket *string

	Delete_autogen_bucket *bool

	Gce_cluster_config *[]Google_dataproc_cluster_cluster_config_138_gce_cluster_config_139

	Initialization_action *[]Google_dataproc_cluster_cluster_config_138_initialization_action_140

	Master_config *[]Google_dataproc_cluster_cluster_config_138_master_config_141

	Preemptible_worker_config *[]Google_dataproc_cluster_cluster_config_138_preemptible_worker_config_143

	Software_config *[]Google_dataproc_cluster_cluster_config_138_software_config_145

	Staging_bucket *string

	Worker_config *[]Google_dataproc_cluster_cluster_config_138_worker_config_146
}

type Google_dataproc_cluster struct {
	Google_dataproc_cluster_id *string `lyra:"ignore"`

	Cluster_config *[]Google_dataproc_cluster_cluster_config_138

	Labels *map[string]string

	Name string

	Project *string

	Region *string
}

var Google_dataproc_cluster_rtb = func(rtb service.ResourceTypeBuilder) {
	rtb.ProvidedAttributes(
		"google_dataproc_cluster_id",

		"cluster_config",

		"labels",

		"project",

		"region",
	)
	rtb.ImmutableAttributes(

		"name",

		"project",

		"region",
	)
}

// Google_dataproc_clusterHandler ...
type Google_dataproc_clusterHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_dataproc_clusterHandler) Create(desired *Google_dataproc_cluster) (*Google_dataproc_cluster, string, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Create Google_dataproc_cluster", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_dataproc_cluster", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Update ...
func (h *Google_dataproc_clusterHandler) Update(externalID string, desired *Google_dataproc_cluster) (*Google_dataproc_cluster, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Update Google_dataproc_cluster", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	actual, err := bridge.Update(h.provider, "google_dataproc_cluster", externalID, rc)
	if err != nil {
		return nil, err
	}
	x := &Google_dataproc_cluster{Google_dataproc_cluster_id: &externalID}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Update Actual State Google_dataproc_cluster", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Read ...
func (h *Google_dataproc_clusterHandler) Read(externalID string) (*Google_dataproc_cluster, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Read Google_dataproc_cluster", "externalID", externalID)
	}
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_dataproc_cluster", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_dataproc_cluster{Google_dataproc_cluster_id: &id}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Read Actual State Google_dataproc_cluster", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Delete ...
func (h *Google_dataproc_clusterHandler) Delete(externalID string) error {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Delete Google_dataproc_cluster", "externalID", externalID)
	}
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_dataproc_cluster", externalID)
}

type Google_dataproc_job_hadoop_config_148_logging_config_149 struct {
	Driver_log_levels *map[string]string
}

type Google_dataproc_job_hadoop_config_148 struct {
	Archive_uris *[]string

	Args *[]string

	File_uris *[]string

	Jar_file_uris *[]string

	Logging_config *[]Google_dataproc_job_hadoop_config_148_logging_config_149

	Main_class *string

	Main_jar_file_uri *string

	Properties *map[string]string
}

type Google_dataproc_job_hive_config_150 struct {
	Continue_on_failure *bool

	Jar_file_uris *[]string

	Properties *map[string]string

	Query_file_uri *string

	Query_list *[]string

	Script_variables *map[string]string
}

type Google_dataproc_job_pig_config_151_logging_config_152 struct {
	Driver_log_levels *map[string]string
}

type Google_dataproc_job_pig_config_151 struct {
	Continue_on_failure *bool

	Jar_file_uris *[]string

	Logging_config *[]Google_dataproc_job_pig_config_151_logging_config_152

	Properties *map[string]string

	Query_file_uri *string

	Query_list *[]string

	Script_variables *map[string]string
}

type Google_dataproc_job_placement_153 struct {
	Cluster_name string

	Cluster_uuid *string
}

type Google_dataproc_job_pyspark_config_154_logging_config_155 struct {
	Driver_log_levels *map[string]string
}

type Google_dataproc_job_pyspark_config_154 struct {
	Archive_uris *[]string

	Args *[]string

	File_uris *[]string

	Jar_file_uris *[]string

	Logging_config *[]Google_dataproc_job_pyspark_config_154_logging_config_155

	Main_python_file_uri string

	Properties *map[string]string

	Python_file_uris *[]string
}

type Google_dataproc_job_reference_156 struct {
	Job_id *string
}

type Google_dataproc_job_scheduling_157 struct {
	Max_failures_per_hour *int
}

type Google_dataproc_job_spark_config_158_logging_config_159 struct {
	Driver_log_levels *map[string]string
}

type Google_dataproc_job_spark_config_158 struct {
	Archive_uris *[]string

	Args *[]string

	File_uris *[]string

	Jar_file_uris *[]string

	Logging_config *[]Google_dataproc_job_spark_config_158_logging_config_159

	Main_class *string

	Main_jar_file_uri *string

	Properties *map[string]string
}

type Google_dataproc_job_sparksql_config_160_logging_config_161 struct {
	Driver_log_levels *map[string]string
}

type Google_dataproc_job_sparksql_config_160 struct {
	Jar_file_uris *[]string

	Logging_config *[]Google_dataproc_job_sparksql_config_160_logging_config_161

	Properties *map[string]string

	Query_file_uri *string

	Query_list *[]string

	Script_variables *map[string]string
}

type Google_dataproc_job_status_162 struct {
	Details *string

	State *string

	State_start_time *string

	Substate *string
}

type Google_dataproc_job struct {
	Google_dataproc_job_id *string `lyra:"ignore"`

	Driver_controls_files_uri *string

	Driver_output_resource_uri *string

	Force_delete *bool

	Hadoop_config *[]Google_dataproc_job_hadoop_config_148

	Hive_config *[]Google_dataproc_job_hive_config_150

	Labels *map[string]string

	Pig_config *[]Google_dataproc_job_pig_config_151

	Placement []Google_dataproc_job_placement_153

	Project *string

	Pyspark_config *[]Google_dataproc_job_pyspark_config_154

	Reference *[]Google_dataproc_job_reference_156

	Region *string

	Scheduling *[]Google_dataproc_job_scheduling_157

	Spark_config *[]Google_dataproc_job_spark_config_158

	Sparksql_config *[]Google_dataproc_job_sparksql_config_160

	Status *[]Google_dataproc_job_status_162
}

var Google_dataproc_job_rtb = func(rtb service.ResourceTypeBuilder) {
	rtb.ProvidedAttributes(
		"google_dataproc_job_id",

		"driver_controls_files_uri",

		"driver_output_resource_uri",

		"force_delete",

		"hadoop_config",

		"hive_config",

		"labels",

		"pig_config",

		"project",

		"pyspark_config",

		"reference",

		"region",

		"scheduling",

		"spark_config",

		"sparksql_config",

		"status",
	)
	rtb.ImmutableAttributes(

		"hadoop_config",

		"hive_config",

		"labels",

		"pig_config",

		"project",

		"pyspark_config",

		"region",

		"scheduling",

		"spark_config",

		"sparksql_config",
	)
}

// Google_dataproc_jobHandler ...
type Google_dataproc_jobHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_dataproc_jobHandler) Create(desired *Google_dataproc_job) (*Google_dataproc_job, string, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Create Google_dataproc_job", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_dataproc_job", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Update ...
func (h *Google_dataproc_jobHandler) Update(externalID string, desired *Google_dataproc_job) (*Google_dataproc_job, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Update Google_dataproc_job", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	actual, err := bridge.Update(h.provider, "google_dataproc_job", externalID, rc)
	if err != nil {
		return nil, err
	}
	x := &Google_dataproc_job{Google_dataproc_job_id: &externalID}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Update Actual State Google_dataproc_job", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Read ...
func (h *Google_dataproc_jobHandler) Read(externalID string) (*Google_dataproc_job, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Read Google_dataproc_job", "externalID", externalID)
	}
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_dataproc_job", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_dataproc_job{Google_dataproc_job_id: &id}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Read Actual State Google_dataproc_job", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Delete ...
func (h *Google_dataproc_jobHandler) Delete(externalID string) error {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Delete Google_dataproc_job", "externalID", externalID)
	}
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_dataproc_job", externalID)
}

type Google_dns_managed_zone struct {
	Google_dns_managed_zone_id *string `lyra:"ignore"`

	Description *string

	Dns_name string

	Labels *map[string]string

	Name string

	Name_servers *[]string

	Project *string
}

var Google_dns_managed_zone_rtb = func(rtb service.ResourceTypeBuilder) {
	rtb.ProvidedAttributes(
		"google_dns_managed_zone_id",

		"description",

		"labels",

		"name_servers",

		"project",
	)
	rtb.ImmutableAttributes(

		"dns_name",

		"name",

		"project",
	)
}

// Google_dns_managed_zoneHandler ...
type Google_dns_managed_zoneHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_dns_managed_zoneHandler) Create(desired *Google_dns_managed_zone) (*Google_dns_managed_zone, string, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Create Google_dns_managed_zone", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_dns_managed_zone", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Update ...
func (h *Google_dns_managed_zoneHandler) Update(externalID string, desired *Google_dns_managed_zone) (*Google_dns_managed_zone, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Update Google_dns_managed_zone", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	actual, err := bridge.Update(h.provider, "google_dns_managed_zone", externalID, rc)
	if err != nil {
		return nil, err
	}
	x := &Google_dns_managed_zone{Google_dns_managed_zone_id: &externalID}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Update Actual State Google_dns_managed_zone", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Read ...
func (h *Google_dns_managed_zoneHandler) Read(externalID string) (*Google_dns_managed_zone, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Read Google_dns_managed_zone", "externalID", externalID)
	}
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_dns_managed_zone", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_dns_managed_zone{Google_dns_managed_zone_id: &id}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Read Actual State Google_dns_managed_zone", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Delete ...
func (h *Google_dns_managed_zoneHandler) Delete(externalID string) error {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Delete Google_dns_managed_zone", "externalID", externalID)
	}
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_dns_managed_zone", externalID)
}

type Google_dns_record_set struct {
	Google_dns_record_set_id *string `lyra:"ignore"`

	Managed_zone string

	Name string

	Project *string

	Rrdatas []string

	Ttl int

	Type string
}

var Google_dns_record_set_rtb = func(rtb service.ResourceTypeBuilder) {
	rtb.ProvidedAttributes(
		"google_dns_record_set_id",

		"project",
	)
	rtb.ImmutableAttributes(

		"managed_zone",

		"name",

		"project",
	)
}

// Google_dns_record_setHandler ...
type Google_dns_record_setHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_dns_record_setHandler) Create(desired *Google_dns_record_set) (*Google_dns_record_set, string, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Create Google_dns_record_set", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_dns_record_set", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Update ...
func (h *Google_dns_record_setHandler) Update(externalID string, desired *Google_dns_record_set) (*Google_dns_record_set, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Update Google_dns_record_set", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	actual, err := bridge.Update(h.provider, "google_dns_record_set", externalID, rc)
	if err != nil {
		return nil, err
	}
	x := &Google_dns_record_set{Google_dns_record_set_id: &externalID}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Update Actual State Google_dns_record_set", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Read ...
func (h *Google_dns_record_setHandler) Read(externalID string) (*Google_dns_record_set, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Read Google_dns_record_set", "externalID", externalID)
	}
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_dns_record_set", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_dns_record_set{Google_dns_record_set_id: &id}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Read Actual State Google_dns_record_set", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Delete ...
func (h *Google_dns_record_setHandler) Delete(externalID string) error {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Delete Google_dns_record_set", "externalID", externalID)
	}
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_dns_record_set", externalID)
}

type Google_endpoints_service_apis_163_methods_164 struct {
	Name *string

	Request_type *string

	Response_type *string

	Syntax *string
}

type Google_endpoints_service_apis_163 struct {
	Methods *[]Google_endpoints_service_apis_163_methods_164

	Name *string

	Syntax *string

	Version *string
}

type Google_endpoints_service_endpoints_165 struct {
	Address *string

	Name *string
}

type Google_endpoints_service struct {
	Google_endpoints_service_id *string `lyra:"ignore"`

	Apis *[]Google_endpoints_service_apis_163

	Config_id *string

	Dns_address *string

	Endpoints *[]Google_endpoints_service_endpoints_165

	Grpc_config *string

	Openapi_config *string

	Project *string

	Protoc_output *string

	Protoc_output_base64 *string

	Service_name string
}

var Google_endpoints_service_rtb = func(rtb service.ResourceTypeBuilder) {
	rtb.ProvidedAttributes(
		"google_endpoints_service_id",

		"apis",

		"config_id",

		"dns_address",

		"endpoints",

		"grpc_config",

		"openapi_config",

		"project",

		"protoc_output",

		"protoc_output_base64",
	)
	rtb.ImmutableAttributes(

		"project",

		"service_name",
	)
}

// Google_endpoints_serviceHandler ...
type Google_endpoints_serviceHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_endpoints_serviceHandler) Create(desired *Google_endpoints_service) (*Google_endpoints_service, string, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Create Google_endpoints_service", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_endpoints_service", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Update ...
func (h *Google_endpoints_serviceHandler) Update(externalID string, desired *Google_endpoints_service) (*Google_endpoints_service, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Update Google_endpoints_service", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	actual, err := bridge.Update(h.provider, "google_endpoints_service", externalID, rc)
	if err != nil {
		return nil, err
	}
	x := &Google_endpoints_service{Google_endpoints_service_id: &externalID}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Update Actual State Google_endpoints_service", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Read ...
func (h *Google_endpoints_serviceHandler) Read(externalID string) (*Google_endpoints_service, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Read Google_endpoints_service", "externalID", externalID)
	}
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_endpoints_service", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_endpoints_service{Google_endpoints_service_id: &id}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Read Actual State Google_endpoints_service", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Delete ...
func (h *Google_endpoints_serviceHandler) Delete(externalID string) error {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Delete Google_endpoints_service", "externalID", externalID)
	}
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_endpoints_service", externalID)
}

type Google_filestore_instance_file_shares_166 struct {
	Capacity_gb int

	Name string
}

type Google_filestore_instance_networks_167 struct {
	Ip_addresses *[]string

	Modes []string

	Network string

	Reserved_ip_range *string
}

type Google_filestore_instance struct {
	Google_filestore_instance_id *string `lyra:"ignore"`

	Create_time *string

	Description *string

	Etag *string

	File_shares []Google_filestore_instance_file_shares_166

	Labels *map[string]string

	Name string

	Networks []Google_filestore_instance_networks_167

	Project *string

	Tier string

	Zone string
}

var Google_filestore_instance_rtb = func(rtb service.ResourceTypeBuilder) {
	rtb.ProvidedAttributes(
		"google_filestore_instance_id",

		"create_time",

		"description",

		"etag",

		"labels",

		"project",
	)
	rtb.ImmutableAttributes(

		"networks",

		"project",

		"tier",

		"zone",
	)
}

// Google_filestore_instanceHandler ...
type Google_filestore_instanceHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_filestore_instanceHandler) Create(desired *Google_filestore_instance) (*Google_filestore_instance, string, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Create Google_filestore_instance", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_filestore_instance", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Update ...
func (h *Google_filestore_instanceHandler) Update(externalID string, desired *Google_filestore_instance) (*Google_filestore_instance, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Update Google_filestore_instance", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	actual, err := bridge.Update(h.provider, "google_filestore_instance", externalID, rc)
	if err != nil {
		return nil, err
	}
	x := &Google_filestore_instance{Google_filestore_instance_id: &externalID}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Update Actual State Google_filestore_instance", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Read ...
func (h *Google_filestore_instanceHandler) Read(externalID string) (*Google_filestore_instance, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Read Google_filestore_instance", "externalID", externalID)
	}
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_filestore_instance", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_filestore_instance{Google_filestore_instance_id: &id}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Read Actual State Google_filestore_instance", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Delete ...
func (h *Google_filestore_instanceHandler) Delete(externalID string) error {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Delete Google_filestore_instance", "externalID", externalID)
	}
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_filestore_instance", externalID)
}

type Google_folder struct {
	Google_folder_id *string `lyra:"ignore"`

	Create_time *string

	Display_name string

	Lifecycle_state *string

	Name *string

	Parent string
}

var Google_folder_rtb = func(rtb service.ResourceTypeBuilder) {
	rtb.ProvidedAttributes(
		"google_folder_id",

		"create_time",

		"lifecycle_state",

		"name",
	)
	rtb.ImmutableAttributes()
}

// Google_folderHandler ...
type Google_folderHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_folderHandler) Create(desired *Google_folder) (*Google_folder, string, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Create Google_folder", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_folder", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Update ...
func (h *Google_folderHandler) Update(externalID string, desired *Google_folder) (*Google_folder, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Update Google_folder", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	actual, err := bridge.Update(h.provider, "google_folder", externalID, rc)
	if err != nil {
		return nil, err
	}
	x := &Google_folder{Google_folder_id: &externalID}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Update Actual State Google_folder", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Read ...
func (h *Google_folderHandler) Read(externalID string) (*Google_folder, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Read Google_folder", "externalID", externalID)
	}
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_folder", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_folder{Google_folder_id: &id}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Read Actual State Google_folder", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Delete ...
func (h *Google_folderHandler) Delete(externalID string) error {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Delete Google_folder", "externalID", externalID)
	}
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_folder", externalID)
}

type Google_folder_iam_binding struct {
	Google_folder_iam_binding_id *string `lyra:"ignore"`

	Etag *string

	Folder string

	Members []string

	Role string
}

var Google_folder_iam_binding_rtb = func(rtb service.ResourceTypeBuilder) {
	rtb.ProvidedAttributes(
		"google_folder_iam_binding_id",

		"etag",
	)
	rtb.ImmutableAttributes(

		"folder",

		"role",
	)
}

// Google_folder_iam_bindingHandler ...
type Google_folder_iam_bindingHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_folder_iam_bindingHandler) Create(desired *Google_folder_iam_binding) (*Google_folder_iam_binding, string, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Create Google_folder_iam_binding", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_folder_iam_binding", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Update ...
func (h *Google_folder_iam_bindingHandler) Update(externalID string, desired *Google_folder_iam_binding) (*Google_folder_iam_binding, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Update Google_folder_iam_binding", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	actual, err := bridge.Update(h.provider, "google_folder_iam_binding", externalID, rc)
	if err != nil {
		return nil, err
	}
	x := &Google_folder_iam_binding{Google_folder_iam_binding_id: &externalID}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Update Actual State Google_folder_iam_binding", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Read ...
func (h *Google_folder_iam_bindingHandler) Read(externalID string) (*Google_folder_iam_binding, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Read Google_folder_iam_binding", "externalID", externalID)
	}
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_folder_iam_binding", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_folder_iam_binding{Google_folder_iam_binding_id: &id}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Read Actual State Google_folder_iam_binding", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Delete ...
func (h *Google_folder_iam_bindingHandler) Delete(externalID string) error {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Delete Google_folder_iam_binding", "externalID", externalID)
	}
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_folder_iam_binding", externalID)
}

type Google_folder_iam_member struct {
	Google_folder_iam_member_id *string `lyra:"ignore"`

	Etag *string

	Folder string

	Member string

	Role string
}

var Google_folder_iam_member_rtb = func(rtb service.ResourceTypeBuilder) {
	rtb.ProvidedAttributes(
		"google_folder_iam_member_id",

		"etag",
	)
	rtb.ImmutableAttributes(

		"folder",

		"member",

		"role",
	)
}

// Google_folder_iam_memberHandler ...
type Google_folder_iam_memberHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_folder_iam_memberHandler) Create(desired *Google_folder_iam_member) (*Google_folder_iam_member, string, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Create Google_folder_iam_member", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_folder_iam_member", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Update ...
func (h *Google_folder_iam_memberHandler) Update(externalID string, desired *Google_folder_iam_member) (*Google_folder_iam_member, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Update Google_folder_iam_member", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	actual, err := bridge.Update(h.provider, "google_folder_iam_member", externalID, rc)
	if err != nil {
		return nil, err
	}
	x := &Google_folder_iam_member{Google_folder_iam_member_id: &externalID}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Update Actual State Google_folder_iam_member", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Read ...
func (h *Google_folder_iam_memberHandler) Read(externalID string) (*Google_folder_iam_member, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Read Google_folder_iam_member", "externalID", externalID)
	}
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_folder_iam_member", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_folder_iam_member{Google_folder_iam_member_id: &id}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Read Actual State Google_folder_iam_member", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Delete ...
func (h *Google_folder_iam_memberHandler) Delete(externalID string) error {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Delete Google_folder_iam_member", "externalID", externalID)
	}
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_folder_iam_member", externalID)
}

type Google_folder_iam_policy struct {
	Google_folder_iam_policy_id *string `lyra:"ignore"`

	Etag *string

	Folder string

	Policy_data string
}

var Google_folder_iam_policy_rtb = func(rtb service.ResourceTypeBuilder) {
	rtb.ProvidedAttributes(
		"google_folder_iam_policy_id",

		"etag",
	)
	rtb.ImmutableAttributes(

		"folder",
	)
}

// Google_folder_iam_policyHandler ...
type Google_folder_iam_policyHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_folder_iam_policyHandler) Create(desired *Google_folder_iam_policy) (*Google_folder_iam_policy, string, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Create Google_folder_iam_policy", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_folder_iam_policy", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Update ...
func (h *Google_folder_iam_policyHandler) Update(externalID string, desired *Google_folder_iam_policy) (*Google_folder_iam_policy, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Update Google_folder_iam_policy", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	actual, err := bridge.Update(h.provider, "google_folder_iam_policy", externalID, rc)
	if err != nil {
		return nil, err
	}
	x := &Google_folder_iam_policy{Google_folder_iam_policy_id: &externalID}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Update Actual State Google_folder_iam_policy", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Read ...
func (h *Google_folder_iam_policyHandler) Read(externalID string) (*Google_folder_iam_policy, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Read Google_folder_iam_policy", "externalID", externalID)
	}
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_folder_iam_policy", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_folder_iam_policy{Google_folder_iam_policy_id: &id}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Read Actual State Google_folder_iam_policy", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Delete ...
func (h *Google_folder_iam_policyHandler) Delete(externalID string) error {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Delete Google_folder_iam_policy", "externalID", externalID)
	}
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_folder_iam_policy", externalID)
}

type Google_folder_organization_policy_boolean_policy_168 struct {
	Enforced bool
}

type Google_folder_organization_policy_list_policy_169_allow_170 struct {
	All *bool

	Values *[]string
}

type Google_folder_organization_policy_list_policy_169_deny_171 struct {
	All *bool

	Values *[]string
}

type Google_folder_organization_policy_list_policy_169 struct {
	Allow *[]Google_folder_organization_policy_list_policy_169_allow_170

	Deny *[]Google_folder_organization_policy_list_policy_169_deny_171

	Suggested_value *string
}

type Google_folder_organization_policy_restore_policy_172 struct {
	Default bool
}

type Google_folder_organization_policy struct {
	Google_folder_organization_policy_id *string `lyra:"ignore"`

	Boolean_policy *[]Google_folder_organization_policy_boolean_policy_168

	Constraint string

	Etag *string

	Folder string

	List_policy *[]Google_folder_organization_policy_list_policy_169

	Restore_policy *[]Google_folder_organization_policy_restore_policy_172

	Update_time *string

	Version *int
}

var Google_folder_organization_policy_rtb = func(rtb service.ResourceTypeBuilder) {
	rtb.ProvidedAttributes(
		"google_folder_organization_policy_id",

		"boolean_policy",

		"etag",

		"list_policy",

		"restore_policy",

		"update_time",

		"version",
	)
	rtb.ImmutableAttributes(

		"constraint",

		"folder",
	)
}

// Google_folder_organization_policyHandler ...
type Google_folder_organization_policyHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_folder_organization_policyHandler) Create(desired *Google_folder_organization_policy) (*Google_folder_organization_policy, string, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Create Google_folder_organization_policy", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_folder_organization_policy", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Update ...
func (h *Google_folder_organization_policyHandler) Update(externalID string, desired *Google_folder_organization_policy) (*Google_folder_organization_policy, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Update Google_folder_organization_policy", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	actual, err := bridge.Update(h.provider, "google_folder_organization_policy", externalID, rc)
	if err != nil {
		return nil, err
	}
	x := &Google_folder_organization_policy{Google_folder_organization_policy_id: &externalID}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Update Actual State Google_folder_organization_policy", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Read ...
func (h *Google_folder_organization_policyHandler) Read(externalID string) (*Google_folder_organization_policy, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Read Google_folder_organization_policy", "externalID", externalID)
	}
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_folder_organization_policy", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_folder_organization_policy{Google_folder_organization_policy_id: &id}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Read Actual State Google_folder_organization_policy", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Delete ...
func (h *Google_folder_organization_policyHandler) Delete(externalID string) error {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Delete Google_folder_organization_policy", "externalID", externalID)
	}
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_folder_organization_policy", externalID)
}

type Google_kms_crypto_key struct {
	Google_kms_crypto_key_id *string `lyra:"ignore"`

	Key_ring string

	Name string

	Rotation_period *string

	Self_link *string
}

var Google_kms_crypto_key_rtb = func(rtb service.ResourceTypeBuilder) {
	rtb.ProvidedAttributes(
		"google_kms_crypto_key_id",

		"rotation_period",

		"self_link",
	)
	rtb.ImmutableAttributes(

		"key_ring",

		"name",
	)
}

// Google_kms_crypto_keyHandler ...
type Google_kms_crypto_keyHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_kms_crypto_keyHandler) Create(desired *Google_kms_crypto_key) (*Google_kms_crypto_key, string, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Create Google_kms_crypto_key", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_kms_crypto_key", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Update ...
func (h *Google_kms_crypto_keyHandler) Update(externalID string, desired *Google_kms_crypto_key) (*Google_kms_crypto_key, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Update Google_kms_crypto_key", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	actual, err := bridge.Update(h.provider, "google_kms_crypto_key", externalID, rc)
	if err != nil {
		return nil, err
	}
	x := &Google_kms_crypto_key{Google_kms_crypto_key_id: &externalID}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Update Actual State Google_kms_crypto_key", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Read ...
func (h *Google_kms_crypto_keyHandler) Read(externalID string) (*Google_kms_crypto_key, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Read Google_kms_crypto_key", "externalID", externalID)
	}
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_kms_crypto_key", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_kms_crypto_key{Google_kms_crypto_key_id: &id}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Read Actual State Google_kms_crypto_key", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Delete ...
func (h *Google_kms_crypto_keyHandler) Delete(externalID string) error {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Delete Google_kms_crypto_key", "externalID", externalID)
	}
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_kms_crypto_key", externalID)
}

type Google_kms_crypto_key_iam_binding struct {
	Google_kms_crypto_key_iam_binding_id *string `lyra:"ignore"`

	Crypto_key_id string

	Etag *string

	Members []string

	Role string
}

var Google_kms_crypto_key_iam_binding_rtb = func(rtb service.ResourceTypeBuilder) {
	rtb.ProvidedAttributes(
		"google_kms_crypto_key_iam_binding_id",

		"etag",
	)
	rtb.ImmutableAttributes(

		"crypto_key_id",

		"role",
	)
}

// Google_kms_crypto_key_iam_bindingHandler ...
type Google_kms_crypto_key_iam_bindingHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_kms_crypto_key_iam_bindingHandler) Create(desired *Google_kms_crypto_key_iam_binding) (*Google_kms_crypto_key_iam_binding, string, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Create Google_kms_crypto_key_iam_binding", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_kms_crypto_key_iam_binding", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Update ...
func (h *Google_kms_crypto_key_iam_bindingHandler) Update(externalID string, desired *Google_kms_crypto_key_iam_binding) (*Google_kms_crypto_key_iam_binding, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Update Google_kms_crypto_key_iam_binding", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	actual, err := bridge.Update(h.provider, "google_kms_crypto_key_iam_binding", externalID, rc)
	if err != nil {
		return nil, err
	}
	x := &Google_kms_crypto_key_iam_binding{Google_kms_crypto_key_iam_binding_id: &externalID}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Update Actual State Google_kms_crypto_key_iam_binding", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Read ...
func (h *Google_kms_crypto_key_iam_bindingHandler) Read(externalID string) (*Google_kms_crypto_key_iam_binding, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Read Google_kms_crypto_key_iam_binding", "externalID", externalID)
	}
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_kms_crypto_key_iam_binding", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_kms_crypto_key_iam_binding{Google_kms_crypto_key_iam_binding_id: &id}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Read Actual State Google_kms_crypto_key_iam_binding", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Delete ...
func (h *Google_kms_crypto_key_iam_bindingHandler) Delete(externalID string) error {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Delete Google_kms_crypto_key_iam_binding", "externalID", externalID)
	}
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_kms_crypto_key_iam_binding", externalID)
}

type Google_kms_crypto_key_iam_member struct {
	Google_kms_crypto_key_iam_member_id *string `lyra:"ignore"`

	Crypto_key_id string

	Etag *string

	Member string

	Role string
}

var Google_kms_crypto_key_iam_member_rtb = func(rtb service.ResourceTypeBuilder) {
	rtb.ProvidedAttributes(
		"google_kms_crypto_key_iam_member_id",

		"etag",
	)
	rtb.ImmutableAttributes(

		"crypto_key_id",

		"member",

		"role",
	)
}

// Google_kms_crypto_key_iam_memberHandler ...
type Google_kms_crypto_key_iam_memberHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_kms_crypto_key_iam_memberHandler) Create(desired *Google_kms_crypto_key_iam_member) (*Google_kms_crypto_key_iam_member, string, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Create Google_kms_crypto_key_iam_member", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_kms_crypto_key_iam_member", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Update ...
func (h *Google_kms_crypto_key_iam_memberHandler) Update(externalID string, desired *Google_kms_crypto_key_iam_member) (*Google_kms_crypto_key_iam_member, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Update Google_kms_crypto_key_iam_member", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	actual, err := bridge.Update(h.provider, "google_kms_crypto_key_iam_member", externalID, rc)
	if err != nil {
		return nil, err
	}
	x := &Google_kms_crypto_key_iam_member{Google_kms_crypto_key_iam_member_id: &externalID}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Update Actual State Google_kms_crypto_key_iam_member", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Read ...
func (h *Google_kms_crypto_key_iam_memberHandler) Read(externalID string) (*Google_kms_crypto_key_iam_member, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Read Google_kms_crypto_key_iam_member", "externalID", externalID)
	}
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_kms_crypto_key_iam_member", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_kms_crypto_key_iam_member{Google_kms_crypto_key_iam_member_id: &id}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Read Actual State Google_kms_crypto_key_iam_member", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Delete ...
func (h *Google_kms_crypto_key_iam_memberHandler) Delete(externalID string) error {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Delete Google_kms_crypto_key_iam_member", "externalID", externalID)
	}
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_kms_crypto_key_iam_member", externalID)
}

type Google_kms_key_ring struct {
	Google_kms_key_ring_id *string `lyra:"ignore"`

	Location string

	Name string

	Project *string

	Self_link *string
}

var Google_kms_key_ring_rtb = func(rtb service.ResourceTypeBuilder) {
	rtb.ProvidedAttributes(
		"google_kms_key_ring_id",

		"project",

		"self_link",
	)
	rtb.ImmutableAttributes(

		"location",

		"name",

		"project",
	)
}

// Google_kms_key_ringHandler ...
type Google_kms_key_ringHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_kms_key_ringHandler) Create(desired *Google_kms_key_ring) (*Google_kms_key_ring, string, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Create Google_kms_key_ring", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_kms_key_ring", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Update ...
func (h *Google_kms_key_ringHandler) Update(externalID string, desired *Google_kms_key_ring) (*Google_kms_key_ring, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Update Google_kms_key_ring", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	actual, err := bridge.Update(h.provider, "google_kms_key_ring", externalID, rc)
	if err != nil {
		return nil, err
	}
	x := &Google_kms_key_ring{Google_kms_key_ring_id: &externalID}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Update Actual State Google_kms_key_ring", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Read ...
func (h *Google_kms_key_ringHandler) Read(externalID string) (*Google_kms_key_ring, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Read Google_kms_key_ring", "externalID", externalID)
	}
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_kms_key_ring", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_kms_key_ring{Google_kms_key_ring_id: &id}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Read Actual State Google_kms_key_ring", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Delete ...
func (h *Google_kms_key_ringHandler) Delete(externalID string) error {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Delete Google_kms_key_ring", "externalID", externalID)
	}
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_kms_key_ring", externalID)
}

type Google_kms_key_ring_iam_binding struct {
	Google_kms_key_ring_iam_binding_id *string `lyra:"ignore"`

	Etag *string

	Key_ring_id string

	Members []string

	Role string
}

var Google_kms_key_ring_iam_binding_rtb = func(rtb service.ResourceTypeBuilder) {
	rtb.ProvidedAttributes(
		"google_kms_key_ring_iam_binding_id",

		"etag",
	)
	rtb.ImmutableAttributes(

		"key_ring_id",

		"role",
	)
}

// Google_kms_key_ring_iam_bindingHandler ...
type Google_kms_key_ring_iam_bindingHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_kms_key_ring_iam_bindingHandler) Create(desired *Google_kms_key_ring_iam_binding) (*Google_kms_key_ring_iam_binding, string, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Create Google_kms_key_ring_iam_binding", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_kms_key_ring_iam_binding", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Update ...
func (h *Google_kms_key_ring_iam_bindingHandler) Update(externalID string, desired *Google_kms_key_ring_iam_binding) (*Google_kms_key_ring_iam_binding, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Update Google_kms_key_ring_iam_binding", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	actual, err := bridge.Update(h.provider, "google_kms_key_ring_iam_binding", externalID, rc)
	if err != nil {
		return nil, err
	}
	x := &Google_kms_key_ring_iam_binding{Google_kms_key_ring_iam_binding_id: &externalID}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Update Actual State Google_kms_key_ring_iam_binding", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Read ...
func (h *Google_kms_key_ring_iam_bindingHandler) Read(externalID string) (*Google_kms_key_ring_iam_binding, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Read Google_kms_key_ring_iam_binding", "externalID", externalID)
	}
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_kms_key_ring_iam_binding", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_kms_key_ring_iam_binding{Google_kms_key_ring_iam_binding_id: &id}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Read Actual State Google_kms_key_ring_iam_binding", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Delete ...
func (h *Google_kms_key_ring_iam_bindingHandler) Delete(externalID string) error {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Delete Google_kms_key_ring_iam_binding", "externalID", externalID)
	}
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_kms_key_ring_iam_binding", externalID)
}

type Google_kms_key_ring_iam_member struct {
	Google_kms_key_ring_iam_member_id *string `lyra:"ignore"`

	Etag *string

	Key_ring_id string

	Member string

	Role string
}

var Google_kms_key_ring_iam_member_rtb = func(rtb service.ResourceTypeBuilder) {
	rtb.ProvidedAttributes(
		"google_kms_key_ring_iam_member_id",

		"etag",
	)
	rtb.ImmutableAttributes(

		"key_ring_id",

		"member",

		"role",
	)
}

// Google_kms_key_ring_iam_memberHandler ...
type Google_kms_key_ring_iam_memberHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_kms_key_ring_iam_memberHandler) Create(desired *Google_kms_key_ring_iam_member) (*Google_kms_key_ring_iam_member, string, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Create Google_kms_key_ring_iam_member", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_kms_key_ring_iam_member", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Update ...
func (h *Google_kms_key_ring_iam_memberHandler) Update(externalID string, desired *Google_kms_key_ring_iam_member) (*Google_kms_key_ring_iam_member, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Update Google_kms_key_ring_iam_member", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	actual, err := bridge.Update(h.provider, "google_kms_key_ring_iam_member", externalID, rc)
	if err != nil {
		return nil, err
	}
	x := &Google_kms_key_ring_iam_member{Google_kms_key_ring_iam_member_id: &externalID}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Update Actual State Google_kms_key_ring_iam_member", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Read ...
func (h *Google_kms_key_ring_iam_memberHandler) Read(externalID string) (*Google_kms_key_ring_iam_member, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Read Google_kms_key_ring_iam_member", "externalID", externalID)
	}
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_kms_key_ring_iam_member", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_kms_key_ring_iam_member{Google_kms_key_ring_iam_member_id: &id}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Read Actual State Google_kms_key_ring_iam_member", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Delete ...
func (h *Google_kms_key_ring_iam_memberHandler) Delete(externalID string) error {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Delete Google_kms_key_ring_iam_member", "externalID", externalID)
	}
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_kms_key_ring_iam_member", externalID)
}

type Google_kms_key_ring_iam_policy struct {
	Google_kms_key_ring_iam_policy_id *string `lyra:"ignore"`

	Etag *string

	Key_ring_id string

	Policy_data string
}

var Google_kms_key_ring_iam_policy_rtb = func(rtb service.ResourceTypeBuilder) {
	rtb.ProvidedAttributes(
		"google_kms_key_ring_iam_policy_id",

		"etag",
	)
	rtb.ImmutableAttributes(

		"key_ring_id",
	)
}

// Google_kms_key_ring_iam_policyHandler ...
type Google_kms_key_ring_iam_policyHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_kms_key_ring_iam_policyHandler) Create(desired *Google_kms_key_ring_iam_policy) (*Google_kms_key_ring_iam_policy, string, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Create Google_kms_key_ring_iam_policy", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_kms_key_ring_iam_policy", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Update ...
func (h *Google_kms_key_ring_iam_policyHandler) Update(externalID string, desired *Google_kms_key_ring_iam_policy) (*Google_kms_key_ring_iam_policy, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Update Google_kms_key_ring_iam_policy", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	actual, err := bridge.Update(h.provider, "google_kms_key_ring_iam_policy", externalID, rc)
	if err != nil {
		return nil, err
	}
	x := &Google_kms_key_ring_iam_policy{Google_kms_key_ring_iam_policy_id: &externalID}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Update Actual State Google_kms_key_ring_iam_policy", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Read ...
func (h *Google_kms_key_ring_iam_policyHandler) Read(externalID string) (*Google_kms_key_ring_iam_policy, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Read Google_kms_key_ring_iam_policy", "externalID", externalID)
	}
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_kms_key_ring_iam_policy", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_kms_key_ring_iam_policy{Google_kms_key_ring_iam_policy_id: &id}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Read Actual State Google_kms_key_ring_iam_policy", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Delete ...
func (h *Google_kms_key_ring_iam_policyHandler) Delete(externalID string) error {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Delete Google_kms_key_ring_iam_policy", "externalID", externalID)
	}
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_kms_key_ring_iam_policy", externalID)
}

type Google_logging_billing_account_exclusion struct {
	Google_logging_billing_account_exclusion_id *string `lyra:"ignore"`

	Billing_account string

	Description *string

	Disabled *bool

	Filter string

	Name string
}

var Google_logging_billing_account_exclusion_rtb = func(rtb service.ResourceTypeBuilder) {
	rtb.ProvidedAttributes(
		"google_logging_billing_account_exclusion_id",

		"description",

		"disabled",
	)
	rtb.ImmutableAttributes(

		"billing_account",

		"name",
	)
}

// Google_logging_billing_account_exclusionHandler ...
type Google_logging_billing_account_exclusionHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_logging_billing_account_exclusionHandler) Create(desired *Google_logging_billing_account_exclusion) (*Google_logging_billing_account_exclusion, string, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Create Google_logging_billing_account_exclusion", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_logging_billing_account_exclusion", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Update ...
func (h *Google_logging_billing_account_exclusionHandler) Update(externalID string, desired *Google_logging_billing_account_exclusion) (*Google_logging_billing_account_exclusion, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Update Google_logging_billing_account_exclusion", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	actual, err := bridge.Update(h.provider, "google_logging_billing_account_exclusion", externalID, rc)
	if err != nil {
		return nil, err
	}
	x := &Google_logging_billing_account_exclusion{Google_logging_billing_account_exclusion_id: &externalID}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Update Actual State Google_logging_billing_account_exclusion", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Read ...
func (h *Google_logging_billing_account_exclusionHandler) Read(externalID string) (*Google_logging_billing_account_exclusion, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Read Google_logging_billing_account_exclusion", "externalID", externalID)
	}
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_logging_billing_account_exclusion", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_logging_billing_account_exclusion{Google_logging_billing_account_exclusion_id: &id}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Read Actual State Google_logging_billing_account_exclusion", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Delete ...
func (h *Google_logging_billing_account_exclusionHandler) Delete(externalID string) error {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Delete Google_logging_billing_account_exclusion", "externalID", externalID)
	}
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_logging_billing_account_exclusion", externalID)
}

type Google_logging_billing_account_sink struct {
	Google_logging_billing_account_sink_id *string `lyra:"ignore"`

	Billing_account string

	Destination string

	Filter *string

	Name string

	Writer_identity *string
}

var Google_logging_billing_account_sink_rtb = func(rtb service.ResourceTypeBuilder) {
	rtb.ProvidedAttributes(
		"google_logging_billing_account_sink_id",

		"filter",

		"writer_identity",
	)
	rtb.ImmutableAttributes(

		"billing_account",

		"name",
	)
}

// Google_logging_billing_account_sinkHandler ...
type Google_logging_billing_account_sinkHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_logging_billing_account_sinkHandler) Create(desired *Google_logging_billing_account_sink) (*Google_logging_billing_account_sink, string, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Create Google_logging_billing_account_sink", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_logging_billing_account_sink", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Update ...
func (h *Google_logging_billing_account_sinkHandler) Update(externalID string, desired *Google_logging_billing_account_sink) (*Google_logging_billing_account_sink, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Update Google_logging_billing_account_sink", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	actual, err := bridge.Update(h.provider, "google_logging_billing_account_sink", externalID, rc)
	if err != nil {
		return nil, err
	}
	x := &Google_logging_billing_account_sink{Google_logging_billing_account_sink_id: &externalID}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Update Actual State Google_logging_billing_account_sink", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Read ...
func (h *Google_logging_billing_account_sinkHandler) Read(externalID string) (*Google_logging_billing_account_sink, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Read Google_logging_billing_account_sink", "externalID", externalID)
	}
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_logging_billing_account_sink", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_logging_billing_account_sink{Google_logging_billing_account_sink_id: &id}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Read Actual State Google_logging_billing_account_sink", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Delete ...
func (h *Google_logging_billing_account_sinkHandler) Delete(externalID string) error {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Delete Google_logging_billing_account_sink", "externalID", externalID)
	}
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_logging_billing_account_sink", externalID)
}

type Google_logging_folder_exclusion struct {
	Google_logging_folder_exclusion_id *string `lyra:"ignore"`

	Description *string

	Disabled *bool

	Filter string

	Folder string

	Name string
}

var Google_logging_folder_exclusion_rtb = func(rtb service.ResourceTypeBuilder) {
	rtb.ProvidedAttributes(
		"google_logging_folder_exclusion_id",

		"description",

		"disabled",
	)
	rtb.ImmutableAttributes(

		"folder",

		"name",
	)
}

// Google_logging_folder_exclusionHandler ...
type Google_logging_folder_exclusionHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_logging_folder_exclusionHandler) Create(desired *Google_logging_folder_exclusion) (*Google_logging_folder_exclusion, string, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Create Google_logging_folder_exclusion", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_logging_folder_exclusion", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Update ...
func (h *Google_logging_folder_exclusionHandler) Update(externalID string, desired *Google_logging_folder_exclusion) (*Google_logging_folder_exclusion, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Update Google_logging_folder_exclusion", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	actual, err := bridge.Update(h.provider, "google_logging_folder_exclusion", externalID, rc)
	if err != nil {
		return nil, err
	}
	x := &Google_logging_folder_exclusion{Google_logging_folder_exclusion_id: &externalID}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Update Actual State Google_logging_folder_exclusion", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Read ...
func (h *Google_logging_folder_exclusionHandler) Read(externalID string) (*Google_logging_folder_exclusion, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Read Google_logging_folder_exclusion", "externalID", externalID)
	}
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_logging_folder_exclusion", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_logging_folder_exclusion{Google_logging_folder_exclusion_id: &id}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Read Actual State Google_logging_folder_exclusion", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Delete ...
func (h *Google_logging_folder_exclusionHandler) Delete(externalID string) error {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Delete Google_logging_folder_exclusion", "externalID", externalID)
	}
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_logging_folder_exclusion", externalID)
}

type Google_logging_folder_sink struct {
	Google_logging_folder_sink_id *string `lyra:"ignore"`

	Destination string

	Filter *string

	Folder string

	Include_children *bool

	Name string

	Writer_identity *string
}

var Google_logging_folder_sink_rtb = func(rtb service.ResourceTypeBuilder) {
	rtb.ProvidedAttributes(
		"google_logging_folder_sink_id",

		"filter",

		"include_children",

		"writer_identity",
	)
	rtb.ImmutableAttributes(

		"folder",

		"include_children",

		"name",
	)
}

// Google_logging_folder_sinkHandler ...
type Google_logging_folder_sinkHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_logging_folder_sinkHandler) Create(desired *Google_logging_folder_sink) (*Google_logging_folder_sink, string, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Create Google_logging_folder_sink", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_logging_folder_sink", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Update ...
func (h *Google_logging_folder_sinkHandler) Update(externalID string, desired *Google_logging_folder_sink) (*Google_logging_folder_sink, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Update Google_logging_folder_sink", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	actual, err := bridge.Update(h.provider, "google_logging_folder_sink", externalID, rc)
	if err != nil {
		return nil, err
	}
	x := &Google_logging_folder_sink{Google_logging_folder_sink_id: &externalID}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Update Actual State Google_logging_folder_sink", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Read ...
func (h *Google_logging_folder_sinkHandler) Read(externalID string) (*Google_logging_folder_sink, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Read Google_logging_folder_sink", "externalID", externalID)
	}
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_logging_folder_sink", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_logging_folder_sink{Google_logging_folder_sink_id: &id}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Read Actual State Google_logging_folder_sink", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Delete ...
func (h *Google_logging_folder_sinkHandler) Delete(externalID string) error {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Delete Google_logging_folder_sink", "externalID", externalID)
	}
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_logging_folder_sink", externalID)
}

type Google_logging_organization_exclusion struct {
	Google_logging_organization_exclusion_id *string `lyra:"ignore"`

	Description *string

	Disabled *bool

	Filter string

	Name string

	Org_id string
}

var Google_logging_organization_exclusion_rtb = func(rtb service.ResourceTypeBuilder) {
	rtb.ProvidedAttributes(
		"google_logging_organization_exclusion_id",

		"description",

		"disabled",
	)
	rtb.ImmutableAttributes(

		"name",

		"org_id",
	)
}

// Google_logging_organization_exclusionHandler ...
type Google_logging_organization_exclusionHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_logging_organization_exclusionHandler) Create(desired *Google_logging_organization_exclusion) (*Google_logging_organization_exclusion, string, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Create Google_logging_organization_exclusion", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_logging_organization_exclusion", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Update ...
func (h *Google_logging_organization_exclusionHandler) Update(externalID string, desired *Google_logging_organization_exclusion) (*Google_logging_organization_exclusion, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Update Google_logging_organization_exclusion", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	actual, err := bridge.Update(h.provider, "google_logging_organization_exclusion", externalID, rc)
	if err != nil {
		return nil, err
	}
	x := &Google_logging_organization_exclusion{Google_logging_organization_exclusion_id: &externalID}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Update Actual State Google_logging_organization_exclusion", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Read ...
func (h *Google_logging_organization_exclusionHandler) Read(externalID string) (*Google_logging_organization_exclusion, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Read Google_logging_organization_exclusion", "externalID", externalID)
	}
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_logging_organization_exclusion", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_logging_organization_exclusion{Google_logging_organization_exclusion_id: &id}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Read Actual State Google_logging_organization_exclusion", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Delete ...
func (h *Google_logging_organization_exclusionHandler) Delete(externalID string) error {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Delete Google_logging_organization_exclusion", "externalID", externalID)
	}
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_logging_organization_exclusion", externalID)
}

type Google_logging_organization_sink struct {
	Google_logging_organization_sink_id *string `lyra:"ignore"`

	Destination string

	Filter *string

	Include_children *bool

	Name string

	Org_id string

	Writer_identity *string
}

var Google_logging_organization_sink_rtb = func(rtb service.ResourceTypeBuilder) {
	rtb.ProvidedAttributes(
		"google_logging_organization_sink_id",

		"filter",

		"include_children",

		"writer_identity",
	)
	rtb.ImmutableAttributes(

		"include_children",

		"name",
	)
}

// Google_logging_organization_sinkHandler ...
type Google_logging_organization_sinkHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_logging_organization_sinkHandler) Create(desired *Google_logging_organization_sink) (*Google_logging_organization_sink, string, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Create Google_logging_organization_sink", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_logging_organization_sink", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Update ...
func (h *Google_logging_organization_sinkHandler) Update(externalID string, desired *Google_logging_organization_sink) (*Google_logging_organization_sink, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Update Google_logging_organization_sink", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	actual, err := bridge.Update(h.provider, "google_logging_organization_sink", externalID, rc)
	if err != nil {
		return nil, err
	}
	x := &Google_logging_organization_sink{Google_logging_organization_sink_id: &externalID}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Update Actual State Google_logging_organization_sink", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Read ...
func (h *Google_logging_organization_sinkHandler) Read(externalID string) (*Google_logging_organization_sink, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Read Google_logging_organization_sink", "externalID", externalID)
	}
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_logging_organization_sink", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_logging_organization_sink{Google_logging_organization_sink_id: &id}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Read Actual State Google_logging_organization_sink", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Delete ...
func (h *Google_logging_organization_sinkHandler) Delete(externalID string) error {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Delete Google_logging_organization_sink", "externalID", externalID)
	}
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_logging_organization_sink", externalID)
}

type Google_logging_project_exclusion struct {
	Google_logging_project_exclusion_id *string `lyra:"ignore"`

	Description *string

	Disabled *bool

	Filter string

	Name string

	Project *string
}

var Google_logging_project_exclusion_rtb = func(rtb service.ResourceTypeBuilder) {
	rtb.ProvidedAttributes(
		"google_logging_project_exclusion_id",

		"description",

		"disabled",

		"project",
	)
	rtb.ImmutableAttributes(

		"name",

		"project",
	)
}

// Google_logging_project_exclusionHandler ...
type Google_logging_project_exclusionHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_logging_project_exclusionHandler) Create(desired *Google_logging_project_exclusion) (*Google_logging_project_exclusion, string, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Create Google_logging_project_exclusion", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_logging_project_exclusion", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Update ...
func (h *Google_logging_project_exclusionHandler) Update(externalID string, desired *Google_logging_project_exclusion) (*Google_logging_project_exclusion, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Update Google_logging_project_exclusion", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	actual, err := bridge.Update(h.provider, "google_logging_project_exclusion", externalID, rc)
	if err != nil {
		return nil, err
	}
	x := &Google_logging_project_exclusion{Google_logging_project_exclusion_id: &externalID}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Update Actual State Google_logging_project_exclusion", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Read ...
func (h *Google_logging_project_exclusionHandler) Read(externalID string) (*Google_logging_project_exclusion, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Read Google_logging_project_exclusion", "externalID", externalID)
	}
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_logging_project_exclusion", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_logging_project_exclusion{Google_logging_project_exclusion_id: &id}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Read Actual State Google_logging_project_exclusion", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Delete ...
func (h *Google_logging_project_exclusionHandler) Delete(externalID string) error {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Delete Google_logging_project_exclusion", "externalID", externalID)
	}
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_logging_project_exclusion", externalID)
}

type Google_logging_project_sink struct {
	Google_logging_project_sink_id *string `lyra:"ignore"`

	Destination string

	Filter *string

	Name string

	Project *string

	Unique_writer_identity *bool

	Writer_identity *string
}

var Google_logging_project_sink_rtb = func(rtb service.ResourceTypeBuilder) {
	rtb.ProvidedAttributes(
		"google_logging_project_sink_id",

		"filter",

		"project",

		"unique_writer_identity",

		"writer_identity",
	)
	rtb.ImmutableAttributes(

		"name",

		"project",

		"unique_writer_identity",
	)
}

// Google_logging_project_sinkHandler ...
type Google_logging_project_sinkHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_logging_project_sinkHandler) Create(desired *Google_logging_project_sink) (*Google_logging_project_sink, string, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Create Google_logging_project_sink", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_logging_project_sink", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Update ...
func (h *Google_logging_project_sinkHandler) Update(externalID string, desired *Google_logging_project_sink) (*Google_logging_project_sink, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Update Google_logging_project_sink", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	actual, err := bridge.Update(h.provider, "google_logging_project_sink", externalID, rc)
	if err != nil {
		return nil, err
	}
	x := &Google_logging_project_sink{Google_logging_project_sink_id: &externalID}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Update Actual State Google_logging_project_sink", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Read ...
func (h *Google_logging_project_sinkHandler) Read(externalID string) (*Google_logging_project_sink, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Read Google_logging_project_sink", "externalID", externalID)
	}
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_logging_project_sink", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_logging_project_sink{Google_logging_project_sink_id: &id}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Read Actual State Google_logging_project_sink", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Delete ...
func (h *Google_logging_project_sinkHandler) Delete(externalID string) error {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Delete Google_logging_project_sink", "externalID", externalID)
	}
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_logging_project_sink", externalID)
}

type Google_monitoring_alert_policy_conditions_173_condition_absent_174_aggregations_175 struct {
	Alignment_period *string

	Cross_series_reducer *string

	Group_by_fields *[]string

	Per_series_aligner *string
}

type Google_monitoring_alert_policy_conditions_173_condition_absent_174_trigger_176 struct {
	Count *int

	Percent *float64
}

type Google_monitoring_alert_policy_conditions_173_condition_absent_174 struct {
	Aggregations *[]Google_monitoring_alert_policy_conditions_173_condition_absent_174_aggregations_175

	Duration string

	Filter *string

	Trigger *[]Google_monitoring_alert_policy_conditions_173_condition_absent_174_trigger_176
}

type Google_monitoring_alert_policy_conditions_173_condition_threshold_177_aggregations_178 struct {
	Alignment_period *string

	Cross_series_reducer *string

	Group_by_fields *[]string

	Per_series_aligner *string
}

type Google_monitoring_alert_policy_conditions_173_condition_threshold_177_denominator_aggregations_179 struct {
	Alignment_period *string

	Cross_series_reducer *string

	Group_by_fields *[]string

	Per_series_aligner *string
}

type Google_monitoring_alert_policy_conditions_173_condition_threshold_177_trigger_180 struct {
	Count *int

	Percent *float64
}

type Google_monitoring_alert_policy_conditions_173_condition_threshold_177 struct {
	Aggregations *[]Google_monitoring_alert_policy_conditions_173_condition_threshold_177_aggregations_178

	Comparison string

	Denominator_aggregations *[]Google_monitoring_alert_policy_conditions_173_condition_threshold_177_denominator_aggregations_179

	Denominator_filter *string

	Duration string

	Filter *string

	Threshold_value *float64

	Trigger *[]Google_monitoring_alert_policy_conditions_173_condition_threshold_177_trigger_180
}

type Google_monitoring_alert_policy_conditions_173 struct {
	Condition_absent *[]Google_monitoring_alert_policy_conditions_173_condition_absent_174

	Condition_threshold *[]Google_monitoring_alert_policy_conditions_173_condition_threshold_177

	Display_name string

	Name *string
}

type Google_monitoring_alert_policy_creation_record_181 struct {
	Mutate_time *string

	Mutated_by *string
}

type Google_monitoring_alert_policy struct {
	Google_monitoring_alert_policy_id *string `lyra:"ignore"`

	Combiner string

	Conditions []Google_monitoring_alert_policy_conditions_173

	Creation_record *[]Google_monitoring_alert_policy_creation_record_181

	Display_name string

	Enabled bool

	Labels *[]string

	Name *string

	Notification_channels *[]string

	Project *string
}

var Google_monitoring_alert_policy_rtb = func(rtb service.ResourceTypeBuilder) {
	rtb.ProvidedAttributes(
		"google_monitoring_alert_policy_id",

		"creation_record",

		"labels",

		"name",

		"notification_channels",

		"project",
	)
	rtb.ImmutableAttributes(

		"project",
	)
}

// Google_monitoring_alert_policyHandler ...
type Google_monitoring_alert_policyHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_monitoring_alert_policyHandler) Create(desired *Google_monitoring_alert_policy) (*Google_monitoring_alert_policy, string, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Create Google_monitoring_alert_policy", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_monitoring_alert_policy", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Update ...
func (h *Google_monitoring_alert_policyHandler) Update(externalID string, desired *Google_monitoring_alert_policy) (*Google_monitoring_alert_policy, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Update Google_monitoring_alert_policy", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	actual, err := bridge.Update(h.provider, "google_monitoring_alert_policy", externalID, rc)
	if err != nil {
		return nil, err
	}
	x := &Google_monitoring_alert_policy{Google_monitoring_alert_policy_id: &externalID}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Update Actual State Google_monitoring_alert_policy", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Read ...
func (h *Google_monitoring_alert_policyHandler) Read(externalID string) (*Google_monitoring_alert_policy, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Read Google_monitoring_alert_policy", "externalID", externalID)
	}
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_monitoring_alert_policy", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_monitoring_alert_policy{Google_monitoring_alert_policy_id: &id}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Read Actual State Google_monitoring_alert_policy", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Delete ...
func (h *Google_monitoring_alert_policyHandler) Delete(externalID string) error {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Delete Google_monitoring_alert_policy", "externalID", externalID)
	}
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_monitoring_alert_policy", externalID)
}

type Google_monitoring_group struct {
	Google_monitoring_group_id *string `lyra:"ignore"`

	Display_name string

	Filter string

	Is_cluster *bool

	Name *string

	Parent_name *string

	Project *string
}

var Google_monitoring_group_rtb = func(rtb service.ResourceTypeBuilder) {
	rtb.ProvidedAttributes(
		"google_monitoring_group_id",

		"is_cluster",

		"name",

		"parent_name",

		"project",
	)
	rtb.ImmutableAttributes(

		"project",
	)
}

// Google_monitoring_groupHandler ...
type Google_monitoring_groupHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_monitoring_groupHandler) Create(desired *Google_monitoring_group) (*Google_monitoring_group, string, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Create Google_monitoring_group", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_monitoring_group", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Update ...
func (h *Google_monitoring_groupHandler) Update(externalID string, desired *Google_monitoring_group) (*Google_monitoring_group, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Update Google_monitoring_group", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	actual, err := bridge.Update(h.provider, "google_monitoring_group", externalID, rc)
	if err != nil {
		return nil, err
	}
	x := &Google_monitoring_group{Google_monitoring_group_id: &externalID}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Update Actual State Google_monitoring_group", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Read ...
func (h *Google_monitoring_groupHandler) Read(externalID string) (*Google_monitoring_group, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Read Google_monitoring_group", "externalID", externalID)
	}
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_monitoring_group", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_monitoring_group{Google_monitoring_group_id: &id}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Read Actual State Google_monitoring_group", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Delete ...
func (h *Google_monitoring_groupHandler) Delete(externalID string) error {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Delete Google_monitoring_group", "externalID", externalID)
	}
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_monitoring_group", externalID)
}

type Google_monitoring_notification_channel struct {
	Google_monitoring_notification_channel_id *string `lyra:"ignore"`

	Description *string

	Display_name string

	Enabled *bool

	Labels *map[string]string

	Name *string

	Project *string

	Type string

	User_labels *map[string]string

	Verification_status *string
}

var Google_monitoring_notification_channel_rtb = func(rtb service.ResourceTypeBuilder) {
	rtb.ProvidedAttributes(
		"google_monitoring_notification_channel_id",

		"description",

		"enabled",

		"labels",

		"name",

		"project",

		"user_labels",

		"verification_status",
	)
	rtb.ImmutableAttributes(

		"project",
	)
}

// Google_monitoring_notification_channelHandler ...
type Google_monitoring_notification_channelHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_monitoring_notification_channelHandler) Create(desired *Google_monitoring_notification_channel) (*Google_monitoring_notification_channel, string, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Create Google_monitoring_notification_channel", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_monitoring_notification_channel", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Update ...
func (h *Google_monitoring_notification_channelHandler) Update(externalID string, desired *Google_monitoring_notification_channel) (*Google_monitoring_notification_channel, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Update Google_monitoring_notification_channel", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	actual, err := bridge.Update(h.provider, "google_monitoring_notification_channel", externalID, rc)
	if err != nil {
		return nil, err
	}
	x := &Google_monitoring_notification_channel{Google_monitoring_notification_channel_id: &externalID}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Update Actual State Google_monitoring_notification_channel", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Read ...
func (h *Google_monitoring_notification_channelHandler) Read(externalID string) (*Google_monitoring_notification_channel, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Read Google_monitoring_notification_channel", "externalID", externalID)
	}
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_monitoring_notification_channel", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_monitoring_notification_channel{Google_monitoring_notification_channel_id: &id}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Read Actual State Google_monitoring_notification_channel", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Delete ...
func (h *Google_monitoring_notification_channelHandler) Delete(externalID string) error {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Delete Google_monitoring_notification_channel", "externalID", externalID)
	}
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_monitoring_notification_channel", externalID)
}

type Google_monitoring_uptime_check_config_content_matchers_182 struct {
	Content *string
}

type Google_monitoring_uptime_check_config_http_check_183_auth_info_184 struct {
	Password *string

	Username *string
}

type Google_monitoring_uptime_check_config_http_check_183 struct {
	Auth_info *[]Google_monitoring_uptime_check_config_http_check_183_auth_info_184

	Headers *map[string]string

	Mask_headers *bool

	Path *string

	Port *int

	Use_ssl *bool
}

type Google_monitoring_uptime_check_config_internal_checkers_185 struct {
	Display_name *string

	Gcp_zone *string

	Name *string

	Network *string

	Peer_project_id *string
}

type Google_monitoring_uptime_check_config_monitored_resource_186 struct {
	Labels map[string]string

	Type string
}

type Google_monitoring_uptime_check_config_resource_group_187 struct {
	Group_id *string

	Resource_type *string
}

type Google_monitoring_uptime_check_config_tcp_check_188 struct {
	Port int
}

type Google_monitoring_uptime_check_config struct {
	Google_monitoring_uptime_check_config_id *string `lyra:"ignore"`

	Content_matchers *[]Google_monitoring_uptime_check_config_content_matchers_182

	Display_name string

	Http_check *[]Google_monitoring_uptime_check_config_http_check_183

	Internal_checkers *[]Google_monitoring_uptime_check_config_internal_checkers_185

	Is_internal *bool

	Monitored_resource *[]Google_monitoring_uptime_check_config_monitored_resource_186

	Name *string

	Period *string

	Project *string

	Resource_group *[]Google_monitoring_uptime_check_config_resource_group_187

	Selected_regions *[]string

	Tcp_check *[]Google_monitoring_uptime_check_config_tcp_check_188

	Timeout string
}

var Google_monitoring_uptime_check_config_rtb = func(rtb service.ResourceTypeBuilder) {
	rtb.ProvidedAttributes(
		"google_monitoring_uptime_check_config_id",

		"content_matchers",

		"http_check",

		"internal_checkers",

		"is_internal",

		"monitored_resource",

		"name",

		"period",

		"project",

		"resource_group",

		"selected_regions",

		"tcp_check",
	)
	rtb.ImmutableAttributes(

		"project",
	)
}

// Google_monitoring_uptime_check_configHandler ...
type Google_monitoring_uptime_check_configHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_monitoring_uptime_check_configHandler) Create(desired *Google_monitoring_uptime_check_config) (*Google_monitoring_uptime_check_config, string, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Create Google_monitoring_uptime_check_config", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_monitoring_uptime_check_config", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Update ...
func (h *Google_monitoring_uptime_check_configHandler) Update(externalID string, desired *Google_monitoring_uptime_check_config) (*Google_monitoring_uptime_check_config, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Update Google_monitoring_uptime_check_config", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	actual, err := bridge.Update(h.provider, "google_monitoring_uptime_check_config", externalID, rc)
	if err != nil {
		return nil, err
	}
	x := &Google_monitoring_uptime_check_config{Google_monitoring_uptime_check_config_id: &externalID}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Update Actual State Google_monitoring_uptime_check_config", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Read ...
func (h *Google_monitoring_uptime_check_configHandler) Read(externalID string) (*Google_monitoring_uptime_check_config, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Read Google_monitoring_uptime_check_config", "externalID", externalID)
	}
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_monitoring_uptime_check_config", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_monitoring_uptime_check_config{Google_monitoring_uptime_check_config_id: &id}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Read Actual State Google_monitoring_uptime_check_config", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Delete ...
func (h *Google_monitoring_uptime_check_configHandler) Delete(externalID string) error {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Delete Google_monitoring_uptime_check_config", "externalID", externalID)
	}
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_monitoring_uptime_check_config", externalID)
}

type Google_organization_iam_binding struct {
	Google_organization_iam_binding_id *string `lyra:"ignore"`

	Etag *string

	Members []string

	Org_id string

	Role string
}

var Google_organization_iam_binding_rtb = func(rtb service.ResourceTypeBuilder) {
	rtb.ProvidedAttributes(
		"google_organization_iam_binding_id",

		"etag",
	)
	rtb.ImmutableAttributes(

		"org_id",

		"role",
	)
}

// Google_organization_iam_bindingHandler ...
type Google_organization_iam_bindingHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_organization_iam_bindingHandler) Create(desired *Google_organization_iam_binding) (*Google_organization_iam_binding, string, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Create Google_organization_iam_binding", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_organization_iam_binding", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Update ...
func (h *Google_organization_iam_bindingHandler) Update(externalID string, desired *Google_organization_iam_binding) (*Google_organization_iam_binding, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Update Google_organization_iam_binding", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	actual, err := bridge.Update(h.provider, "google_organization_iam_binding", externalID, rc)
	if err != nil {
		return nil, err
	}
	x := &Google_organization_iam_binding{Google_organization_iam_binding_id: &externalID}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Update Actual State Google_organization_iam_binding", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Read ...
func (h *Google_organization_iam_bindingHandler) Read(externalID string) (*Google_organization_iam_binding, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Read Google_organization_iam_binding", "externalID", externalID)
	}
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_organization_iam_binding", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_organization_iam_binding{Google_organization_iam_binding_id: &id}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Read Actual State Google_organization_iam_binding", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Delete ...
func (h *Google_organization_iam_bindingHandler) Delete(externalID string) error {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Delete Google_organization_iam_binding", "externalID", externalID)
	}
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_organization_iam_binding", externalID)
}

type Google_organization_iam_custom_role struct {
	Google_organization_iam_custom_role_id *string `lyra:"ignore"`

	Deleted *bool

	Description *string

	Org_id string

	Permissions []string

	Role_id string

	Stage *string

	Title string
}

var Google_organization_iam_custom_role_rtb = func(rtb service.ResourceTypeBuilder) {
	rtb.ProvidedAttributes(
		"google_organization_iam_custom_role_id",

		"deleted",

		"description",

		"stage",
	)
	rtb.ImmutableAttributes(

		"org_id",

		"role_id",
	)
}

// Google_organization_iam_custom_roleHandler ...
type Google_organization_iam_custom_roleHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_organization_iam_custom_roleHandler) Create(desired *Google_organization_iam_custom_role) (*Google_organization_iam_custom_role, string, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Create Google_organization_iam_custom_role", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_organization_iam_custom_role", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Update ...
func (h *Google_organization_iam_custom_roleHandler) Update(externalID string, desired *Google_organization_iam_custom_role) (*Google_organization_iam_custom_role, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Update Google_organization_iam_custom_role", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	actual, err := bridge.Update(h.provider, "google_organization_iam_custom_role", externalID, rc)
	if err != nil {
		return nil, err
	}
	x := &Google_organization_iam_custom_role{Google_organization_iam_custom_role_id: &externalID}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Update Actual State Google_organization_iam_custom_role", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Read ...
func (h *Google_organization_iam_custom_roleHandler) Read(externalID string) (*Google_organization_iam_custom_role, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Read Google_organization_iam_custom_role", "externalID", externalID)
	}
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_organization_iam_custom_role", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_organization_iam_custom_role{Google_organization_iam_custom_role_id: &id}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Read Actual State Google_organization_iam_custom_role", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Delete ...
func (h *Google_organization_iam_custom_roleHandler) Delete(externalID string) error {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Delete Google_organization_iam_custom_role", "externalID", externalID)
	}
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_organization_iam_custom_role", externalID)
}

type Google_organization_iam_member struct {
	Google_organization_iam_member_id *string `lyra:"ignore"`

	Etag *string

	Member string

	Org_id string

	Role string
}

var Google_organization_iam_member_rtb = func(rtb service.ResourceTypeBuilder) {
	rtb.ProvidedAttributes(
		"google_organization_iam_member_id",

		"etag",
	)
	rtb.ImmutableAttributes(

		"member",

		"org_id",

		"role",
	)
}

// Google_organization_iam_memberHandler ...
type Google_organization_iam_memberHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_organization_iam_memberHandler) Create(desired *Google_organization_iam_member) (*Google_organization_iam_member, string, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Create Google_organization_iam_member", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_organization_iam_member", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Update ...
func (h *Google_organization_iam_memberHandler) Update(externalID string, desired *Google_organization_iam_member) (*Google_organization_iam_member, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Update Google_organization_iam_member", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	actual, err := bridge.Update(h.provider, "google_organization_iam_member", externalID, rc)
	if err != nil {
		return nil, err
	}
	x := &Google_organization_iam_member{Google_organization_iam_member_id: &externalID}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Update Actual State Google_organization_iam_member", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Read ...
func (h *Google_organization_iam_memberHandler) Read(externalID string) (*Google_organization_iam_member, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Read Google_organization_iam_member", "externalID", externalID)
	}
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_organization_iam_member", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_organization_iam_member{Google_organization_iam_member_id: &id}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Read Actual State Google_organization_iam_member", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Delete ...
func (h *Google_organization_iam_memberHandler) Delete(externalID string) error {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Delete Google_organization_iam_member", "externalID", externalID)
	}
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_organization_iam_member", externalID)
}

type Google_organization_iam_policy struct {
	Google_organization_iam_policy_id *string `lyra:"ignore"`

	Etag *string

	Org_id string

	Policy_data string
}

var Google_organization_iam_policy_rtb = func(rtb service.ResourceTypeBuilder) {
	rtb.ProvidedAttributes(
		"google_organization_iam_policy_id",

		"etag",
	)
	rtb.ImmutableAttributes(

		"org_id",
	)
}

// Google_organization_iam_policyHandler ...
type Google_organization_iam_policyHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_organization_iam_policyHandler) Create(desired *Google_organization_iam_policy) (*Google_organization_iam_policy, string, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Create Google_organization_iam_policy", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_organization_iam_policy", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Update ...
func (h *Google_organization_iam_policyHandler) Update(externalID string, desired *Google_organization_iam_policy) (*Google_organization_iam_policy, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Update Google_organization_iam_policy", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	actual, err := bridge.Update(h.provider, "google_organization_iam_policy", externalID, rc)
	if err != nil {
		return nil, err
	}
	x := &Google_organization_iam_policy{Google_organization_iam_policy_id: &externalID}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Update Actual State Google_organization_iam_policy", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Read ...
func (h *Google_organization_iam_policyHandler) Read(externalID string) (*Google_organization_iam_policy, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Read Google_organization_iam_policy", "externalID", externalID)
	}
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_organization_iam_policy", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_organization_iam_policy{Google_organization_iam_policy_id: &id}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Read Actual State Google_organization_iam_policy", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Delete ...
func (h *Google_organization_iam_policyHandler) Delete(externalID string) error {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Delete Google_organization_iam_policy", "externalID", externalID)
	}
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_organization_iam_policy", externalID)
}

type Google_organization_policy_boolean_policy_189 struct {
	Enforced bool
}

type Google_organization_policy_list_policy_190_allow_191 struct {
	All *bool

	Values *[]string
}

type Google_organization_policy_list_policy_190_deny_192 struct {
	All *bool

	Values *[]string
}

type Google_organization_policy_list_policy_190 struct {
	Allow *[]Google_organization_policy_list_policy_190_allow_191

	Deny *[]Google_organization_policy_list_policy_190_deny_192

	Suggested_value *string
}

type Google_organization_policy_restore_policy_193 struct {
	Default bool
}

type Google_organization_policy struct {
	Google_organization_policy_id *string `lyra:"ignore"`

	Boolean_policy *[]Google_organization_policy_boolean_policy_189

	Constraint string

	Etag *string

	List_policy *[]Google_organization_policy_list_policy_190

	Org_id string

	Restore_policy *[]Google_organization_policy_restore_policy_193

	Update_time *string

	Version *int
}

var Google_organization_policy_rtb = func(rtb service.ResourceTypeBuilder) {
	rtb.ProvidedAttributes(
		"google_organization_policy_id",

		"boolean_policy",

		"etag",

		"list_policy",

		"restore_policy",

		"update_time",

		"version",
	)
	rtb.ImmutableAttributes(

		"constraint",

		"org_id",
	)
}

// Google_organization_policyHandler ...
type Google_organization_policyHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_organization_policyHandler) Create(desired *Google_organization_policy) (*Google_organization_policy, string, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Create Google_organization_policy", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_organization_policy", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Update ...
func (h *Google_organization_policyHandler) Update(externalID string, desired *Google_organization_policy) (*Google_organization_policy, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Update Google_organization_policy", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	actual, err := bridge.Update(h.provider, "google_organization_policy", externalID, rc)
	if err != nil {
		return nil, err
	}
	x := &Google_organization_policy{Google_organization_policy_id: &externalID}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Update Actual State Google_organization_policy", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Read ...
func (h *Google_organization_policyHandler) Read(externalID string) (*Google_organization_policy, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Read Google_organization_policy", "externalID", externalID)
	}
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_organization_policy", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_organization_policy{Google_organization_policy_id: &id}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Read Actual State Google_organization_policy", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Delete ...
func (h *Google_organization_policyHandler) Delete(externalID string) error {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Delete Google_organization_policy", "externalID", externalID)
	}
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_organization_policy", externalID)
}

type Google_project_app_engine_194_feature_settings_195 struct {
	Split_health_checks *bool
}

type Google_project_app_engine_194_url_dispatch_rule_196 struct {
	Domain *string

	Path *string

	Service *string
}

type Google_project_app_engine_194 struct {
	Auth_domain *string

	Code_bucket *string

	Default_bucket *string

	Default_hostname *string

	Feature_settings *[]Google_project_app_engine_194_feature_settings_195

	Gcr_domain *string

	Location_id *string

	Name *string

	Serving_status *string

	Url_dispatch_rule *[]Google_project_app_engine_194_url_dispatch_rule_196
}

type Google_project struct {
	Google_project_id *string `lyra:"ignore"`

	App_engine *[]Google_project_app_engine_194

	Auto_create_network *bool

	Billing_account *string

	Folder_id *string

	Labels *map[string]string

	Name string

	Number *string

	Org_id *string

	Policy_data *string

	Policy_etag *string

	Project_id string

	Skip_delete *bool
}

var Google_project_rtb = func(rtb service.ResourceTypeBuilder) {
	rtb.ProvidedAttributes(
		"google_project_id",

		"app_engine",

		"auto_create_network",

		"billing_account",

		"folder_id",

		"labels",

		"number",

		"org_id",

		"policy_data",

		"policy_etag",

		"skip_delete",
	)
	rtb.ImmutableAttributes(

		"project_id",
	)
}

// Google_projectHandler ...
type Google_projectHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_projectHandler) Create(desired *Google_project) (*Google_project, string, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Create Google_project", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_project", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Update ...
func (h *Google_projectHandler) Update(externalID string, desired *Google_project) (*Google_project, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Update Google_project", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	actual, err := bridge.Update(h.provider, "google_project", externalID, rc)
	if err != nil {
		return nil, err
	}
	x := &Google_project{Google_project_id: &externalID}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Update Actual State Google_project", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Read ...
func (h *Google_projectHandler) Read(externalID string) (*Google_project, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Read Google_project", "externalID", externalID)
	}
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_project", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_project{Google_project_id: &id}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Read Actual State Google_project", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Delete ...
func (h *Google_projectHandler) Delete(externalID string) error {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Delete Google_project", "externalID", externalID)
	}
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_project", externalID)
}

type Google_project_iam_binding struct {
	Google_project_iam_binding_id *string `lyra:"ignore"`

	Etag *string

	Members []string

	Project *string

	Role string
}

var Google_project_iam_binding_rtb = func(rtb service.ResourceTypeBuilder) {
	rtb.ProvidedAttributes(
		"google_project_iam_binding_id",

		"etag",

		"project",
	)
	rtb.ImmutableAttributes(

		"project",

		"role",
	)
}

// Google_project_iam_bindingHandler ...
type Google_project_iam_bindingHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_project_iam_bindingHandler) Create(desired *Google_project_iam_binding) (*Google_project_iam_binding, string, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Create Google_project_iam_binding", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_project_iam_binding", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Update ...
func (h *Google_project_iam_bindingHandler) Update(externalID string, desired *Google_project_iam_binding) (*Google_project_iam_binding, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Update Google_project_iam_binding", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	actual, err := bridge.Update(h.provider, "google_project_iam_binding", externalID, rc)
	if err != nil {
		return nil, err
	}
	x := &Google_project_iam_binding{Google_project_iam_binding_id: &externalID}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Update Actual State Google_project_iam_binding", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Read ...
func (h *Google_project_iam_bindingHandler) Read(externalID string) (*Google_project_iam_binding, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Read Google_project_iam_binding", "externalID", externalID)
	}
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_project_iam_binding", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_project_iam_binding{Google_project_iam_binding_id: &id}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Read Actual State Google_project_iam_binding", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Delete ...
func (h *Google_project_iam_bindingHandler) Delete(externalID string) error {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Delete Google_project_iam_binding", "externalID", externalID)
	}
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_project_iam_binding", externalID)
}

type Google_project_iam_custom_role struct {
	Google_project_iam_custom_role_id *string `lyra:"ignore"`

	Deleted *bool

	Description *string

	Permissions []string

	Project *string

	Role_id string

	Stage *string

	Title string
}

var Google_project_iam_custom_role_rtb = func(rtb service.ResourceTypeBuilder) {
	rtb.ProvidedAttributes(
		"google_project_iam_custom_role_id",

		"deleted",

		"description",

		"project",

		"stage",
	)
	rtb.ImmutableAttributes(

		"project",

		"role_id",
	)
}

// Google_project_iam_custom_roleHandler ...
type Google_project_iam_custom_roleHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_project_iam_custom_roleHandler) Create(desired *Google_project_iam_custom_role) (*Google_project_iam_custom_role, string, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Create Google_project_iam_custom_role", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_project_iam_custom_role", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Update ...
func (h *Google_project_iam_custom_roleHandler) Update(externalID string, desired *Google_project_iam_custom_role) (*Google_project_iam_custom_role, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Update Google_project_iam_custom_role", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	actual, err := bridge.Update(h.provider, "google_project_iam_custom_role", externalID, rc)
	if err != nil {
		return nil, err
	}
	x := &Google_project_iam_custom_role{Google_project_iam_custom_role_id: &externalID}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Update Actual State Google_project_iam_custom_role", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Read ...
func (h *Google_project_iam_custom_roleHandler) Read(externalID string) (*Google_project_iam_custom_role, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Read Google_project_iam_custom_role", "externalID", externalID)
	}
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_project_iam_custom_role", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_project_iam_custom_role{Google_project_iam_custom_role_id: &id}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Read Actual State Google_project_iam_custom_role", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Delete ...
func (h *Google_project_iam_custom_roleHandler) Delete(externalID string) error {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Delete Google_project_iam_custom_role", "externalID", externalID)
	}
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_project_iam_custom_role", externalID)
}

type Google_project_iam_member struct {
	Google_project_iam_member_id *string `lyra:"ignore"`

	Etag *string

	Member string

	Project *string

	Role string
}

var Google_project_iam_member_rtb = func(rtb service.ResourceTypeBuilder) {
	rtb.ProvidedAttributes(
		"google_project_iam_member_id",

		"etag",

		"project",
	)
	rtb.ImmutableAttributes(

		"member",

		"project",

		"role",
	)
}

// Google_project_iam_memberHandler ...
type Google_project_iam_memberHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_project_iam_memberHandler) Create(desired *Google_project_iam_member) (*Google_project_iam_member, string, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Create Google_project_iam_member", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_project_iam_member", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Update ...
func (h *Google_project_iam_memberHandler) Update(externalID string, desired *Google_project_iam_member) (*Google_project_iam_member, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Update Google_project_iam_member", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	actual, err := bridge.Update(h.provider, "google_project_iam_member", externalID, rc)
	if err != nil {
		return nil, err
	}
	x := &Google_project_iam_member{Google_project_iam_member_id: &externalID}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Update Actual State Google_project_iam_member", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Read ...
func (h *Google_project_iam_memberHandler) Read(externalID string) (*Google_project_iam_member, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Read Google_project_iam_member", "externalID", externalID)
	}
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_project_iam_member", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_project_iam_member{Google_project_iam_member_id: &id}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Read Actual State Google_project_iam_member", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Delete ...
func (h *Google_project_iam_memberHandler) Delete(externalID string) error {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Delete Google_project_iam_member", "externalID", externalID)
	}
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_project_iam_member", externalID)
}

type Google_project_iam_policy struct {
	Google_project_iam_policy_id *string `lyra:"ignore"`

	Authoritative *bool

	Disable_project *bool

	Etag *string

	Policy_data string

	Project *string

	Restore_policy *string
}

var Google_project_iam_policy_rtb = func(rtb service.ResourceTypeBuilder) {
	rtb.ProvidedAttributes(
		"google_project_iam_policy_id",

		"authoritative",

		"disable_project",

		"etag",

		"project",

		"restore_policy",
	)
	rtb.ImmutableAttributes(

		"project",
	)
}

// Google_project_iam_policyHandler ...
type Google_project_iam_policyHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_project_iam_policyHandler) Create(desired *Google_project_iam_policy) (*Google_project_iam_policy, string, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Create Google_project_iam_policy", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_project_iam_policy", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Update ...
func (h *Google_project_iam_policyHandler) Update(externalID string, desired *Google_project_iam_policy) (*Google_project_iam_policy, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Update Google_project_iam_policy", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	actual, err := bridge.Update(h.provider, "google_project_iam_policy", externalID, rc)
	if err != nil {
		return nil, err
	}
	x := &Google_project_iam_policy{Google_project_iam_policy_id: &externalID}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Update Actual State Google_project_iam_policy", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Read ...
func (h *Google_project_iam_policyHandler) Read(externalID string) (*Google_project_iam_policy, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Read Google_project_iam_policy", "externalID", externalID)
	}
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_project_iam_policy", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_project_iam_policy{Google_project_iam_policy_id: &id}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Read Actual State Google_project_iam_policy", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Delete ...
func (h *Google_project_iam_policyHandler) Delete(externalID string) error {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Delete Google_project_iam_policy", "externalID", externalID)
	}
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_project_iam_policy", externalID)
}

type Google_project_organization_policy_boolean_policy_197 struct {
	Enforced bool
}

type Google_project_organization_policy_list_policy_198_allow_199 struct {
	All *bool

	Values *[]string
}

type Google_project_organization_policy_list_policy_198_deny_200 struct {
	All *bool

	Values *[]string
}

type Google_project_organization_policy_list_policy_198 struct {
	Allow *[]Google_project_organization_policy_list_policy_198_allow_199

	Deny *[]Google_project_organization_policy_list_policy_198_deny_200

	Suggested_value *string
}

type Google_project_organization_policy_restore_policy_201 struct {
	Default bool
}

type Google_project_organization_policy struct {
	Google_project_organization_policy_id *string `lyra:"ignore"`

	Boolean_policy *[]Google_project_organization_policy_boolean_policy_197

	Constraint string

	Etag *string

	List_policy *[]Google_project_organization_policy_list_policy_198

	Project string

	Restore_policy *[]Google_project_organization_policy_restore_policy_201

	Update_time *string

	Version *int
}

var Google_project_organization_policy_rtb = func(rtb service.ResourceTypeBuilder) {
	rtb.ProvidedAttributes(
		"google_project_organization_policy_id",

		"boolean_policy",

		"etag",

		"list_policy",

		"restore_policy",

		"update_time",

		"version",
	)
	rtb.ImmutableAttributes(

		"constraint",

		"project",
	)
}

// Google_project_organization_policyHandler ...
type Google_project_organization_policyHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_project_organization_policyHandler) Create(desired *Google_project_organization_policy) (*Google_project_organization_policy, string, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Create Google_project_organization_policy", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_project_organization_policy", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Update ...
func (h *Google_project_organization_policyHandler) Update(externalID string, desired *Google_project_organization_policy) (*Google_project_organization_policy, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Update Google_project_organization_policy", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	actual, err := bridge.Update(h.provider, "google_project_organization_policy", externalID, rc)
	if err != nil {
		return nil, err
	}
	x := &Google_project_organization_policy{Google_project_organization_policy_id: &externalID}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Update Actual State Google_project_organization_policy", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Read ...
func (h *Google_project_organization_policyHandler) Read(externalID string) (*Google_project_organization_policy, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Read Google_project_organization_policy", "externalID", externalID)
	}
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_project_organization_policy", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_project_organization_policy{Google_project_organization_policy_id: &id}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Read Actual State Google_project_organization_policy", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Delete ...
func (h *Google_project_organization_policyHandler) Delete(externalID string) error {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Delete Google_project_organization_policy", "externalID", externalID)
	}
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_project_organization_policy", externalID)
}

type Google_project_service struct {
	Google_project_service_id *string `lyra:"ignore"`

	Disable_on_destroy *bool

	Project *string

	Service string
}

var Google_project_service_rtb = func(rtb service.ResourceTypeBuilder) {
	rtb.ProvidedAttributes(
		"google_project_service_id",

		"disable_on_destroy",

		"project",
	)
	rtb.ImmutableAttributes(

		"project",

		"service",
	)
}

// Google_project_serviceHandler ...
type Google_project_serviceHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_project_serviceHandler) Create(desired *Google_project_service) (*Google_project_service, string, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Create Google_project_service", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_project_service", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Update ...
func (h *Google_project_serviceHandler) Update(externalID string, desired *Google_project_service) (*Google_project_service, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Update Google_project_service", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	actual, err := bridge.Update(h.provider, "google_project_service", externalID, rc)
	if err != nil {
		return nil, err
	}
	x := &Google_project_service{Google_project_service_id: &externalID}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Update Actual State Google_project_service", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Read ...
func (h *Google_project_serviceHandler) Read(externalID string) (*Google_project_service, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Read Google_project_service", "externalID", externalID)
	}
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_project_service", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_project_service{Google_project_service_id: &id}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Read Actual State Google_project_service", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Delete ...
func (h *Google_project_serviceHandler) Delete(externalID string) error {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Delete Google_project_service", "externalID", externalID)
	}
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_project_service", externalID)
}

type Google_project_services struct {
	Google_project_services_id *string `lyra:"ignore"`

	Disable_on_destroy *bool

	Project *string

	Services []string
}

var Google_project_services_rtb = func(rtb service.ResourceTypeBuilder) {
	rtb.ProvidedAttributes(
		"google_project_services_id",

		"disable_on_destroy",

		"project",
	)
	rtb.ImmutableAttributes(

		"project",
	)
}

// Google_project_servicesHandler ...
type Google_project_servicesHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_project_servicesHandler) Create(desired *Google_project_services) (*Google_project_services, string, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Create Google_project_services", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_project_services", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Update ...
func (h *Google_project_servicesHandler) Update(externalID string, desired *Google_project_services) (*Google_project_services, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Update Google_project_services", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	actual, err := bridge.Update(h.provider, "google_project_services", externalID, rc)
	if err != nil {
		return nil, err
	}
	x := &Google_project_services{Google_project_services_id: &externalID}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Update Actual State Google_project_services", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Read ...
func (h *Google_project_servicesHandler) Read(externalID string) (*Google_project_services, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Read Google_project_services", "externalID", externalID)
	}
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_project_services", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_project_services{Google_project_services_id: &id}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Read Actual State Google_project_services", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Delete ...
func (h *Google_project_servicesHandler) Delete(externalID string) error {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Delete Google_project_services", "externalID", externalID)
	}
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_project_services", externalID)
}

type Google_project_usage_export_bucket struct {
	Google_project_usage_export_bucket_id *string `lyra:"ignore"`

	Bucket_name string

	Prefix *string

	Project *string
}

var Google_project_usage_export_bucket_rtb = func(rtb service.ResourceTypeBuilder) {
	rtb.ProvidedAttributes(
		"google_project_usage_export_bucket_id",

		"prefix",

		"project",
	)
	rtb.ImmutableAttributes(

		"bucket_name",

		"prefix",

		"project",
	)
}

// Google_project_usage_export_bucketHandler ...
type Google_project_usage_export_bucketHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_project_usage_export_bucketHandler) Create(desired *Google_project_usage_export_bucket) (*Google_project_usage_export_bucket, string, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Create Google_project_usage_export_bucket", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_project_usage_export_bucket", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Update ...
func (h *Google_project_usage_export_bucketHandler) Update(externalID string, desired *Google_project_usage_export_bucket) (*Google_project_usage_export_bucket, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Update Google_project_usage_export_bucket", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	actual, err := bridge.Update(h.provider, "google_project_usage_export_bucket", externalID, rc)
	if err != nil {
		return nil, err
	}
	x := &Google_project_usage_export_bucket{Google_project_usage_export_bucket_id: &externalID}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Update Actual State Google_project_usage_export_bucket", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Read ...
func (h *Google_project_usage_export_bucketHandler) Read(externalID string) (*Google_project_usage_export_bucket, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Read Google_project_usage_export_bucket", "externalID", externalID)
	}
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_project_usage_export_bucket", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_project_usage_export_bucket{Google_project_usage_export_bucket_id: &id}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Read Actual State Google_project_usage_export_bucket", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Delete ...
func (h *Google_project_usage_export_bucketHandler) Delete(externalID string) error {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Delete Google_project_usage_export_bucket", "externalID", externalID)
	}
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_project_usage_export_bucket", externalID)
}

type Google_pubsub_subscription_push_config_202 struct {
	Attributes *map[string]string

	Push_endpoint string
}

type Google_pubsub_subscription struct {
	Google_pubsub_subscription_id *string `lyra:"ignore"`

	Ack_deadline_seconds *int

	Name string

	Path *string

	Project *string

	Push_config *[]Google_pubsub_subscription_push_config_202

	Topic string
}

var Google_pubsub_subscription_rtb = func(rtb service.ResourceTypeBuilder) {
	rtb.ProvidedAttributes(
		"google_pubsub_subscription_id",

		"ack_deadline_seconds",

		"path",

		"project",

		"push_config",
	)
	rtb.ImmutableAttributes(

		"ack_deadline_seconds",

		"name",

		"project",

		"topic",
	)
}

// Google_pubsub_subscriptionHandler ...
type Google_pubsub_subscriptionHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_pubsub_subscriptionHandler) Create(desired *Google_pubsub_subscription) (*Google_pubsub_subscription, string, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Create Google_pubsub_subscription", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_pubsub_subscription", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Update ...
func (h *Google_pubsub_subscriptionHandler) Update(externalID string, desired *Google_pubsub_subscription) (*Google_pubsub_subscription, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Update Google_pubsub_subscription", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	actual, err := bridge.Update(h.provider, "google_pubsub_subscription", externalID, rc)
	if err != nil {
		return nil, err
	}
	x := &Google_pubsub_subscription{Google_pubsub_subscription_id: &externalID}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Update Actual State Google_pubsub_subscription", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Read ...
func (h *Google_pubsub_subscriptionHandler) Read(externalID string) (*Google_pubsub_subscription, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Read Google_pubsub_subscription", "externalID", externalID)
	}
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_pubsub_subscription", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_pubsub_subscription{Google_pubsub_subscription_id: &id}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Read Actual State Google_pubsub_subscription", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Delete ...
func (h *Google_pubsub_subscriptionHandler) Delete(externalID string) error {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Delete Google_pubsub_subscription", "externalID", externalID)
	}
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_pubsub_subscription", externalID)
}

type Google_pubsub_subscription_iam_binding struct {
	Google_pubsub_subscription_iam_binding_id *string `lyra:"ignore"`

	Etag *string

	Members []string

	Project *string

	Role string

	Subscription string
}

var Google_pubsub_subscription_iam_binding_rtb = func(rtb service.ResourceTypeBuilder) {
	rtb.ProvidedAttributes(
		"google_pubsub_subscription_iam_binding_id",

		"etag",

		"project",
	)
	rtb.ImmutableAttributes(

		"project",

		"role",

		"subscription",
	)
}

// Google_pubsub_subscription_iam_bindingHandler ...
type Google_pubsub_subscription_iam_bindingHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_pubsub_subscription_iam_bindingHandler) Create(desired *Google_pubsub_subscription_iam_binding) (*Google_pubsub_subscription_iam_binding, string, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Create Google_pubsub_subscription_iam_binding", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_pubsub_subscription_iam_binding", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Update ...
func (h *Google_pubsub_subscription_iam_bindingHandler) Update(externalID string, desired *Google_pubsub_subscription_iam_binding) (*Google_pubsub_subscription_iam_binding, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Update Google_pubsub_subscription_iam_binding", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	actual, err := bridge.Update(h.provider, "google_pubsub_subscription_iam_binding", externalID, rc)
	if err != nil {
		return nil, err
	}
	x := &Google_pubsub_subscription_iam_binding{Google_pubsub_subscription_iam_binding_id: &externalID}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Update Actual State Google_pubsub_subscription_iam_binding", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Read ...
func (h *Google_pubsub_subscription_iam_bindingHandler) Read(externalID string) (*Google_pubsub_subscription_iam_binding, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Read Google_pubsub_subscription_iam_binding", "externalID", externalID)
	}
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_pubsub_subscription_iam_binding", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_pubsub_subscription_iam_binding{Google_pubsub_subscription_iam_binding_id: &id}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Read Actual State Google_pubsub_subscription_iam_binding", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Delete ...
func (h *Google_pubsub_subscription_iam_bindingHandler) Delete(externalID string) error {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Delete Google_pubsub_subscription_iam_binding", "externalID", externalID)
	}
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_pubsub_subscription_iam_binding", externalID)
}

type Google_pubsub_subscription_iam_member struct {
	Google_pubsub_subscription_iam_member_id *string `lyra:"ignore"`

	Etag *string

	Member string

	Project *string

	Role string

	Subscription string
}

var Google_pubsub_subscription_iam_member_rtb = func(rtb service.ResourceTypeBuilder) {
	rtb.ProvidedAttributes(
		"google_pubsub_subscription_iam_member_id",

		"etag",

		"project",
	)
	rtb.ImmutableAttributes(

		"member",

		"project",

		"role",

		"subscription",
	)
}

// Google_pubsub_subscription_iam_memberHandler ...
type Google_pubsub_subscription_iam_memberHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_pubsub_subscription_iam_memberHandler) Create(desired *Google_pubsub_subscription_iam_member) (*Google_pubsub_subscription_iam_member, string, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Create Google_pubsub_subscription_iam_member", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_pubsub_subscription_iam_member", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Update ...
func (h *Google_pubsub_subscription_iam_memberHandler) Update(externalID string, desired *Google_pubsub_subscription_iam_member) (*Google_pubsub_subscription_iam_member, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Update Google_pubsub_subscription_iam_member", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	actual, err := bridge.Update(h.provider, "google_pubsub_subscription_iam_member", externalID, rc)
	if err != nil {
		return nil, err
	}
	x := &Google_pubsub_subscription_iam_member{Google_pubsub_subscription_iam_member_id: &externalID}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Update Actual State Google_pubsub_subscription_iam_member", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Read ...
func (h *Google_pubsub_subscription_iam_memberHandler) Read(externalID string) (*Google_pubsub_subscription_iam_member, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Read Google_pubsub_subscription_iam_member", "externalID", externalID)
	}
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_pubsub_subscription_iam_member", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_pubsub_subscription_iam_member{Google_pubsub_subscription_iam_member_id: &id}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Read Actual State Google_pubsub_subscription_iam_member", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Delete ...
func (h *Google_pubsub_subscription_iam_memberHandler) Delete(externalID string) error {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Delete Google_pubsub_subscription_iam_member", "externalID", externalID)
	}
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_pubsub_subscription_iam_member", externalID)
}

type Google_pubsub_subscription_iam_policy struct {
	Google_pubsub_subscription_iam_policy_id *string `lyra:"ignore"`

	Etag *string

	Policy_data string

	Project *string

	Subscription string
}

var Google_pubsub_subscription_iam_policy_rtb = func(rtb service.ResourceTypeBuilder) {
	rtb.ProvidedAttributes(
		"google_pubsub_subscription_iam_policy_id",

		"etag",

		"project",
	)
	rtb.ImmutableAttributes(

		"project",

		"subscription",
	)
}

// Google_pubsub_subscription_iam_policyHandler ...
type Google_pubsub_subscription_iam_policyHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_pubsub_subscription_iam_policyHandler) Create(desired *Google_pubsub_subscription_iam_policy) (*Google_pubsub_subscription_iam_policy, string, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Create Google_pubsub_subscription_iam_policy", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_pubsub_subscription_iam_policy", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Update ...
func (h *Google_pubsub_subscription_iam_policyHandler) Update(externalID string, desired *Google_pubsub_subscription_iam_policy) (*Google_pubsub_subscription_iam_policy, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Update Google_pubsub_subscription_iam_policy", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	actual, err := bridge.Update(h.provider, "google_pubsub_subscription_iam_policy", externalID, rc)
	if err != nil {
		return nil, err
	}
	x := &Google_pubsub_subscription_iam_policy{Google_pubsub_subscription_iam_policy_id: &externalID}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Update Actual State Google_pubsub_subscription_iam_policy", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Read ...
func (h *Google_pubsub_subscription_iam_policyHandler) Read(externalID string) (*Google_pubsub_subscription_iam_policy, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Read Google_pubsub_subscription_iam_policy", "externalID", externalID)
	}
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_pubsub_subscription_iam_policy", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_pubsub_subscription_iam_policy{Google_pubsub_subscription_iam_policy_id: &id}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Read Actual State Google_pubsub_subscription_iam_policy", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Delete ...
func (h *Google_pubsub_subscription_iam_policyHandler) Delete(externalID string) error {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Delete Google_pubsub_subscription_iam_policy", "externalID", externalID)
	}
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_pubsub_subscription_iam_policy", externalID)
}

type Google_pubsub_topic struct {
	Google_pubsub_topic_id *string `lyra:"ignore"`

	Name string

	Project *string
}

var Google_pubsub_topic_rtb = func(rtb service.ResourceTypeBuilder) {
	rtb.ProvidedAttributes(
		"google_pubsub_topic_id",

		"project",
	)
	rtb.ImmutableAttributes(

		"name",

		"project",
	)
}

// Google_pubsub_topicHandler ...
type Google_pubsub_topicHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_pubsub_topicHandler) Create(desired *Google_pubsub_topic) (*Google_pubsub_topic, string, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Create Google_pubsub_topic", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_pubsub_topic", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Update ...
func (h *Google_pubsub_topicHandler) Update(externalID string, desired *Google_pubsub_topic) (*Google_pubsub_topic, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Update Google_pubsub_topic", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	actual, err := bridge.Update(h.provider, "google_pubsub_topic", externalID, rc)
	if err != nil {
		return nil, err
	}
	x := &Google_pubsub_topic{Google_pubsub_topic_id: &externalID}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Update Actual State Google_pubsub_topic", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Read ...
func (h *Google_pubsub_topicHandler) Read(externalID string) (*Google_pubsub_topic, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Read Google_pubsub_topic", "externalID", externalID)
	}
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_pubsub_topic", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_pubsub_topic{Google_pubsub_topic_id: &id}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Read Actual State Google_pubsub_topic", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Delete ...
func (h *Google_pubsub_topicHandler) Delete(externalID string) error {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Delete Google_pubsub_topic", "externalID", externalID)
	}
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_pubsub_topic", externalID)
}

type Google_pubsub_topic_iam_binding struct {
	Google_pubsub_topic_iam_binding_id *string `lyra:"ignore"`

	Etag *string

	Members []string

	Project *string

	Role string

	Topic string
}

var Google_pubsub_topic_iam_binding_rtb = func(rtb service.ResourceTypeBuilder) {
	rtb.ProvidedAttributes(
		"google_pubsub_topic_iam_binding_id",

		"etag",

		"project",
	)
	rtb.ImmutableAttributes(

		"project",

		"role",

		"topic",
	)
}

// Google_pubsub_topic_iam_bindingHandler ...
type Google_pubsub_topic_iam_bindingHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_pubsub_topic_iam_bindingHandler) Create(desired *Google_pubsub_topic_iam_binding) (*Google_pubsub_topic_iam_binding, string, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Create Google_pubsub_topic_iam_binding", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_pubsub_topic_iam_binding", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Update ...
func (h *Google_pubsub_topic_iam_bindingHandler) Update(externalID string, desired *Google_pubsub_topic_iam_binding) (*Google_pubsub_topic_iam_binding, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Update Google_pubsub_topic_iam_binding", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	actual, err := bridge.Update(h.provider, "google_pubsub_topic_iam_binding", externalID, rc)
	if err != nil {
		return nil, err
	}
	x := &Google_pubsub_topic_iam_binding{Google_pubsub_topic_iam_binding_id: &externalID}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Update Actual State Google_pubsub_topic_iam_binding", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Read ...
func (h *Google_pubsub_topic_iam_bindingHandler) Read(externalID string) (*Google_pubsub_topic_iam_binding, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Read Google_pubsub_topic_iam_binding", "externalID", externalID)
	}
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_pubsub_topic_iam_binding", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_pubsub_topic_iam_binding{Google_pubsub_topic_iam_binding_id: &id}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Read Actual State Google_pubsub_topic_iam_binding", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Delete ...
func (h *Google_pubsub_topic_iam_bindingHandler) Delete(externalID string) error {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Delete Google_pubsub_topic_iam_binding", "externalID", externalID)
	}
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_pubsub_topic_iam_binding", externalID)
}

type Google_pubsub_topic_iam_member struct {
	Google_pubsub_topic_iam_member_id *string `lyra:"ignore"`

	Etag *string

	Member string

	Project *string

	Role string

	Topic string
}

var Google_pubsub_topic_iam_member_rtb = func(rtb service.ResourceTypeBuilder) {
	rtb.ProvidedAttributes(
		"google_pubsub_topic_iam_member_id",

		"etag",

		"project",
	)
	rtb.ImmutableAttributes(

		"member",

		"project",

		"role",

		"topic",
	)
}

// Google_pubsub_topic_iam_memberHandler ...
type Google_pubsub_topic_iam_memberHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_pubsub_topic_iam_memberHandler) Create(desired *Google_pubsub_topic_iam_member) (*Google_pubsub_topic_iam_member, string, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Create Google_pubsub_topic_iam_member", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_pubsub_topic_iam_member", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Update ...
func (h *Google_pubsub_topic_iam_memberHandler) Update(externalID string, desired *Google_pubsub_topic_iam_member) (*Google_pubsub_topic_iam_member, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Update Google_pubsub_topic_iam_member", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	actual, err := bridge.Update(h.provider, "google_pubsub_topic_iam_member", externalID, rc)
	if err != nil {
		return nil, err
	}
	x := &Google_pubsub_topic_iam_member{Google_pubsub_topic_iam_member_id: &externalID}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Update Actual State Google_pubsub_topic_iam_member", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Read ...
func (h *Google_pubsub_topic_iam_memberHandler) Read(externalID string) (*Google_pubsub_topic_iam_member, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Read Google_pubsub_topic_iam_member", "externalID", externalID)
	}
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_pubsub_topic_iam_member", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_pubsub_topic_iam_member{Google_pubsub_topic_iam_member_id: &id}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Read Actual State Google_pubsub_topic_iam_member", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Delete ...
func (h *Google_pubsub_topic_iam_memberHandler) Delete(externalID string) error {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Delete Google_pubsub_topic_iam_member", "externalID", externalID)
	}
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_pubsub_topic_iam_member", externalID)
}

type Google_pubsub_topic_iam_policy struct {
	Google_pubsub_topic_iam_policy_id *string `lyra:"ignore"`

	Etag *string

	Policy_data string

	Project *string

	Topic string
}

var Google_pubsub_topic_iam_policy_rtb = func(rtb service.ResourceTypeBuilder) {
	rtb.ProvidedAttributes(
		"google_pubsub_topic_iam_policy_id",

		"etag",

		"project",
	)
	rtb.ImmutableAttributes(

		"project",

		"topic",
	)
}

// Google_pubsub_topic_iam_policyHandler ...
type Google_pubsub_topic_iam_policyHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_pubsub_topic_iam_policyHandler) Create(desired *Google_pubsub_topic_iam_policy) (*Google_pubsub_topic_iam_policy, string, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Create Google_pubsub_topic_iam_policy", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_pubsub_topic_iam_policy", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Update ...
func (h *Google_pubsub_topic_iam_policyHandler) Update(externalID string, desired *Google_pubsub_topic_iam_policy) (*Google_pubsub_topic_iam_policy, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Update Google_pubsub_topic_iam_policy", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	actual, err := bridge.Update(h.provider, "google_pubsub_topic_iam_policy", externalID, rc)
	if err != nil {
		return nil, err
	}
	x := &Google_pubsub_topic_iam_policy{Google_pubsub_topic_iam_policy_id: &externalID}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Update Actual State Google_pubsub_topic_iam_policy", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Read ...
func (h *Google_pubsub_topic_iam_policyHandler) Read(externalID string) (*Google_pubsub_topic_iam_policy, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Read Google_pubsub_topic_iam_policy", "externalID", externalID)
	}
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_pubsub_topic_iam_policy", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_pubsub_topic_iam_policy{Google_pubsub_topic_iam_policy_id: &id}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Read Actual State Google_pubsub_topic_iam_policy", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Delete ...
func (h *Google_pubsub_topic_iam_policyHandler) Delete(externalID string) error {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Delete Google_pubsub_topic_iam_policy", "externalID", externalID)
	}
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_pubsub_topic_iam_policy", externalID)
}

type Google_redis_instance struct {
	Google_redis_instance_id *string `lyra:"ignore"`

	Alternative_location_id *string

	Authorized_network *string

	Create_time *string

	Current_location_id *string

	Display_name *string

	Host *string

	Labels *map[string]string

	Location_id *string

	Memory_size_gb int

	Name string

	Port *int

	Project *string

	Redis_configs *map[string]string

	Redis_version *string

	Region *string

	Reserved_ip_range *string

	Tier *string
}

var Google_redis_instance_rtb = func(rtb service.ResourceTypeBuilder) {
	rtb.ProvidedAttributes(
		"google_redis_instance_id",

		"alternative_location_id",

		"authorized_network",

		"create_time",

		"current_location_id",

		"display_name",

		"host",

		"labels",

		"location_id",

		"port",

		"project",

		"redis_configs",

		"redis_version",

		"region",

		"reserved_ip_range",

		"tier",
	)
	rtb.ImmutableAttributes(

		"alternative_location_id",

		"authorized_network",

		"location_id",

		"name",

		"project",

		"redis_version",

		"region",

		"reserved_ip_range",

		"tier",
	)
}

// Google_redis_instanceHandler ...
type Google_redis_instanceHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_redis_instanceHandler) Create(desired *Google_redis_instance) (*Google_redis_instance, string, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Create Google_redis_instance", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_redis_instance", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Update ...
func (h *Google_redis_instanceHandler) Update(externalID string, desired *Google_redis_instance) (*Google_redis_instance, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Update Google_redis_instance", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	actual, err := bridge.Update(h.provider, "google_redis_instance", externalID, rc)
	if err != nil {
		return nil, err
	}
	x := &Google_redis_instance{Google_redis_instance_id: &externalID}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Update Actual State Google_redis_instance", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Read ...
func (h *Google_redis_instanceHandler) Read(externalID string) (*Google_redis_instance, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Read Google_redis_instance", "externalID", externalID)
	}
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_redis_instance", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_redis_instance{Google_redis_instance_id: &id}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Read Actual State Google_redis_instance", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Delete ...
func (h *Google_redis_instanceHandler) Delete(externalID string) error {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Delete Google_redis_instance", "externalID", externalID)
	}
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_redis_instance", externalID)
}

type Google_resource_manager_lien struct {
	Google_resource_manager_lien_id *string `lyra:"ignore"`

	Create_time *string

	Name *string

	Origin string

	Parent string

	Reason string

	Restrictions []string
}

var Google_resource_manager_lien_rtb = func(rtb service.ResourceTypeBuilder) {
	rtb.ProvidedAttributes(
		"google_resource_manager_lien_id",

		"create_time",

		"name",
	)
	rtb.ImmutableAttributes(

		"origin",

		"parent",

		"reason",

		"restrictions",
	)
}

// Google_resource_manager_lienHandler ...
type Google_resource_manager_lienHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_resource_manager_lienHandler) Create(desired *Google_resource_manager_lien) (*Google_resource_manager_lien, string, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Create Google_resource_manager_lien", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_resource_manager_lien", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Update ...
func (h *Google_resource_manager_lienHandler) Update(externalID string, desired *Google_resource_manager_lien) (*Google_resource_manager_lien, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Update Google_resource_manager_lien", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	actual, err := bridge.Update(h.provider, "google_resource_manager_lien", externalID, rc)
	if err != nil {
		return nil, err
	}
	x := &Google_resource_manager_lien{Google_resource_manager_lien_id: &externalID}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Update Actual State Google_resource_manager_lien", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Read ...
func (h *Google_resource_manager_lienHandler) Read(externalID string) (*Google_resource_manager_lien, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Read Google_resource_manager_lien", "externalID", externalID)
	}
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_resource_manager_lien", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_resource_manager_lien{Google_resource_manager_lien_id: &id}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Read Actual State Google_resource_manager_lien", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Delete ...
func (h *Google_resource_manager_lienHandler) Delete(externalID string) error {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Delete Google_resource_manager_lien", "externalID", externalID)
	}
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_resource_manager_lien", externalID)
}

type Google_runtimeconfig_config struct {
	Google_runtimeconfig_config_id *string `lyra:"ignore"`

	Description *string

	Name string

	Project *string
}

var Google_runtimeconfig_config_rtb = func(rtb service.ResourceTypeBuilder) {
	rtb.ProvidedAttributes(
		"google_runtimeconfig_config_id",

		"description",

		"project",
	)
	rtb.ImmutableAttributes(

		"name",

		"project",
	)
}

// Google_runtimeconfig_configHandler ...
type Google_runtimeconfig_configHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_runtimeconfig_configHandler) Create(desired *Google_runtimeconfig_config) (*Google_runtimeconfig_config, string, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Create Google_runtimeconfig_config", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_runtimeconfig_config", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Update ...
func (h *Google_runtimeconfig_configHandler) Update(externalID string, desired *Google_runtimeconfig_config) (*Google_runtimeconfig_config, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Update Google_runtimeconfig_config", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	actual, err := bridge.Update(h.provider, "google_runtimeconfig_config", externalID, rc)
	if err != nil {
		return nil, err
	}
	x := &Google_runtimeconfig_config{Google_runtimeconfig_config_id: &externalID}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Update Actual State Google_runtimeconfig_config", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Read ...
func (h *Google_runtimeconfig_configHandler) Read(externalID string) (*Google_runtimeconfig_config, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Read Google_runtimeconfig_config", "externalID", externalID)
	}
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_runtimeconfig_config", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_runtimeconfig_config{Google_runtimeconfig_config_id: &id}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Read Actual State Google_runtimeconfig_config", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Delete ...
func (h *Google_runtimeconfig_configHandler) Delete(externalID string) error {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Delete Google_runtimeconfig_config", "externalID", externalID)
	}
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_runtimeconfig_config", externalID)
}

type Google_runtimeconfig_variable struct {
	Google_runtimeconfig_variable_id *string `lyra:"ignore"`

	Name string

	Parent string

	Project *string

	Text *string

	Update_time *string

	Value *string
}

var Google_runtimeconfig_variable_rtb = func(rtb service.ResourceTypeBuilder) {
	rtb.ProvidedAttributes(
		"google_runtimeconfig_variable_id",

		"project",

		"text",

		"update_time",

		"value",
	)
	rtb.ImmutableAttributes(

		"name",

		"parent",

		"project",
	)
}

// Google_runtimeconfig_variableHandler ...
type Google_runtimeconfig_variableHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_runtimeconfig_variableHandler) Create(desired *Google_runtimeconfig_variable) (*Google_runtimeconfig_variable, string, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Create Google_runtimeconfig_variable", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_runtimeconfig_variable", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Update ...
func (h *Google_runtimeconfig_variableHandler) Update(externalID string, desired *Google_runtimeconfig_variable) (*Google_runtimeconfig_variable, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Update Google_runtimeconfig_variable", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	actual, err := bridge.Update(h.provider, "google_runtimeconfig_variable", externalID, rc)
	if err != nil {
		return nil, err
	}
	x := &Google_runtimeconfig_variable{Google_runtimeconfig_variable_id: &externalID}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Update Actual State Google_runtimeconfig_variable", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Read ...
func (h *Google_runtimeconfig_variableHandler) Read(externalID string) (*Google_runtimeconfig_variable, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Read Google_runtimeconfig_variable", "externalID", externalID)
	}
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_runtimeconfig_variable", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_runtimeconfig_variable{Google_runtimeconfig_variable_id: &id}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Read Actual State Google_runtimeconfig_variable", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Delete ...
func (h *Google_runtimeconfig_variableHandler) Delete(externalID string) error {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Delete Google_runtimeconfig_variable", "externalID", externalID)
	}
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_runtimeconfig_variable", externalID)
}

type Google_service_account struct {
	Google_service_account_id *string `lyra:"ignore"`

	Account_id string

	Display_name *string

	Email *string

	Name *string

	Policy_data *string

	Project *string

	Unique_id *string
}

var Google_service_account_rtb = func(rtb service.ResourceTypeBuilder) {
	rtb.ProvidedAttributes(
		"google_service_account_id",

		"display_name",

		"email",

		"name",

		"policy_data",

		"project",

		"unique_id",
	)
	rtb.ImmutableAttributes(

		"account_id",

		"project",
	)
}

// Google_service_accountHandler ...
type Google_service_accountHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_service_accountHandler) Create(desired *Google_service_account) (*Google_service_account, string, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Create Google_service_account", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_service_account", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Update ...
func (h *Google_service_accountHandler) Update(externalID string, desired *Google_service_account) (*Google_service_account, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Update Google_service_account", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	actual, err := bridge.Update(h.provider, "google_service_account", externalID, rc)
	if err != nil {
		return nil, err
	}
	x := &Google_service_account{Google_service_account_id: &externalID}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Update Actual State Google_service_account", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Read ...
func (h *Google_service_accountHandler) Read(externalID string) (*Google_service_account, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Read Google_service_account", "externalID", externalID)
	}
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_service_account", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_service_account{Google_service_account_id: &id}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Read Actual State Google_service_account", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Delete ...
func (h *Google_service_accountHandler) Delete(externalID string) error {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Delete Google_service_account", "externalID", externalID)
	}
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_service_account", externalID)
}

type Google_service_account_iam_binding struct {
	Google_service_account_iam_binding_id *string `lyra:"ignore"`

	Etag *string

	Members []string

	Role string

	Service_account_id string
}

var Google_service_account_iam_binding_rtb = func(rtb service.ResourceTypeBuilder) {
	rtb.ProvidedAttributes(
		"google_service_account_iam_binding_id",

		"etag",
	)
	rtb.ImmutableAttributes(

		"role",

		"service_account_id",
	)
}

// Google_service_account_iam_bindingHandler ...
type Google_service_account_iam_bindingHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_service_account_iam_bindingHandler) Create(desired *Google_service_account_iam_binding) (*Google_service_account_iam_binding, string, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Create Google_service_account_iam_binding", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_service_account_iam_binding", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Update ...
func (h *Google_service_account_iam_bindingHandler) Update(externalID string, desired *Google_service_account_iam_binding) (*Google_service_account_iam_binding, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Update Google_service_account_iam_binding", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	actual, err := bridge.Update(h.provider, "google_service_account_iam_binding", externalID, rc)
	if err != nil {
		return nil, err
	}
	x := &Google_service_account_iam_binding{Google_service_account_iam_binding_id: &externalID}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Update Actual State Google_service_account_iam_binding", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Read ...
func (h *Google_service_account_iam_bindingHandler) Read(externalID string) (*Google_service_account_iam_binding, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Read Google_service_account_iam_binding", "externalID", externalID)
	}
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_service_account_iam_binding", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_service_account_iam_binding{Google_service_account_iam_binding_id: &id}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Read Actual State Google_service_account_iam_binding", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Delete ...
func (h *Google_service_account_iam_bindingHandler) Delete(externalID string) error {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Delete Google_service_account_iam_binding", "externalID", externalID)
	}
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_service_account_iam_binding", externalID)
}

type Google_service_account_iam_member struct {
	Google_service_account_iam_member_id *string `lyra:"ignore"`

	Etag *string

	Member string

	Role string

	Service_account_id string
}

var Google_service_account_iam_member_rtb = func(rtb service.ResourceTypeBuilder) {
	rtb.ProvidedAttributes(
		"google_service_account_iam_member_id",

		"etag",
	)
	rtb.ImmutableAttributes(

		"member",

		"role",

		"service_account_id",
	)
}

// Google_service_account_iam_memberHandler ...
type Google_service_account_iam_memberHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_service_account_iam_memberHandler) Create(desired *Google_service_account_iam_member) (*Google_service_account_iam_member, string, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Create Google_service_account_iam_member", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_service_account_iam_member", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Update ...
func (h *Google_service_account_iam_memberHandler) Update(externalID string, desired *Google_service_account_iam_member) (*Google_service_account_iam_member, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Update Google_service_account_iam_member", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	actual, err := bridge.Update(h.provider, "google_service_account_iam_member", externalID, rc)
	if err != nil {
		return nil, err
	}
	x := &Google_service_account_iam_member{Google_service_account_iam_member_id: &externalID}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Update Actual State Google_service_account_iam_member", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Read ...
func (h *Google_service_account_iam_memberHandler) Read(externalID string) (*Google_service_account_iam_member, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Read Google_service_account_iam_member", "externalID", externalID)
	}
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_service_account_iam_member", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_service_account_iam_member{Google_service_account_iam_member_id: &id}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Read Actual State Google_service_account_iam_member", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Delete ...
func (h *Google_service_account_iam_memberHandler) Delete(externalID string) error {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Delete Google_service_account_iam_member", "externalID", externalID)
	}
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_service_account_iam_member", externalID)
}

type Google_service_account_iam_policy struct {
	Google_service_account_iam_policy_id *string `lyra:"ignore"`

	Etag *string

	Policy_data string

	Service_account_id string
}

var Google_service_account_iam_policy_rtb = func(rtb service.ResourceTypeBuilder) {
	rtb.ProvidedAttributes(
		"google_service_account_iam_policy_id",

		"etag",
	)
	rtb.ImmutableAttributes(

		"service_account_id",
	)
}

// Google_service_account_iam_policyHandler ...
type Google_service_account_iam_policyHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_service_account_iam_policyHandler) Create(desired *Google_service_account_iam_policy) (*Google_service_account_iam_policy, string, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Create Google_service_account_iam_policy", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_service_account_iam_policy", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Update ...
func (h *Google_service_account_iam_policyHandler) Update(externalID string, desired *Google_service_account_iam_policy) (*Google_service_account_iam_policy, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Update Google_service_account_iam_policy", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	actual, err := bridge.Update(h.provider, "google_service_account_iam_policy", externalID, rc)
	if err != nil {
		return nil, err
	}
	x := &Google_service_account_iam_policy{Google_service_account_iam_policy_id: &externalID}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Update Actual State Google_service_account_iam_policy", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Read ...
func (h *Google_service_account_iam_policyHandler) Read(externalID string) (*Google_service_account_iam_policy, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Read Google_service_account_iam_policy", "externalID", externalID)
	}
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_service_account_iam_policy", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_service_account_iam_policy{Google_service_account_iam_policy_id: &id}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Read Actual State Google_service_account_iam_policy", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Delete ...
func (h *Google_service_account_iam_policyHandler) Delete(externalID string) error {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Delete Google_service_account_iam_policy", "externalID", externalID)
	}
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_service_account_iam_policy", externalID)
}

type Google_service_account_key struct {
	Google_service_account_key_id *string `lyra:"ignore"`

	Key_algorithm *string

	Name *string

	Pgp_key *string

	Private_key *string

	Private_key_encrypted *string

	Private_key_fingerprint *string

	Private_key_type *string

	Public_key *string

	Public_key_type *string

	Service_account_id string

	Valid_after *string

	Valid_before *string
}

var Google_service_account_key_rtb = func(rtb service.ResourceTypeBuilder) {
	rtb.ProvidedAttributes(
		"google_service_account_key_id",

		"key_algorithm",

		"name",

		"pgp_key",

		"private_key",

		"private_key_encrypted",

		"private_key_fingerprint",

		"private_key_type",

		"public_key",

		"public_key_type",

		"valid_after",

		"valid_before",
	)
	rtb.ImmutableAttributes(

		"key_algorithm",

		"name",

		"pgp_key",

		"private_key_type",

		"public_key",

		"public_key_type",

		"service_account_id",
	)
}

// Google_service_account_keyHandler ...
type Google_service_account_keyHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_service_account_keyHandler) Create(desired *Google_service_account_key) (*Google_service_account_key, string, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Create Google_service_account_key", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_service_account_key", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Update ...
func (h *Google_service_account_keyHandler) Update(externalID string, desired *Google_service_account_key) (*Google_service_account_key, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Update Google_service_account_key", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	actual, err := bridge.Update(h.provider, "google_service_account_key", externalID, rc)
	if err != nil {
		return nil, err
	}
	x := &Google_service_account_key{Google_service_account_key_id: &externalID}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Update Actual State Google_service_account_key", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Read ...
func (h *Google_service_account_keyHandler) Read(externalID string) (*Google_service_account_key, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Read Google_service_account_key", "externalID", externalID)
	}
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_service_account_key", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_service_account_key{Google_service_account_key_id: &id}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Read Actual State Google_service_account_key", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Delete ...
func (h *Google_service_account_keyHandler) Delete(externalID string) error {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Delete Google_service_account_key", "externalID", externalID)
	}
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_service_account_key", externalID)
}

type Google_sourcerepo_repository struct {
	Google_sourcerepo_repository_id *string `lyra:"ignore"`

	Name string

	Project *string

	Size *int

	Url *string
}

var Google_sourcerepo_repository_rtb = func(rtb service.ResourceTypeBuilder) {
	rtb.ProvidedAttributes(
		"google_sourcerepo_repository_id",

		"project",

		"size",

		"url",
	)
	rtb.ImmutableAttributes(

		"name",

		"project",
	)
}

// Google_sourcerepo_repositoryHandler ...
type Google_sourcerepo_repositoryHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_sourcerepo_repositoryHandler) Create(desired *Google_sourcerepo_repository) (*Google_sourcerepo_repository, string, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Create Google_sourcerepo_repository", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_sourcerepo_repository", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Update ...
func (h *Google_sourcerepo_repositoryHandler) Update(externalID string, desired *Google_sourcerepo_repository) (*Google_sourcerepo_repository, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Update Google_sourcerepo_repository", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	actual, err := bridge.Update(h.provider, "google_sourcerepo_repository", externalID, rc)
	if err != nil {
		return nil, err
	}
	x := &Google_sourcerepo_repository{Google_sourcerepo_repository_id: &externalID}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Update Actual State Google_sourcerepo_repository", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Read ...
func (h *Google_sourcerepo_repositoryHandler) Read(externalID string) (*Google_sourcerepo_repository, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Read Google_sourcerepo_repository", "externalID", externalID)
	}
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_sourcerepo_repository", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_sourcerepo_repository{Google_sourcerepo_repository_id: &id}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Read Actual State Google_sourcerepo_repository", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Delete ...
func (h *Google_sourcerepo_repositoryHandler) Delete(externalID string) error {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Delete Google_sourcerepo_repository", "externalID", externalID)
	}
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_sourcerepo_repository", externalID)
}

type Google_spanner_database struct {
	Google_spanner_database_id *string `lyra:"ignore"`

	Ddl *[]string

	Instance string

	Name string

	Project *string

	State *string
}

var Google_spanner_database_rtb = func(rtb service.ResourceTypeBuilder) {
	rtb.ProvidedAttributes(
		"google_spanner_database_id",

		"ddl",

		"project",

		"state",
	)
	rtb.ImmutableAttributes(

		"ddl",

		"instance",

		"name",

		"project",
	)
}

// Google_spanner_databaseHandler ...
type Google_spanner_databaseHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_spanner_databaseHandler) Create(desired *Google_spanner_database) (*Google_spanner_database, string, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Create Google_spanner_database", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_spanner_database", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Update ...
func (h *Google_spanner_databaseHandler) Update(externalID string, desired *Google_spanner_database) (*Google_spanner_database, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Update Google_spanner_database", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	actual, err := bridge.Update(h.provider, "google_spanner_database", externalID, rc)
	if err != nil {
		return nil, err
	}
	x := &Google_spanner_database{Google_spanner_database_id: &externalID}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Update Actual State Google_spanner_database", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Read ...
func (h *Google_spanner_databaseHandler) Read(externalID string) (*Google_spanner_database, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Read Google_spanner_database", "externalID", externalID)
	}
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_spanner_database", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_spanner_database{Google_spanner_database_id: &id}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Read Actual State Google_spanner_database", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Delete ...
func (h *Google_spanner_databaseHandler) Delete(externalID string) error {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Delete Google_spanner_database", "externalID", externalID)
	}
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_spanner_database", externalID)
}

type Google_spanner_database_iam_binding struct {
	Google_spanner_database_iam_binding_id *string `lyra:"ignore"`

	Database string

	Etag *string

	Instance string

	Members []string

	Project *string

	Role string
}

var Google_spanner_database_iam_binding_rtb = func(rtb service.ResourceTypeBuilder) {
	rtb.ProvidedAttributes(
		"google_spanner_database_iam_binding_id",

		"etag",

		"project",
	)
	rtb.ImmutableAttributes(

		"database",

		"instance",

		"project",

		"role",
	)
}

// Google_spanner_database_iam_bindingHandler ...
type Google_spanner_database_iam_bindingHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_spanner_database_iam_bindingHandler) Create(desired *Google_spanner_database_iam_binding) (*Google_spanner_database_iam_binding, string, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Create Google_spanner_database_iam_binding", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_spanner_database_iam_binding", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Update ...
func (h *Google_spanner_database_iam_bindingHandler) Update(externalID string, desired *Google_spanner_database_iam_binding) (*Google_spanner_database_iam_binding, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Update Google_spanner_database_iam_binding", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	actual, err := bridge.Update(h.provider, "google_spanner_database_iam_binding", externalID, rc)
	if err != nil {
		return nil, err
	}
	x := &Google_spanner_database_iam_binding{Google_spanner_database_iam_binding_id: &externalID}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Update Actual State Google_spanner_database_iam_binding", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Read ...
func (h *Google_spanner_database_iam_bindingHandler) Read(externalID string) (*Google_spanner_database_iam_binding, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Read Google_spanner_database_iam_binding", "externalID", externalID)
	}
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_spanner_database_iam_binding", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_spanner_database_iam_binding{Google_spanner_database_iam_binding_id: &id}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Read Actual State Google_spanner_database_iam_binding", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Delete ...
func (h *Google_spanner_database_iam_bindingHandler) Delete(externalID string) error {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Delete Google_spanner_database_iam_binding", "externalID", externalID)
	}
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_spanner_database_iam_binding", externalID)
}

type Google_spanner_database_iam_member struct {
	Google_spanner_database_iam_member_id *string `lyra:"ignore"`

	Database string

	Etag *string

	Instance string

	Member string

	Project *string

	Role string
}

var Google_spanner_database_iam_member_rtb = func(rtb service.ResourceTypeBuilder) {
	rtb.ProvidedAttributes(
		"google_spanner_database_iam_member_id",

		"etag",

		"project",
	)
	rtb.ImmutableAttributes(

		"database",

		"instance",

		"member",

		"project",

		"role",
	)
}

// Google_spanner_database_iam_memberHandler ...
type Google_spanner_database_iam_memberHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_spanner_database_iam_memberHandler) Create(desired *Google_spanner_database_iam_member) (*Google_spanner_database_iam_member, string, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Create Google_spanner_database_iam_member", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_spanner_database_iam_member", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Update ...
func (h *Google_spanner_database_iam_memberHandler) Update(externalID string, desired *Google_spanner_database_iam_member) (*Google_spanner_database_iam_member, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Update Google_spanner_database_iam_member", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	actual, err := bridge.Update(h.provider, "google_spanner_database_iam_member", externalID, rc)
	if err != nil {
		return nil, err
	}
	x := &Google_spanner_database_iam_member{Google_spanner_database_iam_member_id: &externalID}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Update Actual State Google_spanner_database_iam_member", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Read ...
func (h *Google_spanner_database_iam_memberHandler) Read(externalID string) (*Google_spanner_database_iam_member, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Read Google_spanner_database_iam_member", "externalID", externalID)
	}
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_spanner_database_iam_member", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_spanner_database_iam_member{Google_spanner_database_iam_member_id: &id}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Read Actual State Google_spanner_database_iam_member", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Delete ...
func (h *Google_spanner_database_iam_memberHandler) Delete(externalID string) error {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Delete Google_spanner_database_iam_member", "externalID", externalID)
	}
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_spanner_database_iam_member", externalID)
}

type Google_spanner_database_iam_policy struct {
	Google_spanner_database_iam_policy_id *string `lyra:"ignore"`

	Database string

	Etag *string

	Instance string

	Policy_data string

	Project *string
}

var Google_spanner_database_iam_policy_rtb = func(rtb service.ResourceTypeBuilder) {
	rtb.ProvidedAttributes(
		"google_spanner_database_iam_policy_id",

		"etag",

		"project",
	)
	rtb.ImmutableAttributes(

		"database",

		"instance",

		"project",
	)
}

// Google_spanner_database_iam_policyHandler ...
type Google_spanner_database_iam_policyHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_spanner_database_iam_policyHandler) Create(desired *Google_spanner_database_iam_policy) (*Google_spanner_database_iam_policy, string, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Create Google_spanner_database_iam_policy", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_spanner_database_iam_policy", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Update ...
func (h *Google_spanner_database_iam_policyHandler) Update(externalID string, desired *Google_spanner_database_iam_policy) (*Google_spanner_database_iam_policy, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Update Google_spanner_database_iam_policy", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	actual, err := bridge.Update(h.provider, "google_spanner_database_iam_policy", externalID, rc)
	if err != nil {
		return nil, err
	}
	x := &Google_spanner_database_iam_policy{Google_spanner_database_iam_policy_id: &externalID}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Update Actual State Google_spanner_database_iam_policy", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Read ...
func (h *Google_spanner_database_iam_policyHandler) Read(externalID string) (*Google_spanner_database_iam_policy, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Read Google_spanner_database_iam_policy", "externalID", externalID)
	}
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_spanner_database_iam_policy", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_spanner_database_iam_policy{Google_spanner_database_iam_policy_id: &id}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Read Actual State Google_spanner_database_iam_policy", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Delete ...
func (h *Google_spanner_database_iam_policyHandler) Delete(externalID string) error {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Delete Google_spanner_database_iam_policy", "externalID", externalID)
	}
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_spanner_database_iam_policy", externalID)
}

type Google_spanner_instance struct {
	Google_spanner_instance_id *string `lyra:"ignore"`

	Config string

	Display_name string

	Labels *map[string]string

	Name *string

	Num_nodes *int

	Project *string

	State *string
}

var Google_spanner_instance_rtb = func(rtb service.ResourceTypeBuilder) {
	rtb.ProvidedAttributes(
		"google_spanner_instance_id",

		"labels",

		"name",

		"num_nodes",

		"project",

		"state",
	)
	rtb.ImmutableAttributes(

		"config",

		"name",

		"project",
	)
}

// Google_spanner_instanceHandler ...
type Google_spanner_instanceHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_spanner_instanceHandler) Create(desired *Google_spanner_instance) (*Google_spanner_instance, string, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Create Google_spanner_instance", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_spanner_instance", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Update ...
func (h *Google_spanner_instanceHandler) Update(externalID string, desired *Google_spanner_instance) (*Google_spanner_instance, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Update Google_spanner_instance", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	actual, err := bridge.Update(h.provider, "google_spanner_instance", externalID, rc)
	if err != nil {
		return nil, err
	}
	x := &Google_spanner_instance{Google_spanner_instance_id: &externalID}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Update Actual State Google_spanner_instance", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Read ...
func (h *Google_spanner_instanceHandler) Read(externalID string) (*Google_spanner_instance, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Read Google_spanner_instance", "externalID", externalID)
	}
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_spanner_instance", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_spanner_instance{Google_spanner_instance_id: &id}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Read Actual State Google_spanner_instance", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Delete ...
func (h *Google_spanner_instanceHandler) Delete(externalID string) error {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Delete Google_spanner_instance", "externalID", externalID)
	}
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_spanner_instance", externalID)
}

type Google_spanner_instance_iam_binding struct {
	Google_spanner_instance_iam_binding_id *string `lyra:"ignore"`

	Etag *string

	Instance string

	Members []string

	Project *string

	Role string
}

var Google_spanner_instance_iam_binding_rtb = func(rtb service.ResourceTypeBuilder) {
	rtb.ProvidedAttributes(
		"google_spanner_instance_iam_binding_id",

		"etag",

		"project",
	)
	rtb.ImmutableAttributes(

		"instance",

		"project",

		"role",
	)
}

// Google_spanner_instance_iam_bindingHandler ...
type Google_spanner_instance_iam_bindingHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_spanner_instance_iam_bindingHandler) Create(desired *Google_spanner_instance_iam_binding) (*Google_spanner_instance_iam_binding, string, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Create Google_spanner_instance_iam_binding", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_spanner_instance_iam_binding", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Update ...
func (h *Google_spanner_instance_iam_bindingHandler) Update(externalID string, desired *Google_spanner_instance_iam_binding) (*Google_spanner_instance_iam_binding, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Update Google_spanner_instance_iam_binding", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	actual, err := bridge.Update(h.provider, "google_spanner_instance_iam_binding", externalID, rc)
	if err != nil {
		return nil, err
	}
	x := &Google_spanner_instance_iam_binding{Google_spanner_instance_iam_binding_id: &externalID}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Update Actual State Google_spanner_instance_iam_binding", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Read ...
func (h *Google_spanner_instance_iam_bindingHandler) Read(externalID string) (*Google_spanner_instance_iam_binding, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Read Google_spanner_instance_iam_binding", "externalID", externalID)
	}
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_spanner_instance_iam_binding", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_spanner_instance_iam_binding{Google_spanner_instance_iam_binding_id: &id}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Read Actual State Google_spanner_instance_iam_binding", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Delete ...
func (h *Google_spanner_instance_iam_bindingHandler) Delete(externalID string) error {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Delete Google_spanner_instance_iam_binding", "externalID", externalID)
	}
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_spanner_instance_iam_binding", externalID)
}

type Google_spanner_instance_iam_member struct {
	Google_spanner_instance_iam_member_id *string `lyra:"ignore"`

	Etag *string

	Instance string

	Member string

	Project *string

	Role string
}

var Google_spanner_instance_iam_member_rtb = func(rtb service.ResourceTypeBuilder) {
	rtb.ProvidedAttributes(
		"google_spanner_instance_iam_member_id",

		"etag",

		"project",
	)
	rtb.ImmutableAttributes(

		"instance",

		"member",

		"project",

		"role",
	)
}

// Google_spanner_instance_iam_memberHandler ...
type Google_spanner_instance_iam_memberHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_spanner_instance_iam_memberHandler) Create(desired *Google_spanner_instance_iam_member) (*Google_spanner_instance_iam_member, string, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Create Google_spanner_instance_iam_member", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_spanner_instance_iam_member", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Update ...
func (h *Google_spanner_instance_iam_memberHandler) Update(externalID string, desired *Google_spanner_instance_iam_member) (*Google_spanner_instance_iam_member, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Update Google_spanner_instance_iam_member", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	actual, err := bridge.Update(h.provider, "google_spanner_instance_iam_member", externalID, rc)
	if err != nil {
		return nil, err
	}
	x := &Google_spanner_instance_iam_member{Google_spanner_instance_iam_member_id: &externalID}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Update Actual State Google_spanner_instance_iam_member", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Read ...
func (h *Google_spanner_instance_iam_memberHandler) Read(externalID string) (*Google_spanner_instance_iam_member, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Read Google_spanner_instance_iam_member", "externalID", externalID)
	}
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_spanner_instance_iam_member", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_spanner_instance_iam_member{Google_spanner_instance_iam_member_id: &id}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Read Actual State Google_spanner_instance_iam_member", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Delete ...
func (h *Google_spanner_instance_iam_memberHandler) Delete(externalID string) error {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Delete Google_spanner_instance_iam_member", "externalID", externalID)
	}
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_spanner_instance_iam_member", externalID)
}

type Google_spanner_instance_iam_policy struct {
	Google_spanner_instance_iam_policy_id *string `lyra:"ignore"`

	Etag *string

	Instance string

	Policy_data string

	Project *string
}

var Google_spanner_instance_iam_policy_rtb = func(rtb service.ResourceTypeBuilder) {
	rtb.ProvidedAttributes(
		"google_spanner_instance_iam_policy_id",

		"etag",

		"project",
	)
	rtb.ImmutableAttributes(

		"instance",

		"project",
	)
}

// Google_spanner_instance_iam_policyHandler ...
type Google_spanner_instance_iam_policyHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_spanner_instance_iam_policyHandler) Create(desired *Google_spanner_instance_iam_policy) (*Google_spanner_instance_iam_policy, string, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Create Google_spanner_instance_iam_policy", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_spanner_instance_iam_policy", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Update ...
func (h *Google_spanner_instance_iam_policyHandler) Update(externalID string, desired *Google_spanner_instance_iam_policy) (*Google_spanner_instance_iam_policy, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Update Google_spanner_instance_iam_policy", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	actual, err := bridge.Update(h.provider, "google_spanner_instance_iam_policy", externalID, rc)
	if err != nil {
		return nil, err
	}
	x := &Google_spanner_instance_iam_policy{Google_spanner_instance_iam_policy_id: &externalID}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Update Actual State Google_spanner_instance_iam_policy", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Read ...
func (h *Google_spanner_instance_iam_policyHandler) Read(externalID string) (*Google_spanner_instance_iam_policy, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Read Google_spanner_instance_iam_policy", "externalID", externalID)
	}
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_spanner_instance_iam_policy", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_spanner_instance_iam_policy{Google_spanner_instance_iam_policy_id: &id}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Read Actual State Google_spanner_instance_iam_policy", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Delete ...
func (h *Google_spanner_instance_iam_policyHandler) Delete(externalID string) error {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Delete Google_spanner_instance_iam_policy", "externalID", externalID)
	}
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_spanner_instance_iam_policy", externalID)
}

type Google_sql_database struct {
	Google_sql_database_id *string `lyra:"ignore"`

	Charset *string

	Collation *string

	Instance string

	Name string

	Project *string

	Self_link *string
}

var Google_sql_database_rtb = func(rtb service.ResourceTypeBuilder) {
	rtb.ProvidedAttributes(
		"google_sql_database_id",

		"charset",

		"collation",

		"project",

		"self_link",
	)
	rtb.ImmutableAttributes(

		"instance",

		"name",

		"project",
	)
}

// Google_sql_databaseHandler ...
type Google_sql_databaseHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_sql_databaseHandler) Create(desired *Google_sql_database) (*Google_sql_database, string, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Create Google_sql_database", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_sql_database", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Update ...
func (h *Google_sql_databaseHandler) Update(externalID string, desired *Google_sql_database) (*Google_sql_database, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Update Google_sql_database", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	actual, err := bridge.Update(h.provider, "google_sql_database", externalID, rc)
	if err != nil {
		return nil, err
	}
	x := &Google_sql_database{Google_sql_database_id: &externalID}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Update Actual State Google_sql_database", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Read ...
func (h *Google_sql_databaseHandler) Read(externalID string) (*Google_sql_database, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Read Google_sql_database", "externalID", externalID)
	}
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_sql_database", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_sql_database{Google_sql_database_id: &id}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Read Actual State Google_sql_database", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Delete ...
func (h *Google_sql_databaseHandler) Delete(externalID string) error {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Delete Google_sql_database", "externalID", externalID)
	}
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_sql_database", externalID)
}

type Google_sql_database_instance_ip_address_203 struct {
	Ip_address *string

	Time_to_retire *string
}

type Google_sql_database_instance_replica_configuration_204 struct {
	Ca_certificate *string

	Client_certificate *string

	Client_key *string

	Connect_retry_interval *int

	Dump_file_path *string

	Failover_target *bool

	Master_heartbeat_period *int

	Password *string

	Ssl_cipher *string

	Username *string

	Verify_server_certificate *bool
}

type Google_sql_database_instance_server_ca_cert_205 struct {
	Cert *string

	Common_name *string

	Create_time *string

	Expiration_time *string

	Sha1_fingerprint *string
}

type Google_sql_database_instance_settings_206_backup_configuration_207 struct {
	Binary_log_enabled *bool

	Enabled *bool

	Start_time *string
}

type Google_sql_database_instance_settings_206_database_flags_208 struct {
	Name *string

	Value *string
}

type Google_sql_database_instance_settings_206_ip_configuration_209_authorized_networks_210 struct {
	Expiration_time *string

	Name *string

	Value *string
}

type Google_sql_database_instance_settings_206_ip_configuration_209 struct {
	Authorized_networks *[]Google_sql_database_instance_settings_206_ip_configuration_209_authorized_networks_210

	Ipv4_enabled *bool

	Private_network *string

	Require_ssl *bool
}

type Google_sql_database_instance_settings_206_location_preference_211 struct {
	Follow_gae_application *string

	Zone *string
}

type Google_sql_database_instance_settings_206_maintenance_window_212 struct {
	Day *int

	Hour *int

	Update_track *string
}

type Google_sql_database_instance_settings_206 struct {
	Activation_policy *string

	Authorized_gae_applications *[]string

	Availability_type *string

	Backup_configuration *[]Google_sql_database_instance_settings_206_backup_configuration_207

	Crash_safe_replication *bool

	Database_flags *[]Google_sql_database_instance_settings_206_database_flags_208

	Disk_autoresize *bool

	Disk_size *int

	Disk_type *string

	Ip_configuration *[]Google_sql_database_instance_settings_206_ip_configuration_209

	Location_preference *[]Google_sql_database_instance_settings_206_location_preference_211

	Maintenance_window *[]Google_sql_database_instance_settings_206_maintenance_window_212

	Pricing_plan *string

	Replication_type *string

	Tier string

	User_labels *map[string]string

	Version *int
}

type Google_sql_database_instance struct {
	Google_sql_database_instance_id *string `lyra:"ignore"`

	Connection_name *string

	Database_version *string

	First_ip_address *string

	Ip_address *[]Google_sql_database_instance_ip_address_203

	Master_instance_name *string

	Name *string

	Project *string

	Region *string

	Replica_configuration *[]Google_sql_database_instance_replica_configuration_204

	Self_link *string

	Server_ca_cert *[]Google_sql_database_instance_server_ca_cert_205

	Service_account_email_address *string

	Settings []Google_sql_database_instance_settings_206
}

var Google_sql_database_instance_rtb = func(rtb service.ResourceTypeBuilder) {
	rtb.ProvidedAttributes(
		"google_sql_database_instance_id",

		"connection_name",

		"database_version",

		"first_ip_address",

		"ip_address",

		"master_instance_name",

		"name",

		"project",

		"region",

		"replica_configuration",

		"self_link",

		"server_ca_cert",

		"service_account_email_address",
	)
	rtb.ImmutableAttributes(

		"database_version",

		"master_instance_name",

		"name",

		"project",

		"region",
	)
}

// Google_sql_database_instanceHandler ...
type Google_sql_database_instanceHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_sql_database_instanceHandler) Create(desired *Google_sql_database_instance) (*Google_sql_database_instance, string, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Create Google_sql_database_instance", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_sql_database_instance", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Update ...
func (h *Google_sql_database_instanceHandler) Update(externalID string, desired *Google_sql_database_instance) (*Google_sql_database_instance, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Update Google_sql_database_instance", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	actual, err := bridge.Update(h.provider, "google_sql_database_instance", externalID, rc)
	if err != nil {
		return nil, err
	}
	x := &Google_sql_database_instance{Google_sql_database_instance_id: &externalID}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Update Actual State Google_sql_database_instance", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Read ...
func (h *Google_sql_database_instanceHandler) Read(externalID string) (*Google_sql_database_instance, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Read Google_sql_database_instance", "externalID", externalID)
	}
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_sql_database_instance", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_sql_database_instance{Google_sql_database_instance_id: &id}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Read Actual State Google_sql_database_instance", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Delete ...
func (h *Google_sql_database_instanceHandler) Delete(externalID string) error {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Delete Google_sql_database_instance", "externalID", externalID)
	}
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_sql_database_instance", externalID)
}

type Google_sql_ssl_cert struct {
	Google_sql_ssl_cert_id *string `lyra:"ignore"`

	Cert *string

	Cert_serial_number *string

	Common_name string

	Create_time *string

	Expiration_time *string

	Instance string

	Private_key *string

	Server_ca_cert *string

	Sha1_fingerprint *string
}

var Google_sql_ssl_cert_rtb = func(rtb service.ResourceTypeBuilder) {
	rtb.ProvidedAttributes(
		"google_sql_ssl_cert_id",

		"cert",

		"cert_serial_number",

		"create_time",

		"expiration_time",

		"private_key",

		"server_ca_cert",

		"sha1_fingerprint",
	)
	rtb.ImmutableAttributes(

		"common_name",

		"instance",
	)
}

// Google_sql_ssl_certHandler ...
type Google_sql_ssl_certHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_sql_ssl_certHandler) Create(desired *Google_sql_ssl_cert) (*Google_sql_ssl_cert, string, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Create Google_sql_ssl_cert", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_sql_ssl_cert", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Update ...
func (h *Google_sql_ssl_certHandler) Update(externalID string, desired *Google_sql_ssl_cert) (*Google_sql_ssl_cert, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Update Google_sql_ssl_cert", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	actual, err := bridge.Update(h.provider, "google_sql_ssl_cert", externalID, rc)
	if err != nil {
		return nil, err
	}
	x := &Google_sql_ssl_cert{Google_sql_ssl_cert_id: &externalID}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Update Actual State Google_sql_ssl_cert", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Read ...
func (h *Google_sql_ssl_certHandler) Read(externalID string) (*Google_sql_ssl_cert, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Read Google_sql_ssl_cert", "externalID", externalID)
	}
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_sql_ssl_cert", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_sql_ssl_cert{Google_sql_ssl_cert_id: &id}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Read Actual State Google_sql_ssl_cert", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Delete ...
func (h *Google_sql_ssl_certHandler) Delete(externalID string) error {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Delete Google_sql_ssl_cert", "externalID", externalID)
	}
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_sql_ssl_cert", externalID)
}

type Google_sql_user struct {
	Google_sql_user_id *string `lyra:"ignore"`

	Host *string

	Instance string

	Name string

	Password *string

	Project *string
}

var Google_sql_user_rtb = func(rtb service.ResourceTypeBuilder) {
	rtb.ProvidedAttributes(
		"google_sql_user_id",

		"host",

		"password",

		"project",
	)
	rtb.ImmutableAttributes(

		"host",

		"instance",

		"name",

		"project",
	)
}

// Google_sql_userHandler ...
type Google_sql_userHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_sql_userHandler) Create(desired *Google_sql_user) (*Google_sql_user, string, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Create Google_sql_user", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_sql_user", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Update ...
func (h *Google_sql_userHandler) Update(externalID string, desired *Google_sql_user) (*Google_sql_user, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Update Google_sql_user", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	actual, err := bridge.Update(h.provider, "google_sql_user", externalID, rc)
	if err != nil {
		return nil, err
	}
	x := &Google_sql_user{Google_sql_user_id: &externalID}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Update Actual State Google_sql_user", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Read ...
func (h *Google_sql_userHandler) Read(externalID string) (*Google_sql_user, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Read Google_sql_user", "externalID", externalID)
	}
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_sql_user", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_sql_user{Google_sql_user_id: &id}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Read Actual State Google_sql_user", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Delete ...
func (h *Google_sql_userHandler) Delete(externalID string) error {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Delete Google_sql_user", "externalID", externalID)
	}
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_sql_user", externalID)
}

type Google_storage_bucket_cors_213 struct {
	Max_age_seconds *int

	Method *[]string

	Origin *[]string

	Response_header *[]string
}

type Google_storage_bucket_encryption_214 struct {
	Default_kms_key_name string
}

type Google_storage_bucket_lifecycle_rule_215_action_216 struct {
	Storage_class *string

	Type string
}

type Google_storage_bucket_lifecycle_rule_215_condition_217 struct {
	Age *int

	Created_before *string

	Is_live *bool

	Matches_storage_class *[]string

	Num_newer_versions *int
}

type Google_storage_bucket_lifecycle_rule_215 struct {
	Action []Google_storage_bucket_lifecycle_rule_215_action_216

	Condition []Google_storage_bucket_lifecycle_rule_215_condition_217
}

type Google_storage_bucket_logging_218 struct {
	Log_bucket string

	Log_object_prefix *string
}

type Google_storage_bucket_versioning_219 struct {
	Enabled *bool
}

type Google_storage_bucket_website_220 struct {
	Main_page_suffix *string

	Not_found_page *string
}

type Google_storage_bucket struct {
	Google_storage_bucket_id *string `lyra:"ignore"`

	Cors *[]Google_storage_bucket_cors_213

	Encryption *[]Google_storage_bucket_encryption_214

	Force_destroy *bool

	Labels *map[string]string

	Lifecycle_rule *[]Google_storage_bucket_lifecycle_rule_215

	Location *string

	Logging *[]Google_storage_bucket_logging_218

	Name string

	Predefined_acl *string

	Project *string

	Self_link *string

	Storage_class *string

	Url *string

	Versioning *[]Google_storage_bucket_versioning_219

	Website *[]Google_storage_bucket_website_220
}

var Google_storage_bucket_rtb = func(rtb service.ResourceTypeBuilder) {
	rtb.ProvidedAttributes(
		"google_storage_bucket_id",

		"cors",

		"encryption",

		"force_destroy",

		"labels",

		"lifecycle_rule",

		"location",

		"logging",

		"predefined_acl",

		"project",

		"self_link",

		"storage_class",

		"url",

		"versioning",

		"website",
	)
	rtb.ImmutableAttributes(

		"location",

		"name",

		"predefined_acl",

		"project",

		"storage_class",
	)
}

// Google_storage_bucketHandler ...
type Google_storage_bucketHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_storage_bucketHandler) Create(desired *Google_storage_bucket) (*Google_storage_bucket, string, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Create Google_storage_bucket", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_storage_bucket", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Update ...
func (h *Google_storage_bucketHandler) Update(externalID string, desired *Google_storage_bucket) (*Google_storage_bucket, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Update Google_storage_bucket", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	actual, err := bridge.Update(h.provider, "google_storage_bucket", externalID, rc)
	if err != nil {
		return nil, err
	}
	x := &Google_storage_bucket{Google_storage_bucket_id: &externalID}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Update Actual State Google_storage_bucket", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Read ...
func (h *Google_storage_bucketHandler) Read(externalID string) (*Google_storage_bucket, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Read Google_storage_bucket", "externalID", externalID)
	}
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_storage_bucket", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_storage_bucket{Google_storage_bucket_id: &id}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Read Actual State Google_storage_bucket", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Delete ...
func (h *Google_storage_bucketHandler) Delete(externalID string) error {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Delete Google_storage_bucket", "externalID", externalID)
	}
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_storage_bucket", externalID)
}

type Google_storage_bucket_acl struct {
	Google_storage_bucket_acl_id *string `lyra:"ignore"`

	Bucket string

	Default_acl *string

	Predefined_acl *string

	Role_entity *[]string
}

var Google_storage_bucket_acl_rtb = func(rtb service.ResourceTypeBuilder) {
	rtb.ProvidedAttributes(
		"google_storage_bucket_acl_id",

		"default_acl",

		"predefined_acl",

		"role_entity",
	)
	rtb.ImmutableAttributes(

		"bucket",

		"predefined_acl",
	)
}

// Google_storage_bucket_aclHandler ...
type Google_storage_bucket_aclHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_storage_bucket_aclHandler) Create(desired *Google_storage_bucket_acl) (*Google_storage_bucket_acl, string, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Create Google_storage_bucket_acl", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_storage_bucket_acl", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Update ...
func (h *Google_storage_bucket_aclHandler) Update(externalID string, desired *Google_storage_bucket_acl) (*Google_storage_bucket_acl, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Update Google_storage_bucket_acl", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	actual, err := bridge.Update(h.provider, "google_storage_bucket_acl", externalID, rc)
	if err != nil {
		return nil, err
	}
	x := &Google_storage_bucket_acl{Google_storage_bucket_acl_id: &externalID}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Update Actual State Google_storage_bucket_acl", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Read ...
func (h *Google_storage_bucket_aclHandler) Read(externalID string) (*Google_storage_bucket_acl, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Read Google_storage_bucket_acl", "externalID", externalID)
	}
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_storage_bucket_acl", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_storage_bucket_acl{Google_storage_bucket_acl_id: &id}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Read Actual State Google_storage_bucket_acl", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Delete ...
func (h *Google_storage_bucket_aclHandler) Delete(externalID string) error {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Delete Google_storage_bucket_acl", "externalID", externalID)
	}
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_storage_bucket_acl", externalID)
}

type Google_storage_bucket_iam_binding struct {
	Google_storage_bucket_iam_binding_id *string `lyra:"ignore"`

	Bucket string

	Etag *string

	Members []string

	Role string
}

var Google_storage_bucket_iam_binding_rtb = func(rtb service.ResourceTypeBuilder) {
	rtb.ProvidedAttributes(
		"google_storage_bucket_iam_binding_id",

		"etag",
	)
	rtb.ImmutableAttributes(

		"bucket",

		"role",
	)
}

// Google_storage_bucket_iam_bindingHandler ...
type Google_storage_bucket_iam_bindingHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_storage_bucket_iam_bindingHandler) Create(desired *Google_storage_bucket_iam_binding) (*Google_storage_bucket_iam_binding, string, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Create Google_storage_bucket_iam_binding", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_storage_bucket_iam_binding", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Update ...
func (h *Google_storage_bucket_iam_bindingHandler) Update(externalID string, desired *Google_storage_bucket_iam_binding) (*Google_storage_bucket_iam_binding, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Update Google_storage_bucket_iam_binding", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	actual, err := bridge.Update(h.provider, "google_storage_bucket_iam_binding", externalID, rc)
	if err != nil {
		return nil, err
	}
	x := &Google_storage_bucket_iam_binding{Google_storage_bucket_iam_binding_id: &externalID}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Update Actual State Google_storage_bucket_iam_binding", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Read ...
func (h *Google_storage_bucket_iam_bindingHandler) Read(externalID string) (*Google_storage_bucket_iam_binding, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Read Google_storage_bucket_iam_binding", "externalID", externalID)
	}
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_storage_bucket_iam_binding", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_storage_bucket_iam_binding{Google_storage_bucket_iam_binding_id: &id}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Read Actual State Google_storage_bucket_iam_binding", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Delete ...
func (h *Google_storage_bucket_iam_bindingHandler) Delete(externalID string) error {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Delete Google_storage_bucket_iam_binding", "externalID", externalID)
	}
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_storage_bucket_iam_binding", externalID)
}

type Google_storage_bucket_iam_member struct {
	Google_storage_bucket_iam_member_id *string `lyra:"ignore"`

	Bucket string

	Etag *string

	Member string

	Role string
}

var Google_storage_bucket_iam_member_rtb = func(rtb service.ResourceTypeBuilder) {
	rtb.ProvidedAttributes(
		"google_storage_bucket_iam_member_id",

		"etag",
	)
	rtb.ImmutableAttributes(

		"bucket",

		"member",

		"role",
	)
}

// Google_storage_bucket_iam_memberHandler ...
type Google_storage_bucket_iam_memberHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_storage_bucket_iam_memberHandler) Create(desired *Google_storage_bucket_iam_member) (*Google_storage_bucket_iam_member, string, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Create Google_storage_bucket_iam_member", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_storage_bucket_iam_member", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Update ...
func (h *Google_storage_bucket_iam_memberHandler) Update(externalID string, desired *Google_storage_bucket_iam_member) (*Google_storage_bucket_iam_member, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Update Google_storage_bucket_iam_member", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	actual, err := bridge.Update(h.provider, "google_storage_bucket_iam_member", externalID, rc)
	if err != nil {
		return nil, err
	}
	x := &Google_storage_bucket_iam_member{Google_storage_bucket_iam_member_id: &externalID}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Update Actual State Google_storage_bucket_iam_member", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Read ...
func (h *Google_storage_bucket_iam_memberHandler) Read(externalID string) (*Google_storage_bucket_iam_member, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Read Google_storage_bucket_iam_member", "externalID", externalID)
	}
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_storage_bucket_iam_member", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_storage_bucket_iam_member{Google_storage_bucket_iam_member_id: &id}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Read Actual State Google_storage_bucket_iam_member", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Delete ...
func (h *Google_storage_bucket_iam_memberHandler) Delete(externalID string) error {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Delete Google_storage_bucket_iam_member", "externalID", externalID)
	}
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_storage_bucket_iam_member", externalID)
}

type Google_storage_bucket_iam_policy struct {
	Google_storage_bucket_iam_policy_id *string `lyra:"ignore"`

	Bucket string

	Etag *string

	Policy_data string
}

var Google_storage_bucket_iam_policy_rtb = func(rtb service.ResourceTypeBuilder) {
	rtb.ProvidedAttributes(
		"google_storage_bucket_iam_policy_id",

		"etag",
	)
	rtb.ImmutableAttributes(

		"bucket",
	)
}

// Google_storage_bucket_iam_policyHandler ...
type Google_storage_bucket_iam_policyHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_storage_bucket_iam_policyHandler) Create(desired *Google_storage_bucket_iam_policy) (*Google_storage_bucket_iam_policy, string, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Create Google_storage_bucket_iam_policy", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_storage_bucket_iam_policy", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Update ...
func (h *Google_storage_bucket_iam_policyHandler) Update(externalID string, desired *Google_storage_bucket_iam_policy) (*Google_storage_bucket_iam_policy, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Update Google_storage_bucket_iam_policy", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	actual, err := bridge.Update(h.provider, "google_storage_bucket_iam_policy", externalID, rc)
	if err != nil {
		return nil, err
	}
	x := &Google_storage_bucket_iam_policy{Google_storage_bucket_iam_policy_id: &externalID}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Update Actual State Google_storage_bucket_iam_policy", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Read ...
func (h *Google_storage_bucket_iam_policyHandler) Read(externalID string) (*Google_storage_bucket_iam_policy, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Read Google_storage_bucket_iam_policy", "externalID", externalID)
	}
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_storage_bucket_iam_policy", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_storage_bucket_iam_policy{Google_storage_bucket_iam_policy_id: &id}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Read Actual State Google_storage_bucket_iam_policy", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Delete ...
func (h *Google_storage_bucket_iam_policyHandler) Delete(externalID string) error {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Delete Google_storage_bucket_iam_policy", "externalID", externalID)
	}
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_storage_bucket_iam_policy", externalID)
}

type Google_storage_bucket_object struct {
	Google_storage_bucket_object_id *string `lyra:"ignore"`

	Bucket string

	Cache_control *string

	Content *string

	Content_disposition *string

	Content_encoding *string

	Content_language *string

	Content_type *string

	Crc32c *string

	Detect_md5hash *string

	Md5hash *string

	Name string

	Predefined_acl *string

	Source *string

	Storage_class *string
}

var Google_storage_bucket_object_rtb = func(rtb service.ResourceTypeBuilder) {
	rtb.ProvidedAttributes(
		"google_storage_bucket_object_id",

		"cache_control",

		"content",

		"content_disposition",

		"content_encoding",

		"content_language",

		"content_type",

		"crc32c",

		"detect_md5hash",

		"md5hash",

		"predefined_acl",

		"source",

		"storage_class",
	)
	rtb.ImmutableAttributes(

		"bucket",

		"cache_control",

		"content",

		"content_disposition",

		"content_encoding",

		"content_language",

		"content_type",

		"detect_md5hash",

		"name",

		"predefined_acl",

		"source",

		"storage_class",
	)
}

// Google_storage_bucket_objectHandler ...
type Google_storage_bucket_objectHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_storage_bucket_objectHandler) Create(desired *Google_storage_bucket_object) (*Google_storage_bucket_object, string, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Create Google_storage_bucket_object", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_storage_bucket_object", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Update ...
func (h *Google_storage_bucket_objectHandler) Update(externalID string, desired *Google_storage_bucket_object) (*Google_storage_bucket_object, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Update Google_storage_bucket_object", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	actual, err := bridge.Update(h.provider, "google_storage_bucket_object", externalID, rc)
	if err != nil {
		return nil, err
	}
	x := &Google_storage_bucket_object{Google_storage_bucket_object_id: &externalID}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Update Actual State Google_storage_bucket_object", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Read ...
func (h *Google_storage_bucket_objectHandler) Read(externalID string) (*Google_storage_bucket_object, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Read Google_storage_bucket_object", "externalID", externalID)
	}
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_storage_bucket_object", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_storage_bucket_object{Google_storage_bucket_object_id: &id}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Read Actual State Google_storage_bucket_object", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Delete ...
func (h *Google_storage_bucket_objectHandler) Delete(externalID string) error {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Delete Google_storage_bucket_object", "externalID", externalID)
	}
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_storage_bucket_object", externalID)
}

type Google_storage_default_object_access_control_project_team_221 struct {
	Project_number *string

	Team *string
}

type Google_storage_default_object_access_control struct {
	Google_storage_default_object_access_control_id *string `lyra:"ignore"`

	Bucket string

	Domain *string

	Email *string

	Entity string

	Entity_id *string

	Generation *int

	Object *string

	Project_team *[]Google_storage_default_object_access_control_project_team_221

	Role string
}

var Google_storage_default_object_access_control_rtb = func(rtb service.ResourceTypeBuilder) {
	rtb.ProvidedAttributes(
		"google_storage_default_object_access_control_id",

		"domain",

		"email",

		"entity_id",

		"generation",

		"object",

		"project_team",
	)
	rtb.ImmutableAttributes()
}

// Google_storage_default_object_access_controlHandler ...
type Google_storage_default_object_access_controlHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_storage_default_object_access_controlHandler) Create(desired *Google_storage_default_object_access_control) (*Google_storage_default_object_access_control, string, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Create Google_storage_default_object_access_control", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_storage_default_object_access_control", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Update ...
func (h *Google_storage_default_object_access_controlHandler) Update(externalID string, desired *Google_storage_default_object_access_control) (*Google_storage_default_object_access_control, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Update Google_storage_default_object_access_control", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	actual, err := bridge.Update(h.provider, "google_storage_default_object_access_control", externalID, rc)
	if err != nil {
		return nil, err
	}
	x := &Google_storage_default_object_access_control{Google_storage_default_object_access_control_id: &externalID}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Update Actual State Google_storage_default_object_access_control", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Read ...
func (h *Google_storage_default_object_access_controlHandler) Read(externalID string) (*Google_storage_default_object_access_control, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Read Google_storage_default_object_access_control", "externalID", externalID)
	}
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_storage_default_object_access_control", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_storage_default_object_access_control{Google_storage_default_object_access_control_id: &id}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Read Actual State Google_storage_default_object_access_control", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Delete ...
func (h *Google_storage_default_object_access_controlHandler) Delete(externalID string) error {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Delete Google_storage_default_object_access_control", "externalID", externalID)
	}
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_storage_default_object_access_control", externalID)
}

type Google_storage_default_object_acl struct {
	Google_storage_default_object_acl_id *string `lyra:"ignore"`

	Bucket string

	Role_entity *[]string
}

var Google_storage_default_object_acl_rtb = func(rtb service.ResourceTypeBuilder) {
	rtb.ProvidedAttributes(
		"google_storage_default_object_acl_id",

		"role_entity",
	)
	rtb.ImmutableAttributes(

		"bucket",
	)
}

// Google_storage_default_object_aclHandler ...
type Google_storage_default_object_aclHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_storage_default_object_aclHandler) Create(desired *Google_storage_default_object_acl) (*Google_storage_default_object_acl, string, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Create Google_storage_default_object_acl", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_storage_default_object_acl", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Update ...
func (h *Google_storage_default_object_aclHandler) Update(externalID string, desired *Google_storage_default_object_acl) (*Google_storage_default_object_acl, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Update Google_storage_default_object_acl", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	actual, err := bridge.Update(h.provider, "google_storage_default_object_acl", externalID, rc)
	if err != nil {
		return nil, err
	}
	x := &Google_storage_default_object_acl{Google_storage_default_object_acl_id: &externalID}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Update Actual State Google_storage_default_object_acl", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Read ...
func (h *Google_storage_default_object_aclHandler) Read(externalID string) (*Google_storage_default_object_acl, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Read Google_storage_default_object_acl", "externalID", externalID)
	}
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_storage_default_object_acl", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_storage_default_object_acl{Google_storage_default_object_acl_id: &id}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Read Actual State Google_storage_default_object_acl", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Delete ...
func (h *Google_storage_default_object_aclHandler) Delete(externalID string) error {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Delete Google_storage_default_object_acl", "externalID", externalID)
	}
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_storage_default_object_acl", externalID)
}

type Google_storage_notification struct {
	Google_storage_notification_id *string `lyra:"ignore"`

	Bucket string

	Custom_attributes *map[string]string

	Event_types *[]string

	Object_name_prefix *string

	Payload_format string

	Self_link *string

	Topic string
}

var Google_storage_notification_rtb = func(rtb service.ResourceTypeBuilder) {
	rtb.ProvidedAttributes(
		"google_storage_notification_id",

		"custom_attributes",

		"event_types",

		"object_name_prefix",

		"self_link",
	)
	rtb.ImmutableAttributes(

		"bucket",

		"custom_attributes",

		"event_types",

		"object_name_prefix",

		"payload_format",

		"topic",
	)
}

// Google_storage_notificationHandler ...
type Google_storage_notificationHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_storage_notificationHandler) Create(desired *Google_storage_notification) (*Google_storage_notification, string, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Create Google_storage_notification", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_storage_notification", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Update ...
func (h *Google_storage_notificationHandler) Update(externalID string, desired *Google_storage_notification) (*Google_storage_notification, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Update Google_storage_notification", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	actual, err := bridge.Update(h.provider, "google_storage_notification", externalID, rc)
	if err != nil {
		return nil, err
	}
	x := &Google_storage_notification{Google_storage_notification_id: &externalID}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Update Actual State Google_storage_notification", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Read ...
func (h *Google_storage_notificationHandler) Read(externalID string) (*Google_storage_notification, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Read Google_storage_notification", "externalID", externalID)
	}
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_storage_notification", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_storage_notification{Google_storage_notification_id: &id}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Read Actual State Google_storage_notification", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Delete ...
func (h *Google_storage_notificationHandler) Delete(externalID string) error {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Delete Google_storage_notification", "externalID", externalID)
	}
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_storage_notification", externalID)
}

type Google_storage_object_access_control_project_team_222 struct {
	Project_number *string

	Team *string
}

type Google_storage_object_access_control struct {
	Google_storage_object_access_control_id *string `lyra:"ignore"`

	Bucket string

	Domain *string

	Email *string

	Entity string

	Entity_id *string

	Generation *int

	Object string

	Project_team *[]Google_storage_object_access_control_project_team_222

	Role string
}

var Google_storage_object_access_control_rtb = func(rtb service.ResourceTypeBuilder) {
	rtb.ProvidedAttributes(
		"google_storage_object_access_control_id",

		"domain",

		"email",

		"entity_id",

		"generation",

		"project_team",
	)
	rtb.ImmutableAttributes()
}

// Google_storage_object_access_controlHandler ...
type Google_storage_object_access_controlHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_storage_object_access_controlHandler) Create(desired *Google_storage_object_access_control) (*Google_storage_object_access_control, string, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Create Google_storage_object_access_control", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_storage_object_access_control", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Update ...
func (h *Google_storage_object_access_controlHandler) Update(externalID string, desired *Google_storage_object_access_control) (*Google_storage_object_access_control, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Update Google_storage_object_access_control", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	actual, err := bridge.Update(h.provider, "google_storage_object_access_control", externalID, rc)
	if err != nil {
		return nil, err
	}
	x := &Google_storage_object_access_control{Google_storage_object_access_control_id: &externalID}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Update Actual State Google_storage_object_access_control", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Read ...
func (h *Google_storage_object_access_controlHandler) Read(externalID string) (*Google_storage_object_access_control, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Read Google_storage_object_access_control", "externalID", externalID)
	}
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_storage_object_access_control", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_storage_object_access_control{Google_storage_object_access_control_id: &id}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Read Actual State Google_storage_object_access_control", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Delete ...
func (h *Google_storage_object_access_controlHandler) Delete(externalID string) error {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Delete Google_storage_object_access_control", "externalID", externalID)
	}
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_storage_object_access_control", externalID)
}

type Google_storage_object_acl struct {
	Google_storage_object_acl_id *string `lyra:"ignore"`

	Bucket string

	Object string

	Predefined_acl *string

	Role_entity *[]string
}

var Google_storage_object_acl_rtb = func(rtb service.ResourceTypeBuilder) {
	rtb.ProvidedAttributes(
		"google_storage_object_acl_id",

		"predefined_acl",

		"role_entity",
	)
	rtb.ImmutableAttributes(

		"bucket",

		"object",

		"predefined_acl",
	)
}

// Google_storage_object_aclHandler ...
type Google_storage_object_aclHandler struct {
	provider *schema.Provider
}

// Create ...
func (h *Google_storage_object_aclHandler) Create(desired *Google_storage_object_acl) (*Google_storage_object_acl, string, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Create Google_storage_object_acl", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	id, err := bridge.Create(h.provider, "google_storage_object_acl", rc)
	if err != nil {
		return nil, "", err
	}
	actual, err := h.Read(id)
	if err != nil {
		return nil, "", err
	}
	return actual, id, nil
}

// Update ...
func (h *Google_storage_object_aclHandler) Update(externalID string, desired *Google_storage_object_acl) (*Google_storage_object_acl, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Update Google_storage_object_acl", "desired", spew.Sdump(desired))
	}
	configureProvider(h.provider)
	rc := &terraform.ResourceConfig{
		Config: bridge.TerraformMarshal(desired),
	}
	actual, err := bridge.Update(h.provider, "google_storage_object_acl", externalID, rc)
	if err != nil {
		return nil, err
	}
	x := &Google_storage_object_acl{Google_storage_object_acl_id: &externalID}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Update Actual State Google_storage_object_acl", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Read ...
func (h *Google_storage_object_aclHandler) Read(externalID string) (*Google_storage_object_acl, error) {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Read Google_storage_object_acl", "externalID", externalID)
	}
	configureProvider(h.provider)
	id, actual, err := bridge.Read(h.provider, "google_storage_object_acl", externalID)
	if err != nil {
		return nil, err
	}
	x := &Google_storage_object_acl{Google_storage_object_acl_id: &id}
	bridge.TerraformUnmarshal(actual, x)
	if log.IsInfo() {
		log.Info("Read Actual State Google_storage_object_acl", "actual", spew.Sdump(x))
	}
	return x, nil
}

// Delete ...
func (h *Google_storage_object_aclHandler) Delete(externalID string) error {
	log := hclog.Default()
	if log.IsInfo() {
		log.Info("Delete Google_storage_object_acl", "externalID", externalID)
	}
	configureProvider(h.provider)
	return bridge.Delete(h.provider, "google_storage_object_acl", externalID)
}
