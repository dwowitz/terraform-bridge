// Code generated by Lyra DO NOT EDIT.

// This code is generated on a per-Provider basis using "tf-gen"
// Long term our hope is to remove this generation step and adopt dynamic approach

package google

import (
	"github.com/hashicorp/terraform/helper/schema"
	"github.com/lyraproj/pcore/px"
	"github.com/lyraproj/servicesdk/service"
	"github.com/lyraproj/terraform-bridge/pkg/bridge"
)

type (
	App_engine_application struct {
		App_engine_application_id *string `lyra:"tf-gen.ignore"`
		Auth_domain               *string
		Code_bucket               *string
		Default_bucket            *string
		Default_hostname          *string
		Feature_settings          *[]map[string]bool `puppet:"type => Optional[Array[Struct[Optional[split_health_checks]=>Boolean]]]"`
		Gcr_domain                *string
		Location_id               string
		Name                      *string
		Project                   *string
		Serving_status            *string
		Url_dispatch_rule         *[]map[string]string `puppet:"type => Optional[Array[Struct[Optional[domain]=>String,Optional[path]=>String,Optional[service]=>String]]]"`
	}

	Bigquery_dataset struct {
		Bigquery_dataset_id         *string                   `lyra:"tf-gen.ignore"`
		Access                      *[]map[string]interface{} `puppet:"type => Optional[Array[Struct[Optional[domain]=>String,Optional[group_by_email]=>String,Optional[role]=>String,Optional[special_group]=>String,Optional[user_by_email]=>String,Optional[view]=>Array[Struct[dataset_id=>String,project_id=>String,table_id=>String]]]]]"`
		Creation_time               *int64
		Dataset_id                  string
		Default_table_expiration_ms *int64
		Description                 *string
		Etag                        *string
		Friendly_name               *string
		Labels                      *map[string]string
		Last_modified_time          *int64
		Location                    string `puppet:"value=>'US'"`
		Project                     *string
		Self_link                   *string
	}

	Bigquery_table struct {
		Bigquery_table_id   *string `lyra:"tf-gen.ignore"`
		Creation_time       *int64
		Dataset_id          string
		Description         *string
		Etag                *string
		Expiration_time     *int64
		Friendly_name       *string
		Labels              *map[string]string
		Last_modified_time  *int64
		Location            *string
		Num_bytes           *int64
		Num_long_term_bytes *int64
		Num_rows            *int64
		Project             *string
		Schema              *string
		Self_link           *string
		Table_id            string
		Time_partitioning   *[]map[string]interface{} `puppet:"type => Optional[Array[Struct[Optional[expiration_ms]=>Integer,Optional[field]=>String,type=>String]]]"`
		Type                *string
		View                *[]map[string]interface{} `puppet:"type => Optional[Array[Struct[query=>String,Optional[use_legacy_sql]=>Boolean]]]"`
	}

	Bigtable_instance struct {
		Bigtable_instance_id *string                   `lyra:"tf-gen.ignore"`
		Cluster              *[]map[string]interface{} `puppet:"type => Optional[Array[Struct[Optional[cluster_id]=>String,Optional[num_nodes]=>Integer,Optional[storage_type]=>String,Optional[zone]=>String]]]"`
		Cluster_id           *string
		Display_name         *string
		Instance_type        string `puppet:"value=>'PRODUCTION'"`
		Name                 string
		Num_nodes            *int64
		Project              *string
		Storage_type         string `puppet:"value=>'SSD'"`
		Zone                 *string
	}

	Bigtable_table struct {
		Bigtable_table_id *string `lyra:"tf-gen.ignore"`
		Instance_name     string
		Name              string
		Project           *string
		Split_keys        *[]string
	}

	Billing_account_iam_binding struct {
		Billing_account_iam_binding_id *string `lyra:"tf-gen.ignore"`
		Billing_account_id             string
		Etag                           *string
		Members                        []string
		Role                           string
	}

	Billing_account_iam_member struct {
		Billing_account_iam_member_id *string `lyra:"tf-gen.ignore"`
		Billing_account_id            string
		Etag                          *string
		Member                        string
		Role                          string
	}

	Billing_account_iam_policy struct {
		Billing_account_iam_policy_id *string `lyra:"tf-gen.ignore"`
		Billing_account_id            string
		Etag                          *string
		Policy_data                   string
	}

	Binary_authorization_attestor struct {
		Binary_authorization_attestor_id *string                  `lyra:"tf-gen.ignore"`
		Attestation_authority_note       []map[string]interface{} `puppet:"type => Array[Struct[Optional[delegation_service_account_email]=>String,note_reference=>String,Optional[public_keys]=>Array[Struct[ascii_armored_pgp_public_key=>String,Optional[comment]=>String,Optional[id]=>String]]]]"`
		Description                      *string
		Name                             string
		Project                          *string
	}

	Binary_authorization_policy struct {
		Binary_authorization_policy_id *string                   `lyra:"tf-gen.ignore"`
		Admission_whitelist_patterns   *[]map[string]string      `puppet:"type => Optional[Array[Struct[Optional[name_pattern]=>String]]]"`
		Cluster_admission_rules        *[]map[string]interface{} `puppet:"type => Optional[Array[Struct[cluster=>String,Optional[enforcement_mode]=>String,Optional[evaluation_mode]=>String,Optional[require_attestations_by]=>Array[String]]]]"`
		Default_admission_rule         []map[string]interface{}  `puppet:"type => Array[Struct[enforcement_mode=>String,evaluation_mode=>String,Optional[require_attestations_by]=>Array[String]]]"`
		Description                    *string
		Project                        *string
	}

	Cloudbuild_trigger struct {
		Cloudbuild_trigger_id *string                     `lyra:"tf-gen.ignore"`
		Build                 *[]map[string][]interface{} `puppet:"type => Optional[Array[Struct[Optional[images]=>Array[String],Optional[step]=>Array[Struct[Optional[args]=>String,Optional[name]=>String]],Optional[tags]=>Array[String]]]]"`
		Description           *string
		Filename              *string
		Project               *string
		Substitutions         *map[string]string
		Trigger_template      *[]map[string]string `puppet:"type => Optional[Array[Struct[Optional[branch_name]=>String,Optional[commit_sha]=>String,Optional[dir]=>String,Optional[project]=>String,Optional[repo_name]=>String,Optional[tag_name]=>String]]]"`
	}

	Cloudfunctions_function struct {
		Cloudfunctions_function_id *string `lyra:"tf-gen.ignore"`
		Available_memory_mb        int64   `puppet:"value=>256"`
		Description                *string
		Entry_point                *string
		Environment_variables      *map[string]string
		Event_trigger              *[]map[string]interface{} `puppet:"type => Optional[Array[Struct[event_type=>String,Optional[failure_policy]=>Array[Struct[retry=>Boolean]],resource=>String]]]"`
		Https_trigger_url          *string
		Labels                     *map[string]string
		Name                       string
		Project                    *string
		Region                     *string
		Retry_on_failure           *bool
		Runtime                    *string
		Source_archive_bucket      string
		Source_archive_object      string
		Timeout                    int64 `puppet:"value=>60"`
		Trigger_bucket             *string
		Trigger_http               *bool
		Trigger_topic              *string
	}

	Cloudiot_registry struct {
		Cloudiot_registry_id      *string                              `lyra:"tf-gen.ignore"`
		Credentials               *[]map[string]map[string]interface{} `puppet:"type => Optional[Array[Struct[Optional[public_key_certificate]=>Hash[String,Struct[certificate=>String,format=>String]]]]]"`
		Event_notification_config *map[string]map[string]string        `puppet:"type => Optional[Hash[String,Struct[pubsub_topic_name=>String]]]"`
		Http_config               *map[string]map[string]string        `puppet:"type => Optional[Hash[String,Struct[http_enabled_state=>String]]]"`
		Mqtt_config               *map[string]map[string]string        `puppet:"type => Optional[Hash[String,Struct[mqtt_enabled_state=>String]]]"`
		Name                      string
		Project                   *string
		Region                    *string
		State_notification_config *map[string]map[string]string `puppet:"type => Optional[Hash[String,Struct[pubsub_topic_name=>String]]]"`
	}

	Composer_environment struct {
		Composer_environment_id *string                   `lyra:"tf-gen.ignore"`
		Config                  *[]map[string]interface{} `puppet:"type => Optional[Array[Struct[Optional[airflow_uri]=>String,Optional[dag_gcs_prefix]=>String,Optional[gke_cluster]=>String,Optional[node_config]=>Array[Struct[Optional[disk_size_gb]=>Integer,Optional[machine_type]=>String,Optional[network]=>String,Optional[oauth_scopes]=>Array[String],Optional[service_account]=>String,Optional[subnetwork]=>String,Optional[tags]=>Array[String],Optional[zone]=>String]],Optional[node_count]=>Integer,Optional[software_config]=>Array[Struct[Optional[airflow_config_overrides]=>Hash[String,String],Optional[env_variables]=>Hash[String,String],Optional[image_version]=>String,Optional[pypi_packages]=>Hash[String,String]]]]]]"`
		Labels                  *map[string]string
		Name                    string
		Project                 *string
		Region                  *string
	}

	Compute_address struct {
		Compute_address_id *string `lyra:"tf-gen.ignore"`
		Address            *string
		Address_type       string `puppet:"value=>'EXTERNAL'"`
		Creation_timestamp *string
		Description        *string
		Label_fingerprint  *string
		Labels             *map[string]string
		Name               string
		Network_tier       *string
		Project            *string
		Region             *string
		Self_link          *string
		Subnetwork         *string
		Users              *[]string
	}

	Compute_attached_disk struct {
		Compute_attached_disk_id *string `lyra:"tf-gen.ignore"`
		Device_name              *string
		Disk                     string
		Instance                 string
		Mode                     string `puppet:"value=>'READ_WRITE'"`
		Project                  *string
		Zone                     *string
	}

	Compute_autoscaler struct {
		Compute_autoscaler_id *string                  `lyra:"tf-gen.ignore"`
		Autoscaling_policy    []map[string]interface{} `puppet:"type => Array[Struct[Optional[cooldown_period]=>Integer,Optional[cpu_utilization]=>Array[Struct[target=>Float]],Optional[load_balancing_utilization]=>Array[Struct[target=>Float]],max_replicas=>Integer,Optional[metric]=>Array[Struct[name=>String,target=>Float,type=>String]],min_replicas=>Integer]]"`
		Creation_timestamp    *string
		Description           *string
		Name                  string
		Project               *string
		Self_link             *string
		Target                string
		Zone                  *string
	}

	Compute_backend_bucket struct {
		Compute_backend_bucket_id *string `lyra:"tf-gen.ignore"`
		Bucket_name               string
		Creation_timestamp        *string
		Description               *string
		Enable_cdn                *bool
		Name                      string
		Project                   *string
		Self_link                 *string
	}

	Compute_backend_service struct {
		Compute_backend_service_id      *string                     `lyra:"tf-gen.ignore"`
		Backend                         *[]map[string]interface{}   `puppet:"type => Optional[Array[Struct[Optional[balancing_mode]=>String,Optional[capacity_scaler]=>Float,Optional[description]=>String,Optional[group]=>String,Optional[max_connections]=>Integer,Optional[max_connections_per_instance]=>Integer,Optional[max_rate]=>Integer,Optional[max_rate_per_instance]=>Float,Optional[max_utilization]=>Float]]]"`
		Cdn_policy                      *[]map[string][]interface{} `puppet:"type => Optional[Array[Struct[Optional[cache_key_policy]=>Array[Struct[Optional[include_host]=>Boolean,Optional[include_protocol]=>Boolean,Optional[include_query_string]=>Boolean,Optional[query_string_blacklist]=>Array[String],Optional[query_string_whitelist]=>Array[String]]]]]]"`
		Connection_draining_timeout_sec int64                       `puppet:"value=>300"`
		Custom_request_headers          *[]string
		Description                     *string
		Enable_cdn                      bool `puppet:"value=>false"`
		Fingerprint                     *string
		Health_checks                   []string
		Iap                             *[]map[string]string `puppet:"type => Optional[Array[Struct[oauth2_client_id=>String,oauth2_client_secret=>String]]]"`
		Name                            string
		Port_name                       *string
		Project                         *string
		Protocol                        *string
		Region                          *string
		Security_policy                 *string
		Self_link                       *string
		Session_affinity                *string
		Timeout_sec                     *int64
	}

	Compute_disk struct {
		Compute_disk_id                *string `lyra:"tf-gen.ignore"`
		Creation_timestamp             *string
		Description                    *string
		Disk_encryption_key            *[]map[string]string `puppet:"type => Optional[Array[Struct[Optional[raw_key]=>String,Optional[sha256]=>String]]]"`
		Disk_encryption_key_raw        *string
		Disk_encryption_key_sha256     *string
		Image                          *string
		Label_fingerprint              *string
		Labels                         *map[string]string
		Last_attach_timestamp          *string
		Last_detach_timestamp          *string
		Name                           string
		Project                        *string
		Self_link                      *string
		Size                           *int64
		Snapshot                       *string
		Source_image_encryption_key    *[]map[string]string `puppet:"type => Optional[Array[Struct[Optional[raw_key]=>String,Optional[sha256]=>String]]]"`
		Source_image_id                *string
		Source_snapshot_encryption_key *[]map[string]string `puppet:"type => Optional[Array[Struct[Optional[raw_key]=>String,Optional[sha256]=>String]]]"`
		Source_snapshot_id             *string
		Type                           string `puppet:"value=>'pd-standard'"`
		Users                          *[]string
		Zone                           *string
	}

	Compute_firewall struct {
		Compute_firewall_id     *string                   `lyra:"tf-gen.ignore"`
		Allow                   *[]map[string]interface{} `puppet:"type => Optional[Array[Struct[Optional[ports]=>Array[String],protocol=>String]]]"`
		Creation_timestamp      *string
		Deny                    *[]map[string]interface{} `puppet:"type => Optional[Array[Struct[Optional[ports]=>Array[String],protocol=>String]]]"`
		Description             *string
		Destination_ranges      *[]string
		Direction               *string
		Disabled                *bool
		Enable_logging          *bool
		Name                    string
		Network                 string
		Priority                int64 `puppet:"value=>1000"`
		Project                 *string
		Self_link               *string
		Source_ranges           *[]string
		Source_service_accounts *[]string
		Source_tags             *[]string
		Target_service_accounts *[]string
		Target_tags             *[]string
	}

	Compute_forwarding_rule struct {
		Compute_forwarding_rule_id *string `lyra:"tf-gen.ignore"`
		Backend_service            *string
		Creation_timestamp         *string
		Description                *string
		Ip_address                 *string
		Ip_protocol                *string
		Ip_version                 *string
		Label_fingerprint          *string
		Labels                     *map[string]string
		Load_balancing_scheme      string `puppet:"value=>'EXTERNAL'"`
		Name                       string
		Network                    *string
		Network_tier               *string
		Port_range                 *string
		Ports                      *[]string
		Project                    *string
		Region                     *string
		Self_link                  *string
		Service_label              *string
		Service_name               *string
		Subnetwork                 *string
		Target                     *string
	}

	Compute_global_address struct {
		Compute_global_address_id *string `lyra:"tf-gen.ignore"`
		Address                   *string
		Address_type              string `puppet:"value=>'EXTERNAL'"`
		Creation_timestamp        *string
		Description               *string
		Ip_version                *string
		Label_fingerprint         *string
		Labels                    *map[string]string
		Name                      string
		Network                   *string
		Prefix_length             *int64
		Project                   *string
		Purpose                   *string
		Self_link                 *string
	}

	Compute_global_forwarding_rule struct {
		Compute_global_forwarding_rule_id *string `lyra:"tf-gen.ignore"`
		Description                       *string
		Ip_address                        *string
		Ip_protocol                       *string
		Ip_version                        *string
		Label_fingerprint                 *string
		Labels                            *map[string]string
		Name                              string
		Port_range                        *string
		Project                           *string
		Region                            *string
		Self_link                         *string
		Target                            string
	}

	Compute_health_check struct {
		Compute_health_check_id *string `lyra:"tf-gen.ignore"`
		Check_interval_sec      int64   `puppet:"value=>5"`
		Creation_timestamp      *string
		Description             *string
		Healthy_threshold       int64                     `puppet:"value=>2"`
		Http_health_check       *[]map[string]interface{} `puppet:"type => Optional[Array[Struct[Optional[host]=>String,Optional[port]=>Integer,Optional[proxy_header]=>String,Optional[request_path]=>String,Optional[response]=>String]]]"`
		Https_health_check      *[]map[string]interface{} `puppet:"type => Optional[Array[Struct[Optional[host]=>String,Optional[port]=>Integer,Optional[proxy_header]=>String,Optional[request_path]=>String,Optional[response]=>String]]]"`
		Name                    string
		Project                 *string
		Self_link               *string
		Ssl_health_check        *[]map[string]interface{} `puppet:"type => Optional[Array[Struct[Optional[port]=>Integer,Optional[proxy_header]=>String,Optional[request]=>String,Optional[response]=>String]]]"`
		Tcp_health_check        *[]map[string]interface{} `puppet:"type => Optional[Array[Struct[Optional[port]=>Integer,Optional[proxy_header]=>String,Optional[request]=>String,Optional[response]=>String]]]"`
		Timeout_sec             int64                     `puppet:"value=>5"`
		Type                    *string
		Unhealthy_threshold     int64 `puppet:"value=>2"`
	}

	Compute_http_health_check struct {
		Compute_http_health_check_id *string `lyra:"tf-gen.ignore"`
		Check_interval_sec           int64   `puppet:"value=>5"`
		Creation_timestamp           *string
		Description                  *string
		Healthy_threshold            int64 `puppet:"value=>2"`
		Host                         *string
		Name                         string
		Port                         int64 `puppet:"value=>80"`
		Project                      *string
		Request_path                 string `puppet:"value=>'/'"`
		Self_link                    *string
		Timeout_sec                  int64 `puppet:"value=>5"`
		Unhealthy_threshold          int64 `puppet:"value=>2"`
	}

	Compute_https_health_check struct {
		Compute_https_health_check_id *string `lyra:"tf-gen.ignore"`
		Check_interval_sec            int64   `puppet:"value=>5"`
		Creation_timestamp            *string
		Description                   *string
		Healthy_threshold             int64 `puppet:"value=>2"`
		Host                          *string
		Name                          string
		Port                          int64 `puppet:"value=>443"`
		Project                       *string
		Request_path                  string `puppet:"value=>'/'"`
		Self_link                     *string
		Timeout_sec                   int64 `puppet:"value=>5"`
		Unhealthy_threshold           int64 `puppet:"value=>2"`
	}

	Compute_image struct {
		Compute_image_id  *string `lyra:"tf-gen.ignore"`
		Create_timeout    *int64
		Description       *string
		Family            *string
		Label_fingerprint *string
		Labels            *map[string]string
		Licenses          *[]string
		Name              string
		Project           *string
		Raw_disk          *[]map[string]string `puppet:"type => Optional[Array[Struct[Optional[container_type]=>String,Optional[sha1]=>String,source=>String]]]"`
		Self_link         *string
		Source_disk       *string
	}

	Compute_instance struct {
		Compute_instance_id       *string `lyra:"tf-gen.ignore"`
		Allow_stopping_for_update *bool
		Attached_disk             *[]map[string]string     `puppet:"type => Optional[Array[Struct[Optional[device_name]=>String,Optional[disk_encryption_key_raw]=>String,Optional[disk_encryption_key_sha256]=>String,Optional[mode]=>String,source=>String]]]"`
		Boot_disk                 []map[string]interface{} `puppet:"type => Array[Struct[Optional[auto_delete]=>Boolean,Optional[device_name]=>String,Optional[disk_encryption_key_raw]=>String,Optional[disk_encryption_key_sha256]=>String,Optional[initialize_params]=>Array[Struct[Optional[image]=>String,Optional[size]=>Integer,Optional[type]=>String]],Optional[source]=>String]]"`
		Can_ip_forward            bool                     `puppet:"value=>false"`
		Cpu_platform              *string
		Create_timeout            int64 `puppet:"value=>4"`
		Deletion_protection       bool  `puppet:"value=>false"`
		Description               *string
		Disk                      *[]map[string]interface{} `puppet:"type => Optional[Array[Struct[Optional[auto_delete]=>Boolean,Optional[device_name]=>String,Optional[disk]=>String,Optional[disk_encryption_key_raw]=>String,Optional[disk_encryption_key_sha256]=>String,Optional[image]=>String,Optional[scratch]=>Boolean,Optional[size]=>Integer,Optional[type]=>String]]]"`
		Guest_accelerator         *[]map[string]interface{} `puppet:"type => Optional[Array[Struct[count=>Integer,type=>String]]]"`
		Instance_id               *string
		Label_fingerprint         *string
		Labels                    *map[string]string
		Machine_type              string
		Metadata                  *map[string]string
		Metadata_fingerprint      *string
		Metadata_startup_script   *string
		Min_cpu_platform          *string
		Name                      string
		Network                   *[]map[string]string     `puppet:"type => Optional[Array[Struct[Optional[address]=>String,Optional[external_address]=>String,Optional[internal_address]=>String,Optional[name]=>String,source=>String]]]"`
		Network_interface         []map[string]interface{} `puppet:"type => Array[Struct[Optional[access_config]=>Array[Struct[Optional[nat_ip]=>String,Optional[network_tier]=>String,Optional[public_ptr_domain_name]=>String]],Optional[alias_ip_range]=>Array[Struct[ip_cidr_range=>String,Optional[subnetwork_range_name]=>String]],Optional[name]=>String,Optional[network]=>String,Optional[network_ip]=>String,Optional[subnetwork]=>String,Optional[subnetwork_project]=>String]]"`
		Project                   *string
		Scheduling                *[]map[string]interface{} `puppet:"type => Optional[Array[Struct[Optional[automatic_restart]=>Boolean,Optional[on_host_maintenance]=>String,Optional[preemptible]=>Boolean]]]"`
		Scratch_disk              *[]map[string]string      `puppet:"type => Optional[Array[Struct[Optional[interface]=>String]]]"`
		Self_link                 *string
		Service_account           *[]map[string]interface{} `puppet:"type => Optional[Array[Struct[Optional[email]=>String,scopes=>Array[String]]]]"`
		Tags                      *[]string
		Tags_fingerprint          *string
		Zone                      *string
	}

	Compute_instance_from_template struct {
		Compute_instance_from_template_id *string `lyra:"tf-gen.ignore"`
		Allow_stopping_for_update         *bool
		Attached_disk                     *[]map[string]string      `puppet:"type => Optional[Array[Struct[Optional[device_name]=>String,Optional[disk_encryption_key_raw]=>String,Optional[disk_encryption_key_sha256]=>String,Optional[mode]=>String,source=>String]]]"`
		Boot_disk                         *[]map[string]interface{} `puppet:"type => Optional[Array[Struct[Optional[auto_delete]=>Boolean,Optional[device_name]=>String,Optional[disk_encryption_key_raw]=>String,Optional[disk_encryption_key_sha256]=>String,Optional[initialize_params]=>Array[Struct[Optional[image]=>String,Optional[size]=>Integer,Optional[type]=>String]],Optional[source]=>String]]]"`
		Can_ip_forward                    *bool
		Cpu_platform                      *string
		Deletion_protection               *bool
		Description                       *string
		Guest_accelerator                 *[]map[string]interface{} `puppet:"type => Optional[Array[Struct[count=>Integer,type=>String]]]"`
		Instance_id                       *string
		Label_fingerprint                 *string
		Labels                            *map[string]string
		Machine_type                      *string
		Metadata                          *map[string]string
		Metadata_fingerprint              *string
		Metadata_startup_script           *string
		Min_cpu_platform                  *string
		Name                              string
		Network_interface                 *[]map[string]interface{} `puppet:"type => Optional[Array[Struct[Optional[access_config]=>Array[Struct[Optional[nat_ip]=>String,Optional[network_tier]=>String,Optional[public_ptr_domain_name]=>String]],Optional[alias_ip_range]=>Array[Struct[ip_cidr_range=>String,Optional[subnetwork_range_name]=>String]],Optional[name]=>String,Optional[network]=>String,Optional[network_ip]=>String,Optional[subnetwork]=>String,Optional[subnetwork_project]=>String]]]"`
		Project                           *string
		Scheduling                        *[]map[string]interface{} `puppet:"type => Optional[Array[Struct[Optional[automatic_restart]=>Boolean,Optional[on_host_maintenance]=>String,Optional[preemptible]=>Boolean]]]"`
		Scratch_disk                      *[]map[string]string      `puppet:"type => Optional[Array[Struct[Optional[interface]=>String]]]"`
		Self_link                         *string
		Service_account                   *[]map[string]interface{} `puppet:"type => Optional[Array[Struct[Optional[email]=>String,scopes=>Array[String]]]]"`
		Source_instance_template          string
		Tags                              *[]string
		Tags_fingerprint                  *string
		Zone                              *string
	}

	Compute_instance_group struct {
		Compute_instance_group_id *string `lyra:"tf-gen.ignore"`
		Description               *string
		Instances                 *[]string
		Name                      string
		Named_port                *[]map[string]interface{} `puppet:"type => Optional[Array[Struct[name=>String,port=>Integer]]]"`
		Network                   *string
		Project                   *string
		Self_link                 *string
		Size                      *int64
		Zone                      *string
	}

	Compute_instance_group_manager struct {
		Compute_instance_group_manager_id *string                   `lyra:"tf-gen.ignore"`
		Auto_healing_policies             *[]map[string]interface{} `puppet:"type => Optional[Array[Struct[health_check=>String,initial_delay_sec=>Integer]]]"`
		Base_instance_name                string
		Description                       *string
		Fingerprint                       *string
		Instance_group                    *string
		Instance_template                 *string
		Name                              string
		Named_port                        *[]map[string]interface{} `puppet:"type => Optional[Array[Struct[name=>String,port=>Integer]]]"`
		Project                           *string
		Rolling_update_policy             *[]map[string]interface{} `puppet:"type => Optional[Array[Struct[Optional[max_surge_fixed]=>Integer,Optional[max_surge_percent]=>Integer,Optional[max_unavailable_fixed]=>Integer,Optional[max_unavailable_percent]=>Integer,Optional[min_ready_sec]=>Integer,minimal_action=>String,type=>String]]]"`
		Self_link                         *string
		Target_pools                      *[]string
		Target_size                       *int64
		Update_strategy                   string                    `puppet:"value=>'REPLACE'"`
		Version                           *[]map[string]interface{} `puppet:"type => Optional[Array[Struct[instance_template=>String,name=>String,Optional[target_size]=>Array[Struct[Optional[fixed]=>Integer,Optional[percent]=>Integer]]]]]"`
		Wait_for_instances                bool                      `puppet:"value=>false"`
		Zone                              *string
	}

	Compute_instance_template struct {
		Compute_instance_template_id *string `lyra:"tf-gen.ignore"`
		Automatic_restart            *bool
		Can_ip_forward               bool `puppet:"value=>false"`
		Description                  *string
		Disk                         []map[string]interface{}  `puppet:"type => Array[Struct[Optional[auto_delete]=>Boolean,Optional[boot]=>Boolean,Optional[device_name]=>String,Optional[disk_encryption_key]=>Array[Struct[Optional[kms_key_self_link]=>String]],Optional[disk_name]=>String,Optional[disk_size_gb]=>Integer,Optional[disk_type]=>String,Optional[interface]=>String,Optional[mode]=>String,Optional[source]=>String,Optional[source_image]=>String,Optional[type]=>String]]"`
		Guest_accelerator            *[]map[string]interface{} `puppet:"type => Optional[Array[Struct[count=>Integer,type=>String]]]"`
		Instance_description         *string
		Labels                       *map[string]string
		Machine_type                 string
		Metadata                     *map[string]string
		Metadata_fingerprint         *string
		Metadata_startup_script      *string
		Min_cpu_platform             *string
		Name                         *string
		Name_prefix                  *string
		Network_interface            *[]map[string]interface{} `puppet:"type => Optional[Array[Struct[Optional[access_config]=>Array[Struct[Optional[nat_ip]=>String,Optional[network_tier]=>String]],Optional[alias_ip_range]=>Array[Struct[ip_cidr_range=>String,Optional[subnetwork_range_name]=>String]],Optional[network]=>String,Optional[network_ip]=>String,Optional[subnetwork]=>String,Optional[subnetwork_project]=>String]]]"`
		On_host_maintenance          *string
		Project                      *string
		Region                       *string
		Scheduling                   *[]map[string]interface{} `puppet:"type => Optional[Array[Struct[Optional[automatic_restart]=>Boolean,Optional[on_host_maintenance]=>String,Optional[preemptible]=>Boolean]]]"`
		Self_link                    *string
		Service_account              *[]map[string]interface{} `puppet:"type => Optional[Array[Struct[Optional[email]=>String,scopes=>Array[String]]]]"`
		Tags                         *[]string
		Tags_fingerprint             *string
	}

	Compute_interconnect_attachment struct {
		Compute_interconnect_attachment_id *string `lyra:"tf-gen.ignore"`
		Cloud_router_ip_address            *string
		Creation_timestamp                 *string
		Customer_router_ip_address         *string
		Description                        *string
		Google_reference_id                *string
		Interconnect                       string
		Name                               string
		Private_interconnect_info          *[]map[string]int64 `puppet:"type => Optional[Array[Struct[Optional[tag8021q]=>Integer]]]"`
		Project                            *string
		Region                             *string
		Router                             string
		Self_link                          *string
	}

	Compute_network struct {
		Compute_network_id      *string `lyra:"tf-gen.ignore"`
		Auto_create_subnetworks bool    `puppet:"value=>true"`
		Description             *string
		Gateway_ipv4            *string
		Ipv4_range              *string
		Name                    string
		Project                 *string
		Routing_mode            *string
		Self_link               *string
	}

	Compute_network_peering struct {
		Compute_network_peering_id *string `lyra:"tf-gen.ignore"`
		Auto_create_routes         bool    `puppet:"value=>true"`
		Name                       string
		Network                    string
		Peer_network               string
		State                      *string
		State_details              *string
	}

	Compute_project_metadata struct {
		Compute_project_metadata_id *string `lyra:"tf-gen.ignore"`
		Metadata                    map[string]string
		Project                     *string
	}

	Compute_project_metadata_item struct {
		Compute_project_metadata_item_id *string `lyra:"tf-gen.ignore"`
		Key                              string
		Project                          *string
		Value                            string
	}

	Compute_region_autoscaler struct {
		Compute_region_autoscaler_id *string                  `lyra:"tf-gen.ignore"`
		Autoscaling_policy           []map[string]interface{} `puppet:"type => Array[Struct[Optional[cooldown_period]=>Integer,Optional[cpu_utilization]=>Array[Struct[target=>Float]],Optional[load_balancing_utilization]=>Array[Struct[target=>Float]],max_replicas=>Integer,Optional[metric]=>Array[Struct[name=>String,target=>Float,type=>String]],min_replicas=>Integer]]"`
		Creation_timestamp           *string
		Description                  *string
		Name                         string
		Project                      *string
		Region                       *string
		Self_link                    *string
		Target                       string
	}

	Compute_region_backend_service struct {
		Compute_region_backend_service_id *string              `lyra:"tf-gen.ignore"`
		Backend                           *[]map[string]string `puppet:"type => Optional[Array[Struct[Optional[description]=>String,Optional[group]=>String]]]"`
		Connection_draining_timeout_sec   int64                `puppet:"value=>0"`
		Description                       *string
		Fingerprint                       *string
		Health_checks                     []string
		Name                              string
		Project                           *string
		Protocol                          *string
		Region                            *string
		Self_link                         *string
		Session_affinity                  *string
		Timeout_sec                       *int64
	}

	Compute_region_disk struct {
		Compute_region_disk_id         *string `lyra:"tf-gen.ignore"`
		Creation_timestamp             *string
		Description                    *string
		Disk_encryption_key            *[]map[string]string `puppet:"type => Optional[Array[Struct[Optional[raw_key]=>String,Optional[sha256]=>String]]]"`
		Label_fingerprint              *string
		Labels                         *map[string]string
		Last_attach_timestamp          *string
		Last_detach_timestamp          *string
		Name                           string
		Project                        *string
		Region                         *string
		Replica_zones                  []string
		Self_link                      *string
		Size                           *int64
		Snapshot                       *string
		Source_snapshot_encryption_key *[]map[string]string `puppet:"type => Optional[Array[Struct[Optional[raw_key]=>String,Optional[sha256]=>String]]]"`
		Source_snapshot_id             *string
		Type                           string `puppet:"value=>'pd-standard'"`
		Users                          *[]string
	}

	Compute_region_instance_group_manager struct {
		Compute_region_instance_group_manager_id *string                   `lyra:"tf-gen.ignore"`
		Auto_healing_policies                    *[]map[string]interface{} `puppet:"type => Optional[Array[Struct[health_check=>String,initial_delay_sec=>Integer]]]"`
		Base_instance_name                       string
		Description                              *string
		Distribution_policy_zones                *[]string
		Fingerprint                              *string
		Instance_group                           *string
		Instance_template                        *string
		Name                                     string
		Named_port                               *[]map[string]interface{} `puppet:"type => Optional[Array[Struct[name=>String,port=>Integer]]]"`
		Project                                  *string
		Region                                   string
		Rolling_update_policy                    *[]map[string]interface{} `puppet:"type => Optional[Array[Struct[Optional[max_surge_fixed]=>Integer,Optional[max_surge_percent]=>Integer,Optional[max_unavailable_fixed]=>Integer,Optional[max_unavailable_percent]=>Integer,Optional[min_ready_sec]=>Integer,minimal_action=>String,type=>String]]]"`
		Self_link                                *string
		Target_pools                             *[]string
		Target_size                              *int64
		Update_strategy                          string                    `puppet:"value=>'NONE'"`
		Version                                  *[]map[string]interface{} `puppet:"type => Optional[Array[Struct[instance_template=>String,name=>String,Optional[target_size]=>Array[Struct[Optional[fixed]=>Integer,Optional[percent]=>Integer]]]]]"`
		Wait_for_instances                       bool                      `puppet:"value=>false"`
	}

	Compute_route struct {
		Compute_route_id       *string `lyra:"tf-gen.ignore"`
		Description            *string
		Dest_range             string
		Name                   string
		Network                string
		Next_hop_gateway       *string
		Next_hop_instance      *string
		Next_hop_instance_zone *string
		Next_hop_ip            *string
		Next_hop_network       *string
		Next_hop_vpn_tunnel    *string
		Priority               int64 `puppet:"value=>1000"`
		Project                *string
		Self_link              *string
		Tags                   *[]string
	}

	Compute_router struct {
		Compute_router_id  *string                   `lyra:"tf-gen.ignore"`
		Bgp                *[]map[string]interface{} `puppet:"type => Optional[Array[Struct[Optional[advertise_mode]=>String,Optional[advertised_groups]=>Array[String],Optional[advertised_ip_ranges]=>Array[Struct[Optional[description]=>String,Optional[range]=>String]],asn=>Integer]]]"`
		Creation_timestamp *string
		Description        *string
		Name               string
		Network            string
		Project            *string
		Region             *string
		Self_link          *string
	}

	Compute_router_interface struct {
		Compute_router_interface_id *string `lyra:"tf-gen.ignore"`
		Ip_range                    *string
		Name                        string
		Project                     *string
		Region                      *string
		Router                      string
		Vpn_tunnel                  string
	}

	Compute_router_nat struct {
		Compute_router_nat_id              *string `lyra:"tf-gen.ignore"`
		Icmp_idle_timeout_sec              *int64
		Min_ports_per_vm                   *int64
		Name                               string
		Nat_ip_allocate_option             string
		Nat_ips                            *[]string
		Project                            *string
		Region                             *string
		Router                             string
		Source_subnetwork_ip_ranges_to_nat *string
		Subnetwork                         *[]map[string]interface{} `puppet:"type => Optional[Array[Struct[name=>String,Optional[secondary_ip_range_names]=>Array[String],Optional[source_ip_ranges_to_nat]=>Array[String]]]]"`
		Tcp_established_idle_timeout_sec   *int64
		Tcp_transitory_idle_timeout_sec    *int64
		Udp_idle_timeout_sec               *int64
	}

	Compute_router_peer struct {
		Compute_router_peer_id    *string `lyra:"tf-gen.ignore"`
		Advertised_route_priority *int64
		Interface                 string
		Ip_address                *string
		Name                      string
		Peer_asn                  int64
		Peer_ip_address           *string
		Project                   *string
		Region                    *string
		Router                    string
	}

	Compute_security_policy struct {
		Compute_security_policy_id *string `lyra:"tf-gen.ignore"`
		Description                *string
		Fingerprint                *string
		Name                       string
		Project                    *string
		Rule                       *[]map[string]interface{} `puppet:"type => Optional[Array[Struct[action=>String,Optional[description]=>String,match=>Array[Struct[config=>Array[Struct[src_ip_ranges=>Array[String]]],versioned_expr=>String]],Optional[preview]=>Boolean,priority=>Integer]]]"`
		Self_link                  *string
	}

	Compute_shared_vpc_host_project struct {
		Compute_shared_vpc_host_project_id *string `lyra:"tf-gen.ignore"`
		Project                            string
	}

	Compute_shared_vpc_service_project struct {
		Compute_shared_vpc_service_project_id *string `lyra:"tf-gen.ignore"`
		Host_project                          string
		Service_project                       string
	}

	Compute_snapshot struct {
		Compute_snapshot_id               *string `lyra:"tf-gen.ignore"`
		Creation_timestamp                *string
		Description                       *string
		Disk_size_gb                      *int64
		Label_fingerprint                 *string
		Labels                            *map[string]string
		Licenses                          *[]string
		Name                              string
		Project                           *string
		Self_link                         *string
		Snapshot_encryption_key           *[]map[string]string `puppet:"type => Optional[Array[Struct[Optional[raw_key]=>String,Optional[sha256]=>String]]]"`
		Snapshot_encryption_key_raw       *string
		Snapshot_encryption_key_sha256    *string
		Snapshot_id                       *int64
		Source_disk                       string
		Source_disk_encryption_key        *[]map[string]string `puppet:"type => Optional[Array[Struct[Optional[raw_key]=>String]]]"`
		Source_disk_encryption_key_raw    *string
		Source_disk_encryption_key_sha256 *string
		Source_disk_link                  *string
		Storage_bytes                     *int64
		Zone                              *string
	}

	Compute_ssl_certificate struct {
		Compute_ssl_certificate_id *string `lyra:"tf-gen.ignore"`
		Certificate                string
		Certificate_id             *int64
		Creation_timestamp         *string
		Description                *string
		Name                       *string
		Name_prefix                *string
		Private_key                string
		Project                    *string
		Self_link                  *string
	}

	Compute_ssl_policy struct {
		Compute_ssl_policy_id *string `lyra:"tf-gen.ignore"`
		Creation_timestamp    *string
		Custom_features       *[]string
		Description           *string
		Enabled_features      *[]string
		Fingerprint           *string
		Min_tls_version       string `puppet:"value=>'TLS_1_0'"`
		Name                  string
		Profile               string `puppet:"value=>'COMPATIBLE'"`
		Project               *string
		Self_link             *string
	}

	Compute_subnetwork struct {
		Compute_subnetwork_id    *string `lyra:"tf-gen.ignore"`
		Creation_timestamp       *string
		Description              *string
		Enable_flow_logs         *bool
		Fingerprint              *string
		Gateway_address          *string
		Ip_cidr_range            string
		Name                     string
		Network                  string
		Private_ip_google_access *bool
		Project                  *string
		Region                   *string
		Secondary_ip_range       *[]map[string]string `puppet:"type => Optional[Array[Struct[ip_cidr_range=>String,range_name=>String]]]"`
		Self_link                *string
	}

	Compute_subnetwork_iam_binding struct {
		Compute_subnetwork_iam_binding_id *string `lyra:"tf-gen.ignore"`
		Etag                              *string
		Members                           []string
		Project                           *string
		Region                            *string
		Role                              string
		Subnetwork                        string
	}

	Compute_subnetwork_iam_member struct {
		Compute_subnetwork_iam_member_id *string `lyra:"tf-gen.ignore"`
		Etag                             *string
		Member                           string
		Project                          *string
		Region                           *string
		Role                             string
		Subnetwork                       string
	}

	Compute_subnetwork_iam_policy struct {
		Compute_subnetwork_iam_policy_id *string `lyra:"tf-gen.ignore"`
		Etag                             *string
		Policy_data                      string
		Project                          *string
		Region                           *string
		Subnetwork                       string
	}

	Compute_target_http_proxy struct {
		Compute_target_http_proxy_id *string `lyra:"tf-gen.ignore"`
		Creation_timestamp           *string
		Description                  *string
		Name                         string
		Project                      *string
		Proxy_id                     *int64
		Self_link                    *string
		Url_map                      string
	}

	Compute_target_https_proxy struct {
		Compute_target_https_proxy_id *string `lyra:"tf-gen.ignore"`
		Creation_timestamp            *string
		Description                   *string
		Name                          string
		Project                       *string
		Proxy_id                      *int64
		Quic_override                 *string
		Self_link                     *string
		Ssl_certificates              []string
		Ssl_policy                    *string
		Url_map                       string
	}

	Compute_target_pool struct {
		Compute_target_pool_id *string `lyra:"tf-gen.ignore"`
		Backup_pool            *string
		Description            *string
		Failover_ratio         *float64
		Health_checks          *[]string
		Instances              *[]string
		Name                   string
		Project                *string
		Region                 *string
		Self_link              *string
		Session_affinity       string `puppet:"value=>'NONE'"`
	}

	Compute_target_ssl_proxy struct {
		Compute_target_ssl_proxy_id *string `lyra:"tf-gen.ignore"`
		Backend_service             string
		Creation_timestamp          *string
		Description                 *string
		Name                        string
		Project                     *string
		Proxy_header                string `puppet:"value=>'NONE'"`
		Proxy_id                    *int64
		Self_link                   *string
		Ssl_certificates            []string
		Ssl_policy                  *string
	}

	Compute_target_tcp_proxy struct {
		Compute_target_tcp_proxy_id *string `lyra:"tf-gen.ignore"`
		Backend_service             string
		Creation_timestamp          *string
		Description                 *string
		Name                        string
		Project                     *string
		Proxy_header                string `puppet:"value=>'NONE'"`
		Proxy_id                    *int64
		Self_link                   *string
	}

	Compute_url_map struct {
		Compute_url_map_id *string `lyra:"tf-gen.ignore"`
		Default_service    string
		Description        *string
		Fingerprint        *string
		Host_rule          *[]map[string]interface{} `puppet:"type => Optional[Array[Struct[Optional[description]=>String,hosts=>Array[String],path_matcher=>String]]]"`
		Map_id             *string
		Name               string
		Path_matcher       *[]map[string]interface{} `puppet:"type => Optional[Array[Struct[default_service=>String,Optional[description]=>String,name=>String,Optional[path_rule]=>Array[Struct[paths=>Array[String],service=>String]]]]]"`
		Project            *string
		Self_link          *string
		Test               *[]map[string]string `puppet:"type => Optional[Array[Struct[Optional[description]=>String,host=>String,path=>String,service=>String]]]"`
	}

	Compute_vpn_gateway struct {
		Compute_vpn_gateway_id *string `lyra:"tf-gen.ignore"`
		Creation_timestamp     *string
		Description            *string
		Name                   string
		Network                string
		Project                *string
		Region                 *string
		Self_link              *string
	}

	Compute_vpn_tunnel struct {
		Compute_vpn_tunnel_id   *string `lyra:"tf-gen.ignore"`
		Creation_timestamp      *string
		Description             *string
		Detailed_status         *string
		Ike_version             int64 `puppet:"value=>2"`
		Label_fingerprint       *string
		Labels                  *map[string]string
		Local_traffic_selector  *[]string
		Name                    string
		Peer_ip                 string
		Project                 *string
		Region                  *string
		Remote_traffic_selector *[]string
		Router                  *string
		Self_link               *string
		Shared_secret           string
		Shared_secret_hash      *string
		Target_vpn_gateway      string
	}

	Container_analysis_note struct {
		Container_analysis_note_id *string                    `lyra:"tf-gen.ignore"`
		Attestation_authority      []map[string][]interface{} `puppet:"type => Array[Struct[hint=>Array[Struct[human_readable_name=>String]]]]"`
		Name                       string
		Project                    *string
	}

	Container_cluster struct {
		Container_cluster_id              *string `lyra:"tf-gen.ignore"`
		Additional_zones                  *[]string
		Addons_config                     *[]map[string][]interface{} `puppet:"type => Optional[Array[Struct[Optional[horizontal_pod_autoscaling]=>Array[Struct[Optional[disabled]=>Boolean]],Optional[http_load_balancing]=>Array[Struct[Optional[disabled]=>Boolean]],Optional[kubernetes_dashboard]=>Array[Struct[Optional[disabled]=>Boolean]],Optional[network_policy_config]=>Array[Struct[Optional[disabled]=>Boolean]]]]]"`
		Cluster_autoscaling               *[]map[string]interface{}   `puppet:"type => Optional[Array[Struct[enabled=>Boolean,Optional[resource_limits]=>Array[Struct[Optional[maximum]=>Integer,Optional[minimum]=>Integer,resource_type=>String]]]]]"`
		Cluster_ipv4_cidr                 *string
		Description                       *string
		Enable_binary_authorization       bool `puppet:"value=>false"`
		Enable_kubernetes_alpha           bool `puppet:"value=>false"`
		Enable_legacy_abac                bool `puppet:"value=>false"`
		Enable_tpu                        bool `puppet:"value=>false"`
		Endpoint                          *string
		Initial_node_count                *int64
		Instance_group_urls               *[]string
		Ip_allocation_policy              *[]map[string]interface{} `puppet:"type => Optional[Array[Struct[Optional[cluster_ipv4_cidr_block]=>String,Optional[cluster_secondary_range_name]=>String,Optional[create_subnetwork]=>Boolean,Optional[services_ipv4_cidr_block]=>String,Optional[services_secondary_range_name]=>String,Optional[subnetwork_name]=>String]]]"`
		Logging_service                   *string
		Maintenance_policy                *[]map[string][]interface{} `puppet:"type => Optional[Array[Struct[daily_maintenance_window=>Array[Struct[Optional[duration]=>String,start_time=>String]]]]]"`
		Master_auth                       *[]map[string]interface{}   `puppet:"type => Optional[Array[Struct[Optional[client_certificate]=>String,Optional[client_certificate_config]=>Array[Struct[issue_client_certificate=>Boolean]],Optional[client_key]=>String,Optional[cluster_ca_certificate]=>String,password=>String,username=>String]]]"`
		Master_authorized_networks_config *[]map[string][]interface{} `puppet:"type => Optional[Array[Struct[Optional[cidr_blocks]=>Array[Struct[cidr_block=>String,Optional[display_name]=>String]]]]]"`
		Master_ipv4_cidr_block            *string
		Master_version                    *string
		Min_master_version                *string
		Monitoring_service                *string
		Name                              string
		Network                           string                    `puppet:"value=>'default'"`
		Network_policy                    *[]map[string]interface{} `puppet:"type => Optional[Array[Struct[Optional[enabled]=>Boolean,Optional[provider]=>String]]]"`
		Node_config                       *[]map[string]interface{} `puppet:"type => Optional[Array[Struct[Optional[disk_size_gb]=>Integer,Optional[disk_type]=>String,Optional[guest_accelerator]=>Array[Struct[count=>Integer,type=>String]],Optional[image_type]=>String,Optional[labels]=>Hash[String,String],Optional[local_ssd_count]=>Integer,Optional[machine_type]=>String,Optional[metadata]=>Hash[String,String],Optional[min_cpu_platform]=>String,Optional[oauth_scopes]=>Array[String],Optional[preemptible]=>Boolean,Optional[service_account]=>String,Optional[tags]=>Array[String]]]]"`
		Node_pool                         *[]map[string]interface{} `puppet:"type => Optional[Array[Struct[Optional[autoscaling]=>Array[Struct[max_node_count=>Integer,min_node_count=>Integer]],Optional[initial_node_count]=>Integer,Optional[instance_group_urls]=>Array[String],Optional[management]=>Array[Struct[Optional[auto_repair]=>Boolean,Optional[auto_upgrade]=>Boolean]],Optional[name]=>String,Optional[node_config]=>Array[Struct[Optional[disk_size_gb]=>Integer,Optional[disk_type]=>String,Optional[guest_accelerator]=>Array[Struct[count=>Integer,type=>String]],Optional[image_type]=>String,Optional[labels]=>Hash[String,String],Optional[local_ssd_count]=>Integer,Optional[machine_type]=>String,Optional[metadata]=>Hash[String,String],Optional[min_cpu_platform]=>String,Optional[oauth_scopes]=>Array[String],Optional[preemptible]=>Boolean,Optional[service_account]=>String,Optional[tags]=>Array[String]]],Optional[node_count]=>Integer,Optional[version]=>String]]]"`
		Node_version                      *string
		Pod_security_policy_config        *[]map[string]bool `puppet:"type => Optional[Array[Struct[enabled=>Boolean]]]"`
		Private_cluster                   *bool
		Private_cluster_config            *[]map[string]interface{} `puppet:"type => Optional[Array[Struct[Optional[enable_private_endpoint]=>Boolean,Optional[enable_private_nodes]=>Boolean,Optional[master_ipv4_cidr_block]=>String,Optional[private_endpoint]=>String,Optional[public_endpoint]=>String]]]"`
		Project                           *string
		Region                            *string
		Remove_default_node_pool          *bool
		Resource_labels                   *map[string]string
		Subnetwork                        *string
		Zone                              *string
	}

	Container_node_pool struct {
		Container_node_pool_id *string             `lyra:"tf-gen.ignore"`
		Autoscaling            *[]map[string]int64 `puppet:"type => Optional[Array[Struct[max_node_count=>Integer,min_node_count=>Integer]]]"`
		Cluster                string
		Initial_node_count     *int64
		Instance_group_urls    *[]string
		Management             *[]map[string]bool `puppet:"type => Optional[Array[Struct[Optional[auto_repair]=>Boolean,Optional[auto_upgrade]=>Boolean]]]"`
		Max_pods_per_node      *int64
		Name                   *string
		Name_prefix            *string
		Node_config            *[]map[string]interface{} `puppet:"type => Optional[Array[Struct[Optional[disk_size_gb]=>Integer,Optional[disk_type]=>String,Optional[guest_accelerator]=>Array[Struct[count=>Integer,type=>String]],Optional[image_type]=>String,Optional[labels]=>Hash[String,String],Optional[local_ssd_count]=>Integer,Optional[machine_type]=>String,Optional[metadata]=>Hash[String,String],Optional[min_cpu_platform]=>String,Optional[oauth_scopes]=>Array[String],Optional[preemptible]=>Boolean,Optional[service_account]=>String,Optional[tags]=>Array[String]]]]"`
		Node_count             *int64
		Project                *string
		Region                 *string
		Version                *string
		Zone                   *string
	}

	Dataflow_job struct {
		Dataflow_job_id   *string `lyra:"tf-gen.ignore"`
		Max_workers       *int64
		Name              string
		On_delete         string `puppet:"value=>'drain'"`
		Parameters        *map[string]string
		Project           *string
		Region            *string
		State             *string
		Temp_gcs_location string
		Template_gcs_path string
		Zone              *string
	}

	Dataproc_cluster struct {
		Dataproc_cluster_id *string                   `lyra:"tf-gen.ignore"`
		Cluster_config      *[]map[string]interface{} `puppet:"type => Optional[Array[Struct[Optional[bucket]=>String,Optional[gce_cluster_config]=>Array[Struct[Optional[internal_ip_only]=>Boolean,Optional[metadata]=>Hash[String,String],Optional[network]=>String,Optional[service_account]=>String,Optional[service_account_scopes]=>Array[String],Optional[subnetwork]=>String,Optional[tags]=>Array[String],Optional[zone]=>String]],Optional[initialization_action]=>Array[Struct[script=>String,Optional[timeout_sec]=>Integer]],Optional[master_config]=>Array[Struct[Optional[disk_config]=>Array[Struct[Optional[boot_disk_size_gb]=>Integer,Optional[boot_disk_type]=>String,Optional[num_local_ssds]=>Integer]],Optional[instance_names]=>Array[String],Optional[machine_type]=>String,Optional[num_instances]=>Integer]],Optional[preemptible_worker_config]=>Array[Struct[Optional[disk_config]=>Array[Struct[Optional[boot_disk_size_gb]=>Integer]],Optional[instance_names]=>Array[String],Optional[num_instances]=>Integer]],Optional[software_config]=>Array[Struct[Optional[image_version]=>String,Optional[override_properties]=>Hash[String,String],Optional[properties]=>Hash[String,String]]],Optional[staging_bucket]=>String,Optional[worker_config]=>Array[Struct[Optional[disk_config]=>Array[Struct[Optional[boot_disk_size_gb]=>Integer,Optional[boot_disk_type]=>String,Optional[num_local_ssds]=>Integer]],Optional[instance_names]=>Array[String],Optional[machine_type]=>String,Optional[num_instances]=>Integer]]]]]"`
		Labels              *map[string]string
		Name                string
		Project             *string
		Region              string `puppet:"value=>'global'"`
	}

	Dataproc_job struct {
		Dataproc_job_id            *string `lyra:"tf-gen.ignore"`
		Driver_controls_files_uri  *string
		Driver_output_resource_uri *string
		Force_delete               bool                      `puppet:"value=>false"`
		Hadoop_config              *[]map[string]interface{} `puppet:"type => Optional[Array[Struct[Optional[archive_uris]=>Array[String],Optional[args]=>Array[String],Optional[file_uris]=>Array[String],Optional[jar_file_uris]=>Array[String],Optional[logging_config]=>Array[Struct[Optional[driver_log_levels]=>Hash[String,String]]],Optional[main_class]=>String,Optional[main_jar_file_uri]=>String,Optional[properties]=>Hash[String,String]]]]"`
		Hive_config                *[]map[string]interface{} `puppet:"type => Optional[Array[Struct[Optional[continue_on_failure]=>Boolean,Optional[jar_file_uris]=>Array[String],Optional[properties]=>Hash[String,String],Optional[query_file_uri]=>String,Optional[query_list]=>Array[String],Optional[script_variables]=>Hash[String,String]]]]"`
		Labels                     *map[string]string
		Pig_config                 *[]map[string]interface{} `puppet:"type => Optional[Array[Struct[Optional[continue_on_failure]=>Boolean,Optional[jar_file_uris]=>Array[String],Optional[logging_config]=>Array[Struct[Optional[driver_log_levels]=>Hash[String,String]]],Optional[properties]=>Hash[String,String],Optional[query_file_uri]=>String,Optional[query_list]=>Array[String],Optional[script_variables]=>Hash[String,String]]]]"`
		Placement                  []map[string]string       `puppet:"type => Array[Struct[cluster_name=>String,Optional[cluster_uuid]=>String]]"`
		Project                    *string
		Pyspark_config             *[]map[string]interface{} `puppet:"type => Optional[Array[Struct[Optional[archive_uris]=>Array[String],Optional[args]=>Array[String],Optional[file_uris]=>Array[String],Optional[jar_file_uris]=>Array[String],Optional[logging_config]=>Array[Struct[Optional[driver_log_levels]=>Hash[String,String]]],main_python_file_uri=>String,Optional[properties]=>Hash[String,String],Optional[python_file_uris]=>Array[String]]]]"`
		Reference                  *[]map[string]string      `puppet:"type => Optional[Array[Struct[Optional[job_id]=>String]]]"`
		Region                     string                    `puppet:"value=>'global'"`
		Scheduling                 *[]map[string]int64       `puppet:"type => Optional[Array[Struct[Optional[max_failures_per_hour]=>Integer]]]"`
		Spark_config               *[]map[string]interface{} `puppet:"type => Optional[Array[Struct[Optional[archive_uris]=>Array[String],Optional[args]=>Array[String],Optional[file_uris]=>Array[String],Optional[jar_file_uris]=>Array[String],Optional[logging_config]=>Array[Struct[Optional[driver_log_levels]=>Hash[String,String]]],Optional[main_class]=>String,Optional[main_jar_file_uri]=>String,Optional[properties]=>Hash[String,String]]]]"`
		Sparksql_config            *[]map[string]interface{} `puppet:"type => Optional[Array[Struct[Optional[jar_file_uris]=>Array[String],Optional[logging_config]=>Array[Struct[Optional[driver_log_levels]=>Hash[String,String]]],Optional[properties]=>Hash[String,String],Optional[query_file_uri]=>String,Optional[query_list]=>Array[String],Optional[script_variables]=>Hash[String,String]]]]"`
		Status                     *[]map[string]string      `puppet:"type => Optional[Array[Struct[Optional[details]=>String,Optional[state]=>String,Optional[state_start_time]=>String,Optional[substate]=>String]]]"`
	}

	Dns_managed_zone struct {
		Dns_managed_zone_id *string `lyra:"tf-gen.ignore"`
		Description         string  `puppet:"value=>'Managed by Terraform'"`
		Dns_name            string
		Labels              *map[string]string
		Name                string
		Name_servers        *[]string
		Project             *string
	}

	Dns_record_set struct {
		Dns_record_set_id *string `lyra:"tf-gen.ignore"`
		Managed_zone      string
		Name              string
		Project           *string
		Rrdatas           []string
		Ttl               int64
		Type              string
	}

	Endpoints_service struct {
		Endpoints_service_id *string                   `lyra:"tf-gen.ignore"`
		Apis                 *[]map[string]interface{} `puppet:"type => Optional[Array[Struct[Optional[methods]=>Array[Struct[Optional[name]=>String,Optional[request_type]=>String,Optional[response_type]=>String,Optional[syntax]=>String]],Optional[name]=>String,Optional[syntax]=>String,Optional[version]=>String]]]"`
		Config_id            *string
		Dns_address          *string
		Endpoints            *[]map[string]string `puppet:"type => Optional[Array[Struct[Optional[address]=>String,Optional[name]=>String]]]"`
		Grpc_config          *string
		Openapi_config       *string
		Project              *string
		Protoc_output        *string
		Protoc_output_base64 *string
		Service_name         string
	}

	Filestore_instance struct {
		Filestore_instance_id *string `lyra:"tf-gen.ignore"`
		Create_time           *string
		Description           *string
		Etag                  *string
		File_shares           []map[string]interface{} `puppet:"type => Array[Struct[capacity_gb=>Integer,name=>String]]"`
		Labels                *map[string]string
		Name                  string
		Networks              []map[string]interface{} `puppet:"type => Array[Struct[Optional[ip_addresses]=>Array[String],modes=>Array[String],network=>String,Optional[reserved_ip_range]=>String]]"`
		Project               *string
		Tier                  string
		Zone                  string
	}

	Folder struct {
		Folder_id       *string `lyra:"tf-gen.ignore"`
		Create_time     *string
		Display_name    string
		Lifecycle_state *string
		Name            *string
		Parent          string
	}

	Folder_iam_binding struct {
		Folder_iam_binding_id *string `lyra:"tf-gen.ignore"`
		Etag                  *string
		Folder                string
		Members               []string
		Role                  string
	}

	Folder_iam_member struct {
		Folder_iam_member_id *string `lyra:"tf-gen.ignore"`
		Etag                 *string
		Folder               string
		Member               string
		Role                 string
	}

	Folder_iam_policy struct {
		Folder_iam_policy_id *string `lyra:"tf-gen.ignore"`
		Etag                 *string
		Folder               string
		Policy_data          string
	}

	Folder_organization_policy struct {
		Folder_organization_policy_id *string            `lyra:"tf-gen.ignore"`
		Boolean_policy                *[]map[string]bool `puppet:"type => Optional[Array[Struct[enforced=>Boolean]]]"`
		Constraint                    string
		Etag                          *string
		Folder                        string
		List_policy                   *[]map[string]interface{} `puppet:"type => Optional[Array[Struct[Optional[allow]=>Array[Struct[Optional[all]=>Boolean,Optional[values]=>Array[String]]],Optional[deny]=>Array[Struct[Optional[all]=>Boolean,Optional[values]=>Array[String]]],Optional[suggested_value]=>String]]]"`
		Restore_policy                *[]map[string]bool        `puppet:"type => Optional[Array[Struct['default'=>Boolean]]]"`
		Update_time                   *string
		Version                       *int64
	}

	Kms_crypto_key struct {
		Kms_crypto_key_id *string `lyra:"tf-gen.ignore"`
		Key_ring          string
		Name              string
		Rotation_period   *string
		Self_link         *string
	}

	Kms_crypto_key_iam_binding struct {
		Kms_crypto_key_iam_binding_id *string `lyra:"tf-gen.ignore"`
		Crypto_key_id                 string
		Etag                          *string
		Members                       []string
		Role                          string
	}

	Kms_crypto_key_iam_member struct {
		Kms_crypto_key_iam_member_id *string `lyra:"tf-gen.ignore"`
		Crypto_key_id                string
		Etag                         *string
		Member                       string
		Role                         string
	}

	Kms_key_ring struct {
		Kms_key_ring_id *string `lyra:"tf-gen.ignore"`
		Location        string
		Name            string
		Project         *string
		Self_link       *string
	}

	Kms_key_ring_iam_binding struct {
		Kms_key_ring_iam_binding_id *string `lyra:"tf-gen.ignore"`
		Etag                        *string
		Key_ring_id                 string
		Members                     []string
		Role                        string
	}

	Kms_key_ring_iam_member struct {
		Kms_key_ring_iam_member_id *string `lyra:"tf-gen.ignore"`
		Etag                       *string
		Key_ring_id                string
		Member                     string
		Role                       string
	}

	Kms_key_ring_iam_policy struct {
		Kms_key_ring_iam_policy_id *string `lyra:"tf-gen.ignore"`
		Etag                       *string
		Key_ring_id                string
		Policy_data                string
	}

	Logging_billing_account_exclusion struct {
		Logging_billing_account_exclusion_id *string `lyra:"tf-gen.ignore"`
		Billing_account                      string
		Description                          *string
		Disabled                             *bool
		Filter                               string
		Name                                 string
	}

	Logging_billing_account_sink struct {
		Logging_billing_account_sink_id *string `lyra:"tf-gen.ignore"`
		Billing_account                 string
		Destination                     string
		Filter                          *string
		Name                            string
		Writer_identity                 *string
	}

	Logging_folder_exclusion struct {
		Logging_folder_exclusion_id *string `lyra:"tf-gen.ignore"`
		Description                 *string
		Disabled                    *bool
		Filter                      string
		Folder                      string
		Name                        string
	}

	Logging_folder_sink struct {
		Logging_folder_sink_id *string `lyra:"tf-gen.ignore"`
		Destination            string
		Filter                 *string
		Folder                 string
		Include_children       bool `puppet:"value=>false"`
		Name                   string
		Writer_identity        *string
	}

	Logging_organization_exclusion struct {
		Logging_organization_exclusion_id *string `lyra:"tf-gen.ignore"`
		Description                       *string
		Disabled                          *bool
		Filter                            string
		Name                              string
		Org_id                            string
	}

	Logging_organization_sink struct {
		Logging_organization_sink_id *string `lyra:"tf-gen.ignore"`
		Destination                  string
		Filter                       *string
		Include_children             bool `puppet:"value=>false"`
		Name                         string
		Org_id                       string
		Writer_identity              *string
	}

	Logging_project_exclusion struct {
		Logging_project_exclusion_id *string `lyra:"tf-gen.ignore"`
		Description                  *string
		Disabled                     *bool
		Filter                       string
		Name                         string
		Project                      *string
	}

	Logging_project_sink struct {
		Logging_project_sink_id *string `lyra:"tf-gen.ignore"`
		Destination             string
		Filter                  *string
		Name                    string
		Project                 *string
		Unique_writer_identity  bool `puppet:"value=>false"`
		Writer_identity         *string
	}

	Monitoring_alert_policy struct {
		Monitoring_alert_policy_id *string `lyra:"tf-gen.ignore"`
		Combiner                   string
		Conditions                 []map[string]interface{} `puppet:"type => Array[Struct[Optional[condition_absent]=>Array[Struct[Optional[aggregations]=>Array[Struct[Optional[alignment_period]=>String,Optional[cross_series_reducer]=>String,Optional[group_by_fields]=>Array[String],Optional[per_series_aligner]=>String]],duration=>String,Optional[filter]=>String,Optional[trigger]=>Array[Struct[Optional[count]=>Integer,Optional[percent]=>Float]]]],Optional[condition_threshold]=>Array[Struct[Optional[aggregations]=>Array[Struct[Optional[alignment_period]=>String,Optional[cross_series_reducer]=>String,Optional[group_by_fields]=>Array[String],Optional[per_series_aligner]=>String]],comparison=>String,Optional[denominator_aggregations]=>Array[Struct[Optional[alignment_period]=>String,Optional[cross_series_reducer]=>String,Optional[group_by_fields]=>Array[String],Optional[per_series_aligner]=>String]],Optional[denominator_filter]=>String,duration=>String,Optional[filter]=>String,Optional[threshold_value]=>Float,Optional[trigger]=>Array[Struct[Optional[count]=>Integer,Optional[percent]=>Float]]]],display_name=>String,Optional[name]=>String]]"`
		Creation_record            *[]map[string]string     `puppet:"type => Optional[Array[Struct[Optional[mutate_time]=>String,Optional[mutated_by]=>String]]]"`
		Display_name               string
		Enabled                    bool
		Labels                     *[]string
		Name                       *string
		Notification_channels      *[]string
		Project                    *string
	}

	Monitoring_group struct {
		Monitoring_group_id *string `lyra:"tf-gen.ignore"`
		Display_name        string
		Filter              string
		Is_cluster          *bool
		Name                *string
		Parent_name         *string
		Project             *string
	}

	Monitoring_notification_channel struct {
		Monitoring_notification_channel_id *string `lyra:"tf-gen.ignore"`
		Description                        *string
		Display_name                       string
		Enabled                            bool `puppet:"value=>true"`
		Labels                             *map[string]string
		Name                               *string
		Project                            *string
		Type                               string
		User_labels                        *map[string]string
		Verification_status                *string
	}

	Monitoring_uptime_check_config struct {
		Monitoring_uptime_check_config_id *string              `lyra:"tf-gen.ignore"`
		Content_matchers                  *[]map[string]string `puppet:"type => Optional[Array[Struct[Optional[content]=>String]]]"`
		Display_name                      string
		Http_check                        *[]map[string]interface{} `puppet:"type => Optional[Array[Struct[Optional[auth_info]=>Array[Struct[Optional[password]=>String,Optional[username]=>String]],Optional[headers]=>Hash[String,String],Optional[mask_headers]=>Boolean,Optional[path]=>String,Optional[port]=>Integer,Optional[use_ssl]=>Boolean]]]"`
		Internal_checkers                 *[]map[string]string      `puppet:"type => Optional[Array[Struct[Optional[display_name]=>String,Optional[gcp_zone]=>String,Optional[name]=>String,Optional[network]=>String,Optional[peer_project_id]=>String]]]"`
		Is_internal                       *bool
		Monitored_resource                *[]map[string]interface{} `puppet:"type => Optional[Array[Struct[labels=>Hash[String,String],type=>String]]]"`
		Name                              *string
		Period                            string `puppet:"value=>'300s'"`
		Project                           *string
		Resource_group                    *[]map[string]string `puppet:"type => Optional[Array[Struct[Optional[group_id]=>String,Optional[resource_type]=>String]]]"`
		Selected_regions                  *[]string
		Tcp_check                         *[]map[string]int64 `puppet:"type => Optional[Array[Struct[port=>Integer]]]"`
		Timeout                           string
	}

	Organization_iam_binding struct {
		Organization_iam_binding_id *string `lyra:"tf-gen.ignore"`
		Etag                        *string
		Members                     []string
		Org_id                      string
		Role                        string
	}

	Organization_iam_custom_role struct {
		Organization_iam_custom_role_id *string `lyra:"tf-gen.ignore"`
		Deleted                         bool    `puppet:"value=>false"`
		Description                     *string
		Org_id                          string
		Permissions                     []string
		Role_id                         string
		Stage                           string `puppet:"value=>'GA'"`
		Title                           string
	}

	Organization_iam_member struct {
		Organization_iam_member_id *string `lyra:"tf-gen.ignore"`
		Etag                       *string
		Member                     string
		Org_id                     string
		Role                       string
	}

	Organization_iam_policy struct {
		Organization_iam_policy_id *string `lyra:"tf-gen.ignore"`
		Etag                       *string
		Org_id                     string
		Policy_data                string
	}

	Organization_policy struct {
		Organization_policy_id *string            `lyra:"tf-gen.ignore"`
		Boolean_policy         *[]map[string]bool `puppet:"type => Optional[Array[Struct[enforced=>Boolean]]]"`
		Constraint             string
		Etag                   *string
		List_policy            *[]map[string]interface{} `puppet:"type => Optional[Array[Struct[Optional[allow]=>Array[Struct[Optional[all]=>Boolean,Optional[values]=>Array[String]]],Optional[deny]=>Array[Struct[Optional[all]=>Boolean,Optional[values]=>Array[String]]],Optional[suggested_value]=>String]]]"`
		Org_id                 string
		Restore_policy         *[]map[string]bool `puppet:"type => Optional[Array[Struct['default'=>Boolean]]]"`
		Update_time            *string
		Version                *int64
	}

	Project struct {
		Project_lyra_id     *string                   `lyra:"tf-gen.ignore"`
		App_engine          *[]map[string]interface{} `puppet:"type => Optional[Array[Struct[Optional[auth_domain]=>String,Optional[code_bucket]=>String,Optional[default_bucket]=>String,Optional[default_hostname]=>String,Optional[feature_settings]=>Array[Struct[Optional[split_health_checks]=>Boolean]],Optional[gcr_domain]=>String,Optional[location_id]=>String,Optional[name]=>String,Optional[serving_status]=>String,Optional[url_dispatch_rule]=>Array[Struct[Optional[domain]=>String,Optional[path]=>String,Optional[service]=>String]]]]]"`
		Auto_create_network bool                      `puppet:"value=>true"`
		Billing_account     *string
		Folder_id           *string
		Labels              *map[string]string
		Name                string
		Number              *string
		Org_id              *string
		Policy_data         *string
		Policy_etag         *string
		Project_id          string
		Skip_delete         *bool
	}

	Project_iam_binding struct {
		Project_iam_binding_id *string `lyra:"tf-gen.ignore"`
		Etag                   *string
		Members                []string
		Project                *string
		Role                   string
	}

	Project_iam_custom_role struct {
		Project_iam_custom_role_id *string `lyra:"tf-gen.ignore"`
		Deleted                    bool    `puppet:"value=>false"`
		Description                *string
		Permissions                []string
		Project                    *string
		Role_id                    string
		Stage                      string `puppet:"value=>'GA'"`
		Title                      string
	}

	Project_iam_member struct {
		Project_iam_member_id *string `lyra:"tf-gen.ignore"`
		Etag                  *string
		Member                string
		Project               *string
		Role                  string
	}

	Project_iam_policy struct {
		Project_iam_policy_id *string `lyra:"tf-gen.ignore"`
		Authoritative         *bool
		Disable_project       *bool
		Etag                  *string
		Policy_data           string
		Project               *string
		Restore_policy        *string
	}

	Project_organization_policy struct {
		Project_organization_policy_id *string            `lyra:"tf-gen.ignore"`
		Boolean_policy                 *[]map[string]bool `puppet:"type => Optional[Array[Struct[enforced=>Boolean]]]"`
		Constraint                     string
		Etag                           *string
		List_policy                    *[]map[string]interface{} `puppet:"type => Optional[Array[Struct[Optional[allow]=>Array[Struct[Optional[all]=>Boolean,Optional[values]=>Array[String]]],Optional[deny]=>Array[Struct[Optional[all]=>Boolean,Optional[values]=>Array[String]]],Optional[suggested_value]=>String]]]"`
		Project                        string
		Restore_policy                 *[]map[string]bool `puppet:"type => Optional[Array[Struct['default'=>Boolean]]]"`
		Update_time                    *string
		Version                        *int64
	}

	Project_service struct {
		Project_service_id *string `lyra:"tf-gen.ignore"`
		Disable_on_destroy bool    `puppet:"value=>true"`
		Project            *string
		Service            string
	}

	Project_services struct {
		Project_services_id *string `lyra:"tf-gen.ignore"`
		Disable_on_destroy  bool    `puppet:"value=>true"`
		Project             *string
		Services            []string
	}

	Project_usage_export_bucket struct {
		Project_usage_export_bucket_id *string `lyra:"tf-gen.ignore"`
		Bucket_name                    string
		Prefix                         *string
		Project                        *string
	}

	Pubsub_subscription struct {
		Pubsub_subscription_id *string `lyra:"tf-gen.ignore"`
		Ack_deadline_seconds   *int64
		Name                   string
		Path                   *string
		Project                *string
		Push_config            *[]map[string]interface{} `puppet:"type => Optional[Array[Struct[Optional[attributes]=>Hash[String,String],push_endpoint=>String]]]"`
		Topic                  string
	}

	Pubsub_subscription_iam_binding struct {
		Pubsub_subscription_iam_binding_id *string `lyra:"tf-gen.ignore"`
		Etag                               *string
		Members                            []string
		Project                            *string
		Role                               string
		Subscription                       string
	}

	Pubsub_subscription_iam_member struct {
		Pubsub_subscription_iam_member_id *string `lyra:"tf-gen.ignore"`
		Etag                              *string
		Member                            string
		Project                           *string
		Role                              string
		Subscription                      string
	}

	Pubsub_subscription_iam_policy struct {
		Pubsub_subscription_iam_policy_id *string `lyra:"tf-gen.ignore"`
		Etag                              *string
		Policy_data                       string
		Project                           *string
		Subscription                      string
	}

	Pubsub_topic struct {
		Pubsub_topic_id *string `lyra:"tf-gen.ignore"`
		Name            string
		Project         *string
	}

	Pubsub_topic_iam_binding struct {
		Pubsub_topic_iam_binding_id *string `lyra:"tf-gen.ignore"`
		Etag                        *string
		Members                     []string
		Project                     *string
		Role                        string
		Topic                       string
	}

	Pubsub_topic_iam_member struct {
		Pubsub_topic_iam_member_id *string `lyra:"tf-gen.ignore"`
		Etag                       *string
		Member                     string
		Project                    *string
		Role                       string
		Topic                      string
	}

	Pubsub_topic_iam_policy struct {
		Pubsub_topic_iam_policy_id *string `lyra:"tf-gen.ignore"`
		Etag                       *string
		Policy_data                string
		Project                    *string
		Topic                      string
	}

	Redis_instance struct {
		Redis_instance_id       *string `lyra:"tf-gen.ignore"`
		Alternative_location_id *string
		Authorized_network      *string
		Create_time             *string
		Current_location_id     *string
		Display_name            *string
		Host                    *string
		Labels                  *map[string]string
		Location_id             *string
		Memory_size_gb          int64
		Name                    string
		Port                    *int64
		Project                 *string
		Redis_configs           *map[string]string
		Redis_version           *string
		Region                  *string
		Reserved_ip_range       *string
		Tier                    string `puppet:"value=>'BASIC'"`
	}

	Resource_manager_lien struct {
		Resource_manager_lien_id *string `lyra:"tf-gen.ignore"`
		Create_time              *string
		Name                     *string
		Origin                   string
		Parent                   string
		Reason                   string
		Restrictions             []string
	}

	Runtimeconfig_config struct {
		Runtimeconfig_config_id *string `lyra:"tf-gen.ignore"`
		Description             *string
		Name                    string
		Project                 *string
	}

	Runtimeconfig_variable struct {
		Runtimeconfig_variable_id *string `lyra:"tf-gen.ignore"`
		Name                      string
		Parent                    string
		Project                   *string
		Text                      *string
		Update_time               *string
		Value                     *string
	}

	Service_account struct {
		Service_account_id *string `lyra:"tf-gen.ignore"`
		Account_id         string
		Display_name       *string
		Email              *string
		Name               *string
		Policy_data        *string
		Project            *string
		Unique_id          *string
	}

	Service_account_iam_binding struct {
		Service_account_iam_binding_id *string `lyra:"tf-gen.ignore"`
		Etag                           *string
		Members                        []string
		Role                           string
		Service_account_id             string
	}

	Service_account_iam_member struct {
		Service_account_iam_member_id *string `lyra:"tf-gen.ignore"`
		Etag                          *string
		Member                        string
		Role                          string
		Service_account_id            string
	}

	Service_account_iam_policy struct {
		Service_account_iam_policy_id *string `lyra:"tf-gen.ignore"`
		Etag                          *string
		Policy_data                   string
		Service_account_id            string
	}

	Service_account_key struct {
		Service_account_key_id  *string `lyra:"tf-gen.ignore"`
		Key_algorithm           string  `puppet:"value=>'KEY_ALG_RSA_2048'"`
		Name                    *string
		Pgp_key                 *string
		Private_key             *string
		Private_key_encrypted   *string
		Private_key_fingerprint *string
		Private_key_type        string `puppet:"value=>'TYPE_GOOGLE_CREDENTIALS_FILE'"`
		Public_key              *string
		Public_key_type         string `puppet:"value=>'TYPE_X509_PEM_FILE'"`
		Service_account_id      string
		Valid_after             *string
		Valid_before            *string
	}

	Sourcerepo_repository struct {
		Sourcerepo_repository_id *string `lyra:"tf-gen.ignore"`
		Name                     string
		Project                  *string
		Size                     *int64
		Url                      *string
	}

	Spanner_database struct {
		Spanner_database_id *string `lyra:"tf-gen.ignore"`
		Ddl                 *[]string
		Instance            string
		Name                string
		Project             *string
		State               *string
	}

	Spanner_database_iam_binding struct {
		Spanner_database_iam_binding_id *string `lyra:"tf-gen.ignore"`
		Database                        string
		Etag                            *string
		Instance                        string
		Members                         []string
		Project                         *string
		Role                            string
	}

	Spanner_database_iam_member struct {
		Spanner_database_iam_member_id *string `lyra:"tf-gen.ignore"`
		Database                       string
		Etag                           *string
		Instance                       string
		Member                         string
		Project                        *string
		Role                           string
	}

	Spanner_database_iam_policy struct {
		Spanner_database_iam_policy_id *string `lyra:"tf-gen.ignore"`
		Database                       string
		Etag                           *string
		Instance                       string
		Policy_data                    string
		Project                        *string
	}

	Spanner_instance struct {
		Spanner_instance_id *string `lyra:"tf-gen.ignore"`
		Config              string
		Display_name        string
		Labels              *map[string]string
		Name                *string
		Num_nodes           int64 `puppet:"value=>1"`
		Project             *string
		State               *string
	}

	Spanner_instance_iam_binding struct {
		Spanner_instance_iam_binding_id *string `lyra:"tf-gen.ignore"`
		Etag                            *string
		Instance                        string
		Members                         []string
		Project                         *string
		Role                            string
	}

	Spanner_instance_iam_member struct {
		Spanner_instance_iam_member_id *string `lyra:"tf-gen.ignore"`
		Etag                           *string
		Instance                       string
		Member                         string
		Project                        *string
		Role                           string
	}

	Spanner_instance_iam_policy struct {
		Spanner_instance_iam_policy_id *string `lyra:"tf-gen.ignore"`
		Etag                           *string
		Instance                       string
		Policy_data                    string
		Project                        *string
	}

	Sql_database struct {
		Sql_database_id *string `lyra:"tf-gen.ignore"`
		Charset         *string
		Collation       *string
		Instance        string
		Name            string
		Project         *string
		Self_link       *string
	}

	Sql_database_instance struct {
		Sql_database_instance_id      *string `lyra:"tf-gen.ignore"`
		Connection_name               *string
		Database_version              string `puppet:"value=>'MYSQL_5_6'"`
		First_ip_address              *string
		Ip_address                    *[]map[string]string `puppet:"type => Optional[Array[Struct[Optional[ip_address]=>String,Optional[time_to_retire]=>String]]]"`
		Master_instance_name          *string
		Name                          *string
		Project                       *string
		Region                        *string
		Replica_configuration         *[]map[string]interface{} `puppet:"type => Optional[Array[Struct[Optional[ca_certificate]=>String,Optional[client_certificate]=>String,Optional[client_key]=>String,Optional[connect_retry_interval]=>Integer,Optional[dump_file_path]=>String,Optional[failover_target]=>Boolean,Optional[master_heartbeat_period]=>Integer,Optional[password]=>String,Optional[ssl_cipher]=>String,Optional[username]=>String,Optional[verify_server_certificate]=>Boolean]]]"`
		Self_link                     *string
		Server_ca_cert                *[]map[string]string `puppet:"type => Optional[Array[Struct[Optional[cert]=>String,Optional[common_name]=>String,Optional[create_time]=>String,Optional[expiration_time]=>String,Optional[sha1_fingerprint]=>String]]]"`
		Service_account_email_address *string
		Settings                      []map[string]interface{} `puppet:"type => Array[Struct[Optional[activation_policy]=>String,Optional[authorized_gae_applications]=>Array[String],Optional[availability_type]=>String,Optional[backup_configuration]=>Array[Struct[Optional[binary_log_enabled]=>Boolean,Optional[enabled]=>Boolean,Optional[start_time]=>String]],Optional[crash_safe_replication]=>Boolean,Optional[database_flags]=>Array[Struct[Optional[name]=>String,Optional[value]=>String]],Optional[disk_autoresize]=>Boolean,Optional[disk_size]=>Integer,Optional[disk_type]=>String,Optional[ip_configuration]=>Array[Struct[Optional[authorized_networks]=>Array[Struct[Optional[expiration_time]=>String,Optional[name]=>String,Optional[value]=>String]],Optional[ipv4_enabled]=>Boolean,Optional[private_network]=>String,Optional[require_ssl]=>Boolean]],Optional[location_preference]=>Array[Struct[Optional[follow_gae_application]=>String,Optional[zone]=>String]],Optional[maintenance_window]=>Array[Struct[Optional[day]=>Integer,Optional[hour]=>Integer,Optional[update_track]=>String]],Optional[pricing_plan]=>String,Optional[replication_type]=>String,tier=>String,Optional[user_labels]=>Hash[String,String],Optional[version]=>Integer]]"`
	}

	Sql_ssl_cert struct {
		Sql_ssl_cert_id    *string `lyra:"tf-gen.ignore"`
		Cert               *string
		Cert_serial_number *string
		Common_name        string
		Create_time        *string
		Expiration_time    *string
		Instance           string
		Private_key        *string
		Server_ca_cert     *string
		Sha1_fingerprint   *string
	}

	Sql_user struct {
		Sql_user_id *string `lyra:"tf-gen.ignore"`
		Host        *string
		Instance    string
		Name        string
		Password    *string
		Project     *string
	}

	Storage_bucket struct {
		Storage_bucket_id *string                   `lyra:"tf-gen.ignore"`
		Cors              *[]map[string]interface{} `puppet:"type => Optional[Array[Struct[Optional[max_age_seconds]=>Integer,Optional[method]=>Array[String],Optional[origin]=>Array[String],Optional[response_header]=>Array[String]]]]"`
		Encryption        *[]map[string]string      `puppet:"type => Optional[Array[Struct[default_kms_key_name=>String]]]"`
		Force_destroy     bool                      `puppet:"value=>false"`
		Labels            *map[string]string
		Lifecycle_rule    *[]map[string][]interface{} `puppet:"type => Optional[Array[Struct[action=>Array[Struct[Optional[storage_class]=>String,type=>String]],condition=>Array[Struct[Optional[age]=>Integer,Optional[created_before]=>String,Optional[is_live]=>Boolean,Optional[matches_storage_class]=>Array[String],Optional[num_newer_versions]=>Integer]]]]]"`
		Location          string                      `puppet:"value=>'US'"`
		Logging           *[]map[string]string        `puppet:"type => Optional[Array[Struct[log_bucket=>String,Optional[log_object_prefix]=>String]]]"`
		Name              string
		Predefined_acl    *string
		Project           *string
		Self_link         *string
		Storage_class     string `puppet:"value=>'STANDARD'"`
		Url               *string
		Versioning        *[]map[string]bool   `puppet:"type => Optional[Array[Struct[Optional[enabled]=>Boolean]]]"`
		Website           *[]map[string]string `puppet:"type => Optional[Array[Struct[Optional[main_page_suffix]=>String,Optional[not_found_page]=>String]]]"`
	}

	Storage_bucket_acl struct {
		Storage_bucket_acl_id *string `lyra:"tf-gen.ignore"`
		Bucket                string
		Default_acl           *string
		Predefined_acl        *string
		Role_entity           *[]string
	}

	Storage_bucket_iam_binding struct {
		Storage_bucket_iam_binding_id *string `lyra:"tf-gen.ignore"`
		Bucket                        string
		Etag                          *string
		Members                       []string
		Role                          string
	}

	Storage_bucket_iam_member struct {
		Storage_bucket_iam_member_id *string `lyra:"tf-gen.ignore"`
		Bucket                       string
		Etag                         *string
		Member                       string
		Role                         string
	}

	Storage_bucket_iam_policy struct {
		Storage_bucket_iam_policy_id *string `lyra:"tf-gen.ignore"`
		Bucket                       string
		Etag                         *string
		Policy_data                  string
	}

	Storage_bucket_object struct {
		Storage_bucket_object_id *string `lyra:"tf-gen.ignore"`
		Bucket                   string
		Cache_control            *string
		Content                  *string
		Content_disposition      *string
		Content_encoding         *string
		Content_language         *string
		Content_type             *string
		Crc32c                   *string
		Detect_md5hash           string `puppet:"value=>'different hash'"`
		Md5hash                  *string
		Name                     string
		Predefined_acl           *string
		Source                   *string
		Storage_class            *string
	}

	Storage_default_object_access_control struct {
		Storage_default_object_access_control_id *string `lyra:"tf-gen.ignore"`
		Bucket                                   string
		Domain                                   *string
		Email                                    *string
		Entity                                   string
		Entity_id                                *string
		Generation                               *int64
		Object                                   *string
		Project_team                             *[]map[string]string `puppet:"type => Optional[Array[Struct[Optional[project_number]=>String,Optional[team]=>String]]]"`
		Role                                     string
	}

	Storage_default_object_acl struct {
		Storage_default_object_acl_id *string `lyra:"tf-gen.ignore"`
		Bucket                        string
		Role_entity                   *[]string
	}

	Storage_notification struct {
		Storage_notification_id *string `lyra:"tf-gen.ignore"`
		Bucket                  string
		Custom_attributes       *map[string]string
		Event_types             *[]string
		Object_name_prefix      *string
		Payload_format          string
		Self_link               *string
		Topic                   string
	}

	Storage_object_access_control struct {
		Storage_object_access_control_id *string `lyra:"tf-gen.ignore"`
		Bucket                           string
		Domain                           *string
		Email                            *string
		Entity                           string
		Entity_id                        *string
		Generation                       *int64
		Object                           string
		Project_team                     *[]map[string]string `puppet:"type => Optional[Array[Struct[Optional[project_number]=>String,Optional[team]=>String]]]"`
		Role                             string
	}

	Storage_object_acl struct {
		Storage_object_acl_id *string `lyra:"tf-gen.ignore"`
		Bucket                string
		Object                string
		Predefined_acl        *string
		Role_entity           *[]string
	}
)

func Initialize(sb *service.Builder, p *schema.Provider) {
	// Generic handler API
	sb.RegisterAPI("TerraformGoogle::GenericHandler", bridge.NewTFHandler(nil, nil, "", ""))

	// Registration of resource types with handler
	var rt px.Type
	rt = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&App_engine_application{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("app_engine_application_id", "auth_domain", "code_bucket", "default_bucket", "default_hostname", "feature_settings", "gcr_domain", "name", "project", "serving_status", "url_dispatch_rule")
		b.ImmutableAttributes("project")
	}))[0]
	sb.RegisterHandler("TerraformGoogle::App_engine_applicationHandler", bridge.NewTFHandler(p, rt, "app_engine_application_id", "google_app_engine_application"), rt)

	rt = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Bigquery_dataset{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("bigquery_dataset_id", "access", "creation_time", "etag", "last_modified_time", "project", "self_link")
		b.ImmutableAttributes("dataset_id", "location", "project")
	}))[0]
	sb.RegisterHandler("TerraformGoogle::Bigquery_datasetHandler", bridge.NewTFHandler(p, rt, "bigquery_dataset_id", "google_bigquery_dataset"), rt)

	rt = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Bigquery_table{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("bigquery_table_id", "creation_time", "etag", "expiration_time", "last_modified_time", "location", "num_bytes", "num_long_term_bytes", "num_rows", "project", "schema", "self_link", "type")
		b.ImmutableAttributes("dataset_id", "project", "table_id")
	}))[0]
	sb.RegisterHandler("TerraformGoogle::Bigquery_tableHandler", bridge.NewTFHandler(p, rt, "bigquery_table_id", "google_bigquery_table"), rt)

	rt = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Bigtable_instance{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("bigtable_instance_id", "display_name", "project", "zone")
		b.ImmutableAttributes("display_name", "instance_type", "name", "project", "zone")
	}))[0]
	sb.RegisterHandler("TerraformGoogle::Bigtable_instanceHandler", bridge.NewTFHandler(p, rt, "bigtable_instance_id", "google_bigtable_instance"), rt)

	rt = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Bigtable_table{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("bigtable_table_id", "project")
		b.ImmutableAttributes("instance_name", "name", "project", "split_keys")
	}))[0]
	sb.RegisterHandler("TerraformGoogle::Bigtable_tableHandler", bridge.NewTFHandler(p, rt, "bigtable_table_id", "google_bigtable_table"), rt)

	rt = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Billing_account_iam_binding{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("billing_account_iam_binding_id", "etag")
		b.ImmutableAttributes("billing_account_id", "role")
	}))[0]
	sb.RegisterHandler("TerraformGoogle::Billing_account_iam_bindingHandler", bridge.NewTFHandler(p, rt, "billing_account_iam_binding_id", "google_billing_account_iam_binding"), rt)

	rt = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Billing_account_iam_member{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("billing_account_iam_member_id", "etag")
		b.ImmutableAttributes("billing_account_id", "member", "role")
	}))[0]
	sb.RegisterHandler("TerraformGoogle::Billing_account_iam_memberHandler", bridge.NewTFHandler(p, rt, "billing_account_iam_member_id", "google_billing_account_iam_member"), rt)

	rt = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Billing_account_iam_policy{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("billing_account_iam_policy_id", "etag")
		b.ImmutableAttributes("billing_account_id")
	}))[0]
	sb.RegisterHandler("TerraformGoogle::Billing_account_iam_policyHandler", bridge.NewTFHandler(p, rt, "billing_account_iam_policy_id", "google_billing_account_iam_policy"), rt)

	rt = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Binary_authorization_attestor{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("binary_authorization_attestor_id", "project")
		b.ImmutableAttributes("name", "project")
	}))[0]
	sb.RegisterHandler("TerraformGoogle::Binary_authorization_attestorHandler", bridge.NewTFHandler(p, rt, "binary_authorization_attestor_id", "google_binary_authorization_attestor"), rt)

	rt = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Binary_authorization_policy{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("binary_authorization_policy_id", "project")
		b.ImmutableAttributes("project")
	}))[0]
	sb.RegisterHandler("TerraformGoogle::Binary_authorization_policyHandler", bridge.NewTFHandler(p, rt, "binary_authorization_policy_id", "google_binary_authorization_policy"), rt)

	rt = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Cloudbuild_trigger{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("cloudbuild_trigger_id", "project")
		b.ImmutableAttributes("build", "description", "filename", "project", "substitutions", "trigger_template")
	}))[0]
	sb.RegisterHandler("TerraformGoogle::Cloudbuild_triggerHandler", bridge.NewTFHandler(p, rt, "cloudbuild_trigger_id", "google_cloudbuild_trigger"), rt)

	rt = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Cloudfunctions_function{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("cloudfunctions_function_id", "event_trigger", "https_trigger_url", "project", "region", "retry_on_failure", "runtime", "trigger_bucket", "trigger_topic")
		b.ImmutableAttributes("entry_point", "name", "project", "region", "trigger_http")
	}))[0]
	sb.RegisterHandler("TerraformGoogle::Cloudfunctions_functionHandler", bridge.NewTFHandler(p, rt, "cloudfunctions_function_id", "google_cloudfunctions_function"), rt)

	rt = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Cloudiot_registry{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("cloudiot_registry_id", "http_config", "mqtt_config", "project", "region")
		b.ImmutableAttributes("name", "project", "region")
	}))[0]
	sb.RegisterHandler("TerraformGoogle::Cloudiot_registryHandler", bridge.NewTFHandler(p, rt, "cloudiot_registry_id", "google_cloudiot_registry"), rt)

	rt = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Composer_environment{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("composer_environment_id", "config", "project")
		b.ImmutableAttributes("name", "project", "region")
	}))[0]
	sb.RegisterHandler("TerraformGoogle::Composer_environmentHandler", bridge.NewTFHandler(p, rt, "composer_environment_id", "google_composer_environment"), rt)

	rt = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Compute_address{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("compute_address_id", "address", "creation_timestamp", "label_fingerprint", "network_tier", "project", "region", "self_link", "subnetwork", "users")
		b.ImmutableAttributes("address", "address_type", "description", "name", "network_tier", "project", "region", "subnetwork")
	}))[0]
	sb.RegisterHandler("TerraformGoogle::Compute_addressHandler", bridge.NewTFHandler(p, rt, "compute_address_id", "google_compute_address"), rt)

	rt = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Compute_attached_disk{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("compute_attached_disk_id", "device_name", "project", "zone")
		b.ImmutableAttributes("device_name", "disk", "instance", "mode", "project", "zone")
	}))[0]
	sb.RegisterHandler("TerraformGoogle::Compute_attached_diskHandler", bridge.NewTFHandler(p, rt, "compute_attached_disk_id", "google_compute_attached_disk"), rt)

	rt = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Compute_autoscaler{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("compute_autoscaler_id", "creation_timestamp", "project", "self_link", "zone")
		b.ImmutableAttributes("name", "project", "zone")
	}))[0]
	sb.RegisterHandler("TerraformGoogle::Compute_autoscalerHandler", bridge.NewTFHandler(p, rt, "compute_autoscaler_id", "google_compute_autoscaler"), rt)

	rt = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Compute_backend_bucket{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("compute_backend_bucket_id", "creation_timestamp", "project", "self_link")
		b.ImmutableAttributes("name", "project")
	}))[0]
	sb.RegisterHandler("TerraformGoogle::Compute_backend_bucketHandler", bridge.NewTFHandler(p, rt, "compute_backend_bucket_id", "google_compute_backend_bucket"), rt)

	rt = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Compute_backend_service{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("compute_backend_service_id", "cdn_policy", "fingerprint", "port_name", "project", "protocol", "self_link", "session_affinity", "timeout_sec")
		b.ImmutableAttributes("name", "project", "region")
	}))[0]
	sb.RegisterHandler("TerraformGoogle::Compute_backend_serviceHandler", bridge.NewTFHandler(p, rt, "compute_backend_service_id", "google_compute_backend_service"), rt)

	rt = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Compute_disk{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("compute_disk_id", "creation_timestamp", "disk_encryption_key", "disk_encryption_key_sha256", "label_fingerprint", "last_attach_timestamp", "last_detach_timestamp", "project", "self_link", "size", "source_image_id", "source_snapshot_id", "users", "zone")
		b.ImmutableAttributes("description", "disk_encryption_key", "image", "name", "project", "snapshot", "source_image_encryption_key", "source_snapshot_encryption_key", "type", "zone")
	}))[0]
	sb.RegisterHandler("TerraformGoogle::Compute_diskHandler", bridge.NewTFHandler(p, rt, "compute_disk_id", "google_compute_disk"), rt)

	rt = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Compute_firewall{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("compute_firewall_id", "creation_timestamp", "destination_ranges", "direction", "project", "self_link", "source_ranges")
		b.ImmutableAttributes("name", "project")
	}))[0]
	sb.RegisterHandler("TerraformGoogle::Compute_firewallHandler", bridge.NewTFHandler(p, rt, "compute_firewall_id", "google_compute_firewall"), rt)

	rt = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Compute_forwarding_rule{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("compute_forwarding_rule_id", "creation_timestamp", "ip_address", "ip_protocol", "label_fingerprint", "network", "network_tier", "project", "region", "self_link", "service_name", "subnetwork")
		b.ImmutableAttributes("backend_service", "description", "ip_address", "ip_protocol", "ip_version", "load_balancing_scheme", "name", "network", "network_tier", "port_range", "ports", "project", "region", "service_label", "subnetwork")
	}))[0]
	sb.RegisterHandler("TerraformGoogle::Compute_forwarding_ruleHandler", bridge.NewTFHandler(p, rt, "compute_forwarding_rule_id", "google_compute_forwarding_rule"), rt)

	rt = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Compute_global_address{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("compute_global_address_id", "address", "creation_timestamp", "label_fingerprint", "project", "self_link")
		b.ImmutableAttributes("address_type", "description", "ip_version", "name", "network", "prefix_length", "project", "purpose")
	}))[0]
	sb.RegisterHandler("TerraformGoogle::Compute_global_addressHandler", bridge.NewTFHandler(p, rt, "compute_global_address_id", "google_compute_global_address"), rt)

	rt = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Compute_global_forwarding_rule{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("compute_global_forwarding_rule_id", "ip_address", "ip_protocol", "label_fingerprint", "project", "self_link")
		b.ImmutableAttributes("description", "ip_address", "ip_protocol", "ip_version", "name", "port_range", "project", "region")
	}))[0]
	sb.RegisterHandler("TerraformGoogle::Compute_global_forwarding_ruleHandler", bridge.NewTFHandler(p, rt, "compute_global_forwarding_rule_id", "google_compute_global_forwarding_rule"), rt)

	rt = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Compute_health_check{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("compute_health_check_id", "creation_timestamp", "project", "self_link", "type")
		b.ImmutableAttributes("name", "project")
	}))[0]
	sb.RegisterHandler("TerraformGoogle::Compute_health_checkHandler", bridge.NewTFHandler(p, rt, "compute_health_check_id", "google_compute_health_check"), rt)

	rt = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Compute_http_health_check{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("compute_http_health_check_id", "creation_timestamp", "project", "self_link")
		b.ImmutableAttributes("name", "project")
	}))[0]
	sb.RegisterHandler("TerraformGoogle::Compute_http_health_checkHandler", bridge.NewTFHandler(p, rt, "compute_http_health_check_id", "google_compute_http_health_check"), rt)

	rt = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Compute_https_health_check{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("compute_https_health_check_id", "creation_timestamp", "project", "self_link")
		b.ImmutableAttributes("name", "project")
	}))[0]
	sb.RegisterHandler("TerraformGoogle::Compute_https_health_checkHandler", bridge.NewTFHandler(p, rt, "compute_https_health_check_id", "google_compute_https_health_check"), rt)

	rt = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Compute_image{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("compute_image_id", "label_fingerprint", "licenses", "project", "self_link")
		b.ImmutableAttributes("description", "family", "licenses", "name", "project", "raw_disk", "source_disk")
	}))[0]
	sb.RegisterHandler("TerraformGoogle::Compute_imageHandler", bridge.NewTFHandler(p, rt, "compute_image_id", "google_compute_image"), rt)

	rt = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Compute_instance{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("compute_instance_id", "cpu_platform", "guest_accelerator", "instance_id", "label_fingerprint", "metadata_fingerprint", "project", "scheduling", "self_link", "tags_fingerprint", "zone")
		b.ImmutableAttributes("boot_disk", "can_ip_forward", "description", "disk", "guest_accelerator", "metadata_startup_script", "name", "network", "network_interface", "project", "scratch_disk", "zone")
	}))[0]
	sb.RegisterHandler("TerraformGoogle::Compute_instanceHandler", bridge.NewTFHandler(p, rt, "compute_instance_id", "google_compute_instance"), rt)

	rt = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Compute_instance_from_template{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("compute_instance_from_template_id", "allow_stopping_for_update", "attached_disk", "boot_disk", "can_ip_forward", "cpu_platform", "deletion_protection", "description", "guest_accelerator", "instance_id", "label_fingerprint", "labels", "machine_type", "metadata", "metadata_fingerprint", "metadata_startup_script", "min_cpu_platform", "network_interface", "project", "scheduling", "scratch_disk", "self_link", "service_account", "tags", "tags_fingerprint", "zone")
		b.ImmutableAttributes("boot_disk", "can_ip_forward", "description", "guest_accelerator", "metadata_startup_script", "name", "network_interface", "project", "scratch_disk", "source_instance_template", "zone")
	}))[0]
	sb.RegisterHandler("TerraformGoogle::Compute_instance_from_templateHandler", bridge.NewTFHandler(p, rt, "compute_instance_from_template_id", "google_compute_instance_from_template"), rt)

	rt = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Compute_instance_group{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("compute_instance_group_id", "instances", "network", "project", "self_link", "size", "zone")
		b.ImmutableAttributes("description", "name", "network", "project", "zone")
	}))[0]
	sb.RegisterHandler("TerraformGoogle::Compute_instance_groupHandler", bridge.NewTFHandler(p, rt, "compute_instance_group_id", "google_compute_instance_group"), rt)

	rt = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Compute_instance_group_manager{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("compute_instance_group_manager_id", "fingerprint", "instance_group", "project", "self_link", "target_size", "version", "zone")
		b.ImmutableAttributes("base_instance_name", "description", "name", "project", "zone")
	}))[0]
	sb.RegisterHandler("TerraformGoogle::Compute_instance_group_managerHandler", bridge.NewTFHandler(p, rt, "compute_instance_group_manager_id", "google_compute_instance_group_manager"), rt)

	rt = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Compute_instance_template{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("compute_instance_template_id", "metadata_fingerprint", "name", "name_prefix", "project", "region", "scheduling", "self_link", "tags_fingerprint")
		b.ImmutableAttributes("automatic_restart", "can_ip_forward", "description", "disk", "guest_accelerator", "instance_description", "labels", "machine_type", "metadata", "metadata_startup_script", "min_cpu_platform", "name", "name_prefix", "network_interface", "on_host_maintenance", "project", "region", "scheduling", "service_account", "tags")
	}))[0]
	sb.RegisterHandler("TerraformGoogle::Compute_instance_templateHandler", bridge.NewTFHandler(p, rt, "compute_instance_template_id", "google_compute_instance_template"), rt)

	rt = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Compute_interconnect_attachment{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("compute_interconnect_attachment_id", "cloud_router_ip_address", "creation_timestamp", "customer_router_ip_address", "google_reference_id", "private_interconnect_info", "project", "region", "self_link")
		b.ImmutableAttributes("description", "interconnect", "name", "project", "region", "router")
	}))[0]
	sb.RegisterHandler("TerraformGoogle::Compute_interconnect_attachmentHandler", bridge.NewTFHandler(p, rt, "compute_interconnect_attachment_id", "google_compute_interconnect_attachment"), rt)

	rt = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Compute_network{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("compute_network_id", "gateway_ipv4", "project", "routing_mode", "self_link")
		b.ImmutableAttributes("auto_create_subnetworks", "description", "ipv4_range", "name", "project")
	}))[0]
	sb.RegisterHandler("TerraformGoogle::Compute_networkHandler", bridge.NewTFHandler(p, rt, "compute_network_id", "google_compute_network"), rt)

	rt = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Compute_network_peering{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("compute_network_peering_id", "state", "state_details")
		b.ImmutableAttributes("auto_create_routes", "name", "network", "peer_network")
	}))[0]
	sb.RegisterHandler("TerraformGoogle::Compute_network_peeringHandler", bridge.NewTFHandler(p, rt, "compute_network_peering_id", "google_compute_network_peering"), rt)

	rt = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Compute_project_metadata{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("compute_project_metadata_id", "project")
		b.ImmutableAttributes("project")
	}))[0]
	sb.RegisterHandler("TerraformGoogle::Compute_project_metadataHandler", bridge.NewTFHandler(p, rt, "compute_project_metadata_id", "google_compute_project_metadata"), rt)

	rt = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Compute_project_metadata_item{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("compute_project_metadata_item_id", "project")
		b.ImmutableAttributes("key", "project")
	}))[0]
	sb.RegisterHandler("TerraformGoogle::Compute_project_metadata_itemHandler", bridge.NewTFHandler(p, rt, "compute_project_metadata_item_id", "google_compute_project_metadata_item"), rt)

	rt = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Compute_region_autoscaler{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("compute_region_autoscaler_id", "creation_timestamp", "project", "region", "self_link")
		b.ImmutableAttributes("name", "project", "region")
	}))[0]
	sb.RegisterHandler("TerraformGoogle::Compute_region_autoscalerHandler", bridge.NewTFHandler(p, rt, "compute_region_autoscaler_id", "google_compute_region_autoscaler"), rt)

	rt = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Compute_region_backend_service{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("compute_region_backend_service_id", "fingerprint", "project", "protocol", "region", "self_link", "session_affinity", "timeout_sec")
		b.ImmutableAttributes("name", "project", "region")
	}))[0]
	sb.RegisterHandler("TerraformGoogle::Compute_region_backend_serviceHandler", bridge.NewTFHandler(p, rt, "compute_region_backend_service_id", "google_compute_region_backend_service"), rt)

	rt = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Compute_region_disk{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("compute_region_disk_id", "creation_timestamp", "label_fingerprint", "last_attach_timestamp", "last_detach_timestamp", "project", "region", "self_link", "size", "source_snapshot_id", "users")
		b.ImmutableAttributes("description", "disk_encryption_key", "name", "project", "region", "replica_zones", "snapshot", "source_snapshot_encryption_key", "type")
	}))[0]
	sb.RegisterHandler("TerraformGoogle::Compute_region_diskHandler", bridge.NewTFHandler(p, rt, "compute_region_disk_id", "google_compute_region_disk"), rt)

	rt = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Compute_region_instance_group_manager{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("compute_region_instance_group_manager_id", "distribution_policy_zones", "fingerprint", "instance_group", "project", "self_link", "target_size", "version")
		b.ImmutableAttributes("base_instance_name", "description", "distribution_policy_zones", "name", "project", "region")
	}))[0]
	sb.RegisterHandler("TerraformGoogle::Compute_region_instance_group_managerHandler", bridge.NewTFHandler(p, rt, "compute_region_instance_group_manager_id", "google_compute_region_instance_group_manager"), rt)

	rt = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Compute_route{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("compute_route_id", "next_hop_network", "project", "self_link")
		b.ImmutableAttributes("description", "dest_range", "name", "network", "next_hop_gateway", "next_hop_instance", "next_hop_instance_zone", "next_hop_ip", "next_hop_vpn_tunnel", "priority", "project", "tags")
	}))[0]
	sb.RegisterHandler("TerraformGoogle::Compute_routeHandler", bridge.NewTFHandler(p, rt, "compute_route_id", "google_compute_route"), rt)

	rt = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Compute_router{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("compute_router_id", "creation_timestamp", "project", "region", "self_link")
		b.ImmutableAttributes("name", "network", "project", "region")
	}))[0]
	sb.RegisterHandler("TerraformGoogle::Compute_routerHandler", bridge.NewTFHandler(p, rt, "compute_router_id", "google_compute_router"), rt)

	rt = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Compute_router_interface{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("compute_router_interface_id", "project", "region")
		b.ImmutableAttributes("ip_range", "name", "project", "region", "router", "vpn_tunnel")
	}))[0]
	sb.RegisterHandler("TerraformGoogle::Compute_router_interfaceHandler", bridge.NewTFHandler(p, rt, "compute_router_interface_id", "google_compute_router_interface"), rt)

	rt = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Compute_router_nat{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("compute_router_nat_id", "project", "region")
		b.ImmutableAttributes("icmp_idle_timeout_sec", "min_ports_per_vm", "name", "nat_ip_allocate_option", "nat_ips", "project", "region", "router", "source_subnetwork_ip_ranges_to_nat", "subnetwork", "tcp_established_idle_timeout_sec", "tcp_transitory_idle_timeout_sec", "udp_idle_timeout_sec")
	}))[0]
	sb.RegisterHandler("TerraformGoogle::Compute_router_natHandler", bridge.NewTFHandler(p, rt, "compute_router_nat_id", "google_compute_router_nat"), rt)

	rt = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Compute_router_peer{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("compute_router_peer_id", "ip_address", "project", "region")
		b.ImmutableAttributes("advertised_route_priority", "interface", "name", "peer_asn", "peer_ip_address", "project", "region", "router")
	}))[0]
	sb.RegisterHandler("TerraformGoogle::Compute_router_peerHandler", bridge.NewTFHandler(p, rt, "compute_router_peer_id", "google_compute_router_peer"), rt)

	rt = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Compute_security_policy{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("compute_security_policy_id", "fingerprint", "project", "rule", "self_link")
		b.ImmutableAttributes("name", "project")
	}))[0]
	sb.RegisterHandler("TerraformGoogle::Compute_security_policyHandler", bridge.NewTFHandler(p, rt, "compute_security_policy_id", "google_compute_security_policy"), rt)

	rt = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Compute_shared_vpc_host_project{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("compute_shared_vpc_host_project_id")
		b.ImmutableAttributes("project")
	}))[0]
	sb.RegisterHandler("TerraformGoogle::Compute_shared_vpc_host_projectHandler", bridge.NewTFHandler(p, rt, "compute_shared_vpc_host_project_id", "google_compute_shared_vpc_host_project"), rt)

	rt = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Compute_shared_vpc_service_project{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("compute_shared_vpc_service_project_id")
		b.ImmutableAttributes("host_project", "service_project")
	}))[0]
	sb.RegisterHandler("TerraformGoogle::Compute_shared_vpc_service_projectHandler", bridge.NewTFHandler(p, rt, "compute_shared_vpc_service_project_id", "google_compute_shared_vpc_service_project"), rt)

	rt = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Compute_snapshot{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("compute_snapshot_id", "creation_timestamp", "disk_size_gb", "label_fingerprint", "licenses", "project", "self_link", "snapshot_encryption_key", "snapshot_encryption_key_sha256", "snapshot_id", "source_disk_encryption_key_sha256", "source_disk_link", "storage_bytes", "zone")
		b.ImmutableAttributes("description", "name", "project", "source_disk", "zone")
	}))[0]
	sb.RegisterHandler("TerraformGoogle::Compute_snapshotHandler", bridge.NewTFHandler(p, rt, "compute_snapshot_id", "google_compute_snapshot"), rt)

	rt = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Compute_ssl_certificate{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("compute_ssl_certificate_id", "certificate_id", "creation_timestamp", "name", "name_prefix", "project", "self_link")
		b.ImmutableAttributes("certificate", "description", "name", "name_prefix", "private_key", "project")
	}))[0]
	sb.RegisterHandler("TerraformGoogle::Compute_ssl_certificateHandler", bridge.NewTFHandler(p, rt, "compute_ssl_certificate_id", "google_compute_ssl_certificate"), rt)

	rt = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Compute_ssl_policy{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("compute_ssl_policy_id", "creation_timestamp", "enabled_features", "fingerprint", "project", "self_link")
		b.ImmutableAttributes("description", "name", "project")
	}))[0]
	sb.RegisterHandler("TerraformGoogle::Compute_ssl_policyHandler", bridge.NewTFHandler(p, rt, "compute_ssl_policy_id", "google_compute_ssl_policy"), rt)

	rt = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Compute_subnetwork{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("compute_subnetwork_id", "creation_timestamp", "fingerprint", "gateway_address", "project", "region", "secondary_ip_range", "self_link")
		b.ImmutableAttributes("description", "name", "network", "project", "region")
	}))[0]
	sb.RegisterHandler("TerraformGoogle::Compute_subnetworkHandler", bridge.NewTFHandler(p, rt, "compute_subnetwork_id", "google_compute_subnetwork"), rt)

	rt = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Compute_subnetwork_iam_binding{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("compute_subnetwork_iam_binding_id", "etag", "project", "region")
		b.ImmutableAttributes("project", "region", "role", "subnetwork")
	}))[0]
	sb.RegisterHandler("TerraformGoogle::Compute_subnetwork_iam_bindingHandler", bridge.NewTFHandler(p, rt, "compute_subnetwork_iam_binding_id", "google_compute_subnetwork_iam_binding"), rt)

	rt = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Compute_subnetwork_iam_member{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("compute_subnetwork_iam_member_id", "etag", "project", "region")
		b.ImmutableAttributes("member", "project", "region", "role", "subnetwork")
	}))[0]
	sb.RegisterHandler("TerraformGoogle::Compute_subnetwork_iam_memberHandler", bridge.NewTFHandler(p, rt, "compute_subnetwork_iam_member_id", "google_compute_subnetwork_iam_member"), rt)

	rt = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Compute_subnetwork_iam_policy{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("compute_subnetwork_iam_policy_id", "etag", "project", "region")
		b.ImmutableAttributes("project", "region", "subnetwork")
	}))[0]
	sb.RegisterHandler("TerraformGoogle::Compute_subnetwork_iam_policyHandler", bridge.NewTFHandler(p, rt, "compute_subnetwork_iam_policy_id", "google_compute_subnetwork_iam_policy"), rt)

	rt = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Compute_target_http_proxy{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("compute_target_http_proxy_id", "creation_timestamp", "project", "proxy_id", "self_link")
		b.ImmutableAttributes("description", "name", "project")
	}))[0]
	sb.RegisterHandler("TerraformGoogle::Compute_target_http_proxyHandler", bridge.NewTFHandler(p, rt, "compute_target_http_proxy_id", "google_compute_target_http_proxy"), rt)

	rt = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Compute_target_https_proxy{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("compute_target_https_proxy_id", "creation_timestamp", "project", "proxy_id", "self_link")
		b.ImmutableAttributes("description", "name", "project")
	}))[0]
	sb.RegisterHandler("TerraformGoogle::Compute_target_https_proxyHandler", bridge.NewTFHandler(p, rt, "compute_target_https_proxy_id", "google_compute_target_https_proxy"), rt)

	rt = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Compute_target_pool{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("compute_target_pool_id", "instances", "project", "region", "self_link")
		b.ImmutableAttributes("description", "failover_ratio", "name", "project", "region", "session_affinity")
	}))[0]
	sb.RegisterHandler("TerraformGoogle::Compute_target_poolHandler", bridge.NewTFHandler(p, rt, "compute_target_pool_id", "google_compute_target_pool"), rt)

	rt = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Compute_target_ssl_proxy{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("compute_target_ssl_proxy_id", "creation_timestamp", "project", "proxy_id", "self_link")
		b.ImmutableAttributes("description", "name", "project")
	}))[0]
	sb.RegisterHandler("TerraformGoogle::Compute_target_ssl_proxyHandler", bridge.NewTFHandler(p, rt, "compute_target_ssl_proxy_id", "google_compute_target_ssl_proxy"), rt)

	rt = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Compute_target_tcp_proxy{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("compute_target_tcp_proxy_id", "creation_timestamp", "project", "proxy_id", "self_link")
		b.ImmutableAttributes("description", "name", "project")
	}))[0]
	sb.RegisterHandler("TerraformGoogle::Compute_target_tcp_proxyHandler", bridge.NewTFHandler(p, rt, "compute_target_tcp_proxy_id", "google_compute_target_tcp_proxy"), rt)

	rt = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Compute_url_map{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("compute_url_map_id", "fingerprint", "map_id", "project", "self_link")
		b.ImmutableAttributes("name", "project")
	}))[0]
	sb.RegisterHandler("TerraformGoogle::Compute_url_mapHandler", bridge.NewTFHandler(p, rt, "compute_url_map_id", "google_compute_url_map"), rt)

	rt = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Compute_vpn_gateway{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("compute_vpn_gateway_id", "creation_timestamp", "project", "region", "self_link")
		b.ImmutableAttributes("description", "name", "network", "project", "region")
	}))[0]
	sb.RegisterHandler("TerraformGoogle::Compute_vpn_gatewayHandler", bridge.NewTFHandler(p, rt, "compute_vpn_gateway_id", "google_compute_vpn_gateway"), rt)

	rt = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Compute_vpn_tunnel{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("compute_vpn_tunnel_id", "creation_timestamp", "detailed_status", "label_fingerprint", "local_traffic_selector", "project", "region", "remote_traffic_selector", "self_link", "shared_secret_hash")
		b.ImmutableAttributes("description", "ike_version", "local_traffic_selector", "name", "peer_ip", "project", "region", "remote_traffic_selector", "router", "shared_secret", "target_vpn_gateway")
	}))[0]
	sb.RegisterHandler("TerraformGoogle::Compute_vpn_tunnelHandler", bridge.NewTFHandler(p, rt, "compute_vpn_tunnel_id", "google_compute_vpn_tunnel"), rt)

	rt = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Container_analysis_note{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("container_analysis_note_id", "project")
		b.ImmutableAttributes("name", "project")
	}))[0]
	sb.RegisterHandler("TerraformGoogle::Container_analysis_noteHandler", bridge.NewTFHandler(p, rt, "container_analysis_note_id", "google_container_analysis_note"), rt)

	rt = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Container_cluster{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("container_cluster_id", "additional_zones", "addons_config", "cluster_autoscaling", "cluster_ipv4_cidr", "endpoint", "instance_group_urls", "logging_service", "master_auth", "master_ipv4_cidr_block", "master_version", "monitoring_service", "network_policy", "node_config", "node_pool", "node_version", "private_cluster", "private_cluster_config", "project", "region", "subnetwork", "zone")
		b.ImmutableAttributes("cluster_ipv4_cidr", "description", "enable_kubernetes_alpha", "enable_tpu", "initial_node_count", "ip_allocation_policy", "master_ipv4_cidr_block", "name", "network", "node_config", "node_pool", "private_cluster", "project", "region", "subnetwork", "zone")
	}))[0]
	sb.RegisterHandler("TerraformGoogle::Container_clusterHandler", bridge.NewTFHandler(p, rt, "container_cluster_id", "google_container_cluster"), rt)

	rt = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Container_node_pool{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("container_node_pool_id", "initial_node_count", "instance_group_urls", "management", "max_pods_per_node", "name", "name_prefix", "node_config", "node_count", "project", "version", "zone")
		b.ImmutableAttributes("cluster", "initial_node_count", "max_pods_per_node", "name", "name_prefix", "node_config", "project", "region", "zone")
	}))[0]
	sb.RegisterHandler("TerraformGoogle::Container_node_poolHandler", bridge.NewTFHandler(p, rt, "container_node_pool_id", "google_container_node_pool"), rt)

	rt = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Dataflow_job{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("dataflow_job_id", "state")
		b.ImmutableAttributes("max_workers", "name", "on_delete", "parameters", "project", "region", "temp_gcs_location", "template_gcs_path", "zone")
	}))[0]
	sb.RegisterHandler("TerraformGoogle::Dataflow_jobHandler", bridge.NewTFHandler(p, rt, "dataflow_job_id", "google_dataflow_job"), rt)

	rt = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Dataproc_cluster{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("dataproc_cluster_id", "cluster_config", "labels", "project")
		b.ImmutableAttributes("name", "project", "region")
	}))[0]
	sb.RegisterHandler("TerraformGoogle::Dataproc_clusterHandler", bridge.NewTFHandler(p, rt, "dataproc_cluster_id", "google_dataproc_cluster"), rt)

	rt = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Dataproc_job{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("dataproc_job_id", "driver_controls_files_uri", "driver_output_resource_uri", "project", "reference", "status")
		b.ImmutableAttributes("hadoop_config", "hive_config", "labels", "pig_config", "project", "pyspark_config", "region", "scheduling", "spark_config", "sparksql_config")
	}))[0]
	sb.RegisterHandler("TerraformGoogle::Dataproc_jobHandler", bridge.NewTFHandler(p, rt, "dataproc_job_id", "google_dataproc_job"), rt)

	rt = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Dns_managed_zone{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("dns_managed_zone_id", "name_servers", "project")
		b.ImmutableAttributes("dns_name", "name", "project")
	}))[0]
	sb.RegisterHandler("TerraformGoogle::Dns_managed_zoneHandler", bridge.NewTFHandler(p, rt, "dns_managed_zone_id", "google_dns_managed_zone"), rt)

	rt = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Dns_record_set{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("dns_record_set_id", "project")
		b.ImmutableAttributes("managed_zone", "name", "project")
	}))[0]
	sb.RegisterHandler("TerraformGoogle::Dns_record_setHandler", bridge.NewTFHandler(p, rt, "dns_record_set_id", "google_dns_record_set"), rt)

	rt = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Endpoints_service{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("endpoints_service_id", "apis", "config_id", "dns_address", "endpoints", "project")
		b.ImmutableAttributes("project", "service_name")
	}))[0]
	sb.RegisterHandler("TerraformGoogle::Endpoints_serviceHandler", bridge.NewTFHandler(p, rt, "endpoints_service_id", "google_endpoints_service"), rt)

	rt = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Filestore_instance{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("filestore_instance_id", "create_time", "etag", "project")
		b.ImmutableAttributes("networks", "project", "tier", "zone")
	}))[0]
	sb.RegisterHandler("TerraformGoogle::Filestore_instanceHandler", bridge.NewTFHandler(p, rt, "filestore_instance_id", "google_filestore_instance"), rt)

	rt = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Folder{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("folder_id", "create_time", "lifecycle_state", "name")
	}))[0]
	sb.RegisterHandler("TerraformGoogle::FolderHandler", bridge.NewTFHandler(p, rt, "folder_id", "google_folder"), rt)

	rt = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Folder_iam_binding{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("folder_iam_binding_id", "etag")
		b.ImmutableAttributes("folder", "role")
	}))[0]
	sb.RegisterHandler("TerraformGoogle::Folder_iam_bindingHandler", bridge.NewTFHandler(p, rt, "folder_iam_binding_id", "google_folder_iam_binding"), rt)

	rt = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Folder_iam_member{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("folder_iam_member_id", "etag")
		b.ImmutableAttributes("folder", "member", "role")
	}))[0]
	sb.RegisterHandler("TerraformGoogle::Folder_iam_memberHandler", bridge.NewTFHandler(p, rt, "folder_iam_member_id", "google_folder_iam_member"), rt)

	rt = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Folder_iam_policy{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("folder_iam_policy_id", "etag")
		b.ImmutableAttributes("folder")
	}))[0]
	sb.RegisterHandler("TerraformGoogle::Folder_iam_policyHandler", bridge.NewTFHandler(p, rt, "folder_iam_policy_id", "google_folder_iam_policy"), rt)

	rt = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Folder_organization_policy{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("folder_organization_policy_id", "etag", "update_time", "version")
		b.ImmutableAttributes("constraint", "folder")
	}))[0]
	sb.RegisterHandler("TerraformGoogle::Folder_organization_policyHandler", bridge.NewTFHandler(p, rt, "folder_organization_policy_id", "google_folder_organization_policy"), rt)

	rt = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Kms_crypto_key{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("kms_crypto_key_id", "self_link")
		b.ImmutableAttributes("key_ring", "name")
	}))[0]
	sb.RegisterHandler("TerraformGoogle::Kms_crypto_keyHandler", bridge.NewTFHandler(p, rt, "kms_crypto_key_id", "google_kms_crypto_key"), rt)

	rt = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Kms_crypto_key_iam_binding{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("kms_crypto_key_iam_binding_id", "etag")
		b.ImmutableAttributes("crypto_key_id", "role")
	}))[0]
	sb.RegisterHandler("TerraformGoogle::Kms_crypto_key_iam_bindingHandler", bridge.NewTFHandler(p, rt, "kms_crypto_key_iam_binding_id", "google_kms_crypto_key_iam_binding"), rt)

	rt = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Kms_crypto_key_iam_member{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("kms_crypto_key_iam_member_id", "etag")
		b.ImmutableAttributes("crypto_key_id", "member", "role")
	}))[0]
	sb.RegisterHandler("TerraformGoogle::Kms_crypto_key_iam_memberHandler", bridge.NewTFHandler(p, rt, "kms_crypto_key_iam_member_id", "google_kms_crypto_key_iam_member"), rt)

	rt = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Kms_key_ring{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("kms_key_ring_id", "project", "self_link")
		b.ImmutableAttributes("location", "name", "project")
	}))[0]
	sb.RegisterHandler("TerraformGoogle::Kms_key_ringHandler", bridge.NewTFHandler(p, rt, "kms_key_ring_id", "google_kms_key_ring"), rt)

	rt = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Kms_key_ring_iam_binding{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("kms_key_ring_iam_binding_id", "etag")
		b.ImmutableAttributes("key_ring_id", "role")
	}))[0]
	sb.RegisterHandler("TerraformGoogle::Kms_key_ring_iam_bindingHandler", bridge.NewTFHandler(p, rt, "kms_key_ring_iam_binding_id", "google_kms_key_ring_iam_binding"), rt)

	rt = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Kms_key_ring_iam_member{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("kms_key_ring_iam_member_id", "etag")
		b.ImmutableAttributes("key_ring_id", "member", "role")
	}))[0]
	sb.RegisterHandler("TerraformGoogle::Kms_key_ring_iam_memberHandler", bridge.NewTFHandler(p, rt, "kms_key_ring_iam_member_id", "google_kms_key_ring_iam_member"), rt)

	rt = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Kms_key_ring_iam_policy{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("kms_key_ring_iam_policy_id", "etag")
		b.ImmutableAttributes("key_ring_id")
	}))[0]
	sb.RegisterHandler("TerraformGoogle::Kms_key_ring_iam_policyHandler", bridge.NewTFHandler(p, rt, "kms_key_ring_iam_policy_id", "google_kms_key_ring_iam_policy"), rt)

	rt = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Logging_billing_account_exclusion{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("logging_billing_account_exclusion_id")
		b.ImmutableAttributes("billing_account", "name")
	}))[0]
	sb.RegisterHandler("TerraformGoogle::Logging_billing_account_exclusionHandler", bridge.NewTFHandler(p, rt, "logging_billing_account_exclusion_id", "google_logging_billing_account_exclusion"), rt)

	rt = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Logging_billing_account_sink{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("logging_billing_account_sink_id", "writer_identity")
		b.ImmutableAttributes("billing_account", "name")
	}))[0]
	sb.RegisterHandler("TerraformGoogle::Logging_billing_account_sinkHandler", bridge.NewTFHandler(p, rt, "logging_billing_account_sink_id", "google_logging_billing_account_sink"), rt)

	rt = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Logging_folder_exclusion{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("logging_folder_exclusion_id")
		b.ImmutableAttributes("folder", "name")
	}))[0]
	sb.RegisterHandler("TerraformGoogle::Logging_folder_exclusionHandler", bridge.NewTFHandler(p, rt, "logging_folder_exclusion_id", "google_logging_folder_exclusion"), rt)

	rt = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Logging_folder_sink{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("logging_folder_sink_id", "writer_identity")
		b.ImmutableAttributes("folder", "include_children", "name")
	}))[0]
	sb.RegisterHandler("TerraformGoogle::Logging_folder_sinkHandler", bridge.NewTFHandler(p, rt, "logging_folder_sink_id", "google_logging_folder_sink"), rt)

	rt = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Logging_organization_exclusion{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("logging_organization_exclusion_id")
		b.ImmutableAttributes("name", "org_id")
	}))[0]
	sb.RegisterHandler("TerraformGoogle::Logging_organization_exclusionHandler", bridge.NewTFHandler(p, rt, "logging_organization_exclusion_id", "google_logging_organization_exclusion"), rt)

	rt = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Logging_organization_sink{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("logging_organization_sink_id", "writer_identity")
		b.ImmutableAttributes("include_children", "name")
	}))[0]
	sb.RegisterHandler("TerraformGoogle::Logging_organization_sinkHandler", bridge.NewTFHandler(p, rt, "logging_organization_sink_id", "google_logging_organization_sink"), rt)

	rt = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Logging_project_exclusion{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("logging_project_exclusion_id", "project")
		b.ImmutableAttributes("name", "project")
	}))[0]
	sb.RegisterHandler("TerraformGoogle::Logging_project_exclusionHandler", bridge.NewTFHandler(p, rt, "logging_project_exclusion_id", "google_logging_project_exclusion"), rt)

	rt = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Logging_project_sink{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("logging_project_sink_id", "project", "writer_identity")
		b.ImmutableAttributes("name", "project", "unique_writer_identity")
	}))[0]
	sb.RegisterHandler("TerraformGoogle::Logging_project_sinkHandler", bridge.NewTFHandler(p, rt, "logging_project_sink_id", "google_logging_project_sink"), rt)

	rt = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Monitoring_alert_policy{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("monitoring_alert_policy_id", "creation_record", "name", "project")
		b.ImmutableAttributes("project")
	}))[0]
	sb.RegisterHandler("TerraformGoogle::Monitoring_alert_policyHandler", bridge.NewTFHandler(p, rt, "monitoring_alert_policy_id", "google_monitoring_alert_policy"), rt)

	rt = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Monitoring_group{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("monitoring_group_id", "name", "project")
		b.ImmutableAttributes("project")
	}))[0]
	sb.RegisterHandler("TerraformGoogle::Monitoring_groupHandler", bridge.NewTFHandler(p, rt, "monitoring_group_id", "google_monitoring_group"), rt)

	rt = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Monitoring_notification_channel{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("monitoring_notification_channel_id", "name", "project", "verification_status")
		b.ImmutableAttributes("project")
	}))[0]
	sb.RegisterHandler("TerraformGoogle::Monitoring_notification_channelHandler", bridge.NewTFHandler(p, rt, "monitoring_notification_channel_id", "google_monitoring_notification_channel"), rt)

	rt = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Monitoring_uptime_check_config{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("monitoring_uptime_check_config_id", "name", "project")
		b.ImmutableAttributes("project")
	}))[0]
	sb.RegisterHandler("TerraformGoogle::Monitoring_uptime_check_configHandler", bridge.NewTFHandler(p, rt, "monitoring_uptime_check_config_id", "google_monitoring_uptime_check_config"), rt)

	rt = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Organization_iam_binding{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("organization_iam_binding_id", "etag")
		b.ImmutableAttributes("org_id", "role")
	}))[0]
	sb.RegisterHandler("TerraformGoogle::Organization_iam_bindingHandler", bridge.NewTFHandler(p, rt, "organization_iam_binding_id", "google_organization_iam_binding"), rt)

	rt = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Organization_iam_custom_role{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("organization_iam_custom_role_id")
		b.ImmutableAttributes("org_id", "role_id")
	}))[0]
	sb.RegisterHandler("TerraformGoogle::Organization_iam_custom_roleHandler", bridge.NewTFHandler(p, rt, "organization_iam_custom_role_id", "google_organization_iam_custom_role"), rt)

	rt = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Organization_iam_member{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("organization_iam_member_id", "etag")
		b.ImmutableAttributes("member", "org_id", "role")
	}))[0]
	sb.RegisterHandler("TerraformGoogle::Organization_iam_memberHandler", bridge.NewTFHandler(p, rt, "organization_iam_member_id", "google_organization_iam_member"), rt)

	rt = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Organization_iam_policy{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("organization_iam_policy_id", "etag")
		b.ImmutableAttributes("org_id")
	}))[0]
	sb.RegisterHandler("TerraformGoogle::Organization_iam_policyHandler", bridge.NewTFHandler(p, rt, "organization_iam_policy_id", "google_organization_iam_policy"), rt)

	rt = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Organization_policy{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("organization_policy_id", "etag", "update_time", "version")
		b.ImmutableAttributes("constraint", "org_id")
	}))[0]
	sb.RegisterHandler("TerraformGoogle::Organization_policyHandler", bridge.NewTFHandler(p, rt, "organization_policy_id", "google_organization_policy"), rt)

	rt = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Project{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("project_lyra_id", "app_engine", "folder_id", "number", "org_id", "policy_data", "policy_etag", "skip_delete")
		b.ImmutableAttributes("project_id")
	}))[0]
	sb.RegisterHandler("TerraformGoogle::ProjectHandler", bridge.NewTFHandler(p, rt, "project_lyra_id", "google_project"), rt)

	rt = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Project_iam_binding{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("project_iam_binding_id", "etag")
		b.ImmutableAttributes("project", "role")
	}))[0]
	sb.RegisterHandler("TerraformGoogle::Project_iam_bindingHandler", bridge.NewTFHandler(p, rt, "project_iam_binding_id", "google_project_iam_binding"), rt)

	rt = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Project_iam_custom_role{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("project_iam_custom_role_id", "project")
		b.ImmutableAttributes("project", "role_id")
	}))[0]
	sb.RegisterHandler("TerraformGoogle::Project_iam_custom_roleHandler", bridge.NewTFHandler(p, rt, "project_iam_custom_role_id", "google_project_iam_custom_role"), rt)

	rt = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Project_iam_member{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("project_iam_member_id", "etag")
		b.ImmutableAttributes("member", "project", "role")
	}))[0]
	sb.RegisterHandler("TerraformGoogle::Project_iam_memberHandler", bridge.NewTFHandler(p, rt, "project_iam_member_id", "google_project_iam_member"), rt)

	rt = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Project_iam_policy{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("project_iam_policy_id", "etag", "project", "restore_policy")
		b.ImmutableAttributes("project")
	}))[0]
	sb.RegisterHandler("TerraformGoogle::Project_iam_policyHandler", bridge.NewTFHandler(p, rt, "project_iam_policy_id", "google_project_iam_policy"), rt)

	rt = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Project_organization_policy{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("project_organization_policy_id", "etag", "update_time", "version")
		b.ImmutableAttributes("constraint", "project")
	}))[0]
	sb.RegisterHandler("TerraformGoogle::Project_organization_policyHandler", bridge.NewTFHandler(p, rt, "project_organization_policy_id", "google_project_organization_policy"), rt)

	rt = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Project_service{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("project_service_id", "project")
		b.ImmutableAttributes("project", "service")
	}))[0]
	sb.RegisterHandler("TerraformGoogle::Project_serviceHandler", bridge.NewTFHandler(p, rt, "project_service_id", "google_project_service"), rt)

	rt = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Project_services{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("project_services_id", "project")
		b.ImmutableAttributes("project")
	}))[0]
	sb.RegisterHandler("TerraformGoogle::Project_servicesHandler", bridge.NewTFHandler(p, rt, "project_services_id", "google_project_services"), rt)

	rt = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Project_usage_export_bucket{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("project_usage_export_bucket_id", "project")
		b.ImmutableAttributes("bucket_name", "prefix", "project")
	}))[0]
	sb.RegisterHandler("TerraformGoogle::Project_usage_export_bucketHandler", bridge.NewTFHandler(p, rt, "project_usage_export_bucket_id", "google_project_usage_export_bucket"), rt)

	rt = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Pubsub_subscription{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("pubsub_subscription_id", "ack_deadline_seconds", "path", "project")
		b.ImmutableAttributes("ack_deadline_seconds", "name", "project", "topic")
	}))[0]
	sb.RegisterHandler("TerraformGoogle::Pubsub_subscriptionHandler", bridge.NewTFHandler(p, rt, "pubsub_subscription_id", "google_pubsub_subscription"), rt)

	rt = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Pubsub_subscription_iam_binding{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("pubsub_subscription_iam_binding_id", "etag", "project")
		b.ImmutableAttributes("project", "role", "subscription")
	}))[0]
	sb.RegisterHandler("TerraformGoogle::Pubsub_subscription_iam_bindingHandler", bridge.NewTFHandler(p, rt, "pubsub_subscription_iam_binding_id", "google_pubsub_subscription_iam_binding"), rt)

	rt = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Pubsub_subscription_iam_member{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("pubsub_subscription_iam_member_id", "etag", "project")
		b.ImmutableAttributes("member", "project", "role", "subscription")
	}))[0]
	sb.RegisterHandler("TerraformGoogle::Pubsub_subscription_iam_memberHandler", bridge.NewTFHandler(p, rt, "pubsub_subscription_iam_member_id", "google_pubsub_subscription_iam_member"), rt)

	rt = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Pubsub_subscription_iam_policy{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("pubsub_subscription_iam_policy_id", "etag", "project")
		b.ImmutableAttributes("project", "subscription")
	}))[0]
	sb.RegisterHandler("TerraformGoogle::Pubsub_subscription_iam_policyHandler", bridge.NewTFHandler(p, rt, "pubsub_subscription_iam_policy_id", "google_pubsub_subscription_iam_policy"), rt)

	rt = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Pubsub_topic{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("pubsub_topic_id", "project")
		b.ImmutableAttributes("name", "project")
	}))[0]
	sb.RegisterHandler("TerraformGoogle::Pubsub_topicHandler", bridge.NewTFHandler(p, rt, "pubsub_topic_id", "google_pubsub_topic"), rt)

	rt = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Pubsub_topic_iam_binding{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("pubsub_topic_iam_binding_id", "etag", "project")
		b.ImmutableAttributes("project", "role", "topic")
	}))[0]
	sb.RegisterHandler("TerraformGoogle::Pubsub_topic_iam_bindingHandler", bridge.NewTFHandler(p, rt, "pubsub_topic_iam_binding_id", "google_pubsub_topic_iam_binding"), rt)

	rt = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Pubsub_topic_iam_member{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("pubsub_topic_iam_member_id", "etag", "project")
		b.ImmutableAttributes("member", "project", "role", "topic")
	}))[0]
	sb.RegisterHandler("TerraformGoogle::Pubsub_topic_iam_memberHandler", bridge.NewTFHandler(p, rt, "pubsub_topic_iam_member_id", "google_pubsub_topic_iam_member"), rt)

	rt = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Pubsub_topic_iam_policy{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("pubsub_topic_iam_policy_id", "etag", "project")
		b.ImmutableAttributes("project", "topic")
	}))[0]
	sb.RegisterHandler("TerraformGoogle::Pubsub_topic_iam_policyHandler", bridge.NewTFHandler(p, rt, "pubsub_topic_iam_policy_id", "google_pubsub_topic_iam_policy"), rt)

	rt = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Redis_instance{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("redis_instance_id", "alternative_location_id", "authorized_network", "create_time", "current_location_id", "host", "location_id", "port", "project", "redis_version", "region", "reserved_ip_range")
		b.ImmutableAttributes("alternative_location_id", "authorized_network", "location_id", "name", "project", "redis_version", "region", "reserved_ip_range", "tier")
	}))[0]
	sb.RegisterHandler("TerraformGoogle::Redis_instanceHandler", bridge.NewTFHandler(p, rt, "redis_instance_id", "google_redis_instance"), rt)

	rt = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Resource_manager_lien{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("resource_manager_lien_id", "create_time", "name")
		b.ImmutableAttributes("origin", "parent", "reason", "restrictions")
	}))[0]
	sb.RegisterHandler("TerraformGoogle::Resource_manager_lienHandler", bridge.NewTFHandler(p, rt, "resource_manager_lien_id", "google_resource_manager_lien"), rt)

	rt = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Runtimeconfig_config{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("runtimeconfig_config_id", "project")
		b.ImmutableAttributes("name", "project")
	}))[0]
	sb.RegisterHandler("TerraformGoogle::Runtimeconfig_configHandler", bridge.NewTFHandler(p, rt, "runtimeconfig_config_id", "google_runtimeconfig_config"), rt)

	rt = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Runtimeconfig_variable{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("runtimeconfig_variable_id", "project", "update_time")
		b.ImmutableAttributes("name", "parent", "project")
	}))[0]
	sb.RegisterHandler("TerraformGoogle::Runtimeconfig_variableHandler", bridge.NewTFHandler(p, rt, "runtimeconfig_variable_id", "google_runtimeconfig_variable"), rt)

	rt = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Service_account{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("service_account_id", "email", "name", "project", "unique_id")
		b.ImmutableAttributes("account_id", "project")
	}))[0]
	sb.RegisterHandler("TerraformGoogle::Service_accountHandler", bridge.NewTFHandler(p, rt, "service_account_id", "google_service_account"), rt)

	rt = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Service_account_iam_binding{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("service_account_iam_binding_id", "etag")
		b.ImmutableAttributes("role", "service_account_id")
	}))[0]
	sb.RegisterHandler("TerraformGoogle::Service_account_iam_bindingHandler", bridge.NewTFHandler(p, rt, "service_account_iam_binding_id", "google_service_account_iam_binding"), rt)

	rt = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Service_account_iam_member{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("service_account_iam_member_id", "etag")
		b.ImmutableAttributes("member", "role", "service_account_id")
	}))[0]
	sb.RegisterHandler("TerraformGoogle::Service_account_iam_memberHandler", bridge.NewTFHandler(p, rt, "service_account_iam_member_id", "google_service_account_iam_member"), rt)

	rt = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Service_account_iam_policy{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("service_account_iam_policy_id", "etag")
		b.ImmutableAttributes("service_account_id")
	}))[0]
	sb.RegisterHandler("TerraformGoogle::Service_account_iam_policyHandler", bridge.NewTFHandler(p, rt, "service_account_iam_policy_id", "google_service_account_iam_policy"), rt)

	rt = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Service_account_key{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("service_account_key_id", "name", "private_key", "private_key_encrypted", "private_key_fingerprint", "public_key", "valid_after", "valid_before")
		b.ImmutableAttributes("key_algorithm", "name", "pgp_key", "private_key_type", "public_key", "public_key_type", "service_account_id")
	}))[0]
	sb.RegisterHandler("TerraformGoogle::Service_account_keyHandler", bridge.NewTFHandler(p, rt, "service_account_key_id", "google_service_account_key"), rt)

	rt = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Sourcerepo_repository{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("sourcerepo_repository_id", "project", "size", "url")
		b.ImmutableAttributes("name", "project")
	}))[0]
	sb.RegisterHandler("TerraformGoogle::Sourcerepo_repositoryHandler", bridge.NewTFHandler(p, rt, "sourcerepo_repository_id", "google_sourcerepo_repository"), rt)

	rt = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Spanner_database{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("spanner_database_id", "project", "state")
		b.ImmutableAttributes("ddl", "instance", "name", "project")
	}))[0]
	sb.RegisterHandler("TerraformGoogle::Spanner_databaseHandler", bridge.NewTFHandler(p, rt, "spanner_database_id", "google_spanner_database"), rt)

	rt = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Spanner_database_iam_binding{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("spanner_database_iam_binding_id", "etag", "project")
		b.ImmutableAttributes("database", "instance", "project", "role")
	}))[0]
	sb.RegisterHandler("TerraformGoogle::Spanner_database_iam_bindingHandler", bridge.NewTFHandler(p, rt, "spanner_database_iam_binding_id", "google_spanner_database_iam_binding"), rt)

	rt = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Spanner_database_iam_member{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("spanner_database_iam_member_id", "etag", "project")
		b.ImmutableAttributes("database", "instance", "member", "project", "role")
	}))[0]
	sb.RegisterHandler("TerraformGoogle::Spanner_database_iam_memberHandler", bridge.NewTFHandler(p, rt, "spanner_database_iam_member_id", "google_spanner_database_iam_member"), rt)

	rt = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Spanner_database_iam_policy{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("spanner_database_iam_policy_id", "etag", "project")
		b.ImmutableAttributes("database", "instance", "project")
	}))[0]
	sb.RegisterHandler("TerraformGoogle::Spanner_database_iam_policyHandler", bridge.NewTFHandler(p, rt, "spanner_database_iam_policy_id", "google_spanner_database_iam_policy"), rt)

	rt = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Spanner_instance{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("spanner_instance_id", "name", "project", "state")
		b.ImmutableAttributes("config", "name", "project")
	}))[0]
	sb.RegisterHandler("TerraformGoogle::Spanner_instanceHandler", bridge.NewTFHandler(p, rt, "spanner_instance_id", "google_spanner_instance"), rt)

	rt = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Spanner_instance_iam_binding{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("spanner_instance_iam_binding_id", "etag", "project")
		b.ImmutableAttributes("instance", "project", "role")
	}))[0]
	sb.RegisterHandler("TerraformGoogle::Spanner_instance_iam_bindingHandler", bridge.NewTFHandler(p, rt, "spanner_instance_iam_binding_id", "google_spanner_instance_iam_binding"), rt)

	rt = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Spanner_instance_iam_member{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("spanner_instance_iam_member_id", "etag", "project")
		b.ImmutableAttributes("instance", "member", "project", "role")
	}))[0]
	sb.RegisterHandler("TerraformGoogle::Spanner_instance_iam_memberHandler", bridge.NewTFHandler(p, rt, "spanner_instance_iam_member_id", "google_spanner_instance_iam_member"), rt)

	rt = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Spanner_instance_iam_policy{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("spanner_instance_iam_policy_id", "etag", "project")
		b.ImmutableAttributes("instance", "project")
	}))[0]
	sb.RegisterHandler("TerraformGoogle::Spanner_instance_iam_policyHandler", bridge.NewTFHandler(p, rt, "spanner_instance_iam_policy_id", "google_spanner_instance_iam_policy"), rt)

	rt = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Sql_database{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("sql_database_id", "charset", "collation", "project", "self_link")
		b.ImmutableAttributes("instance", "name", "project")
	}))[0]
	sb.RegisterHandler("TerraformGoogle::Sql_databaseHandler", bridge.NewTFHandler(p, rt, "sql_database_id", "google_sql_database"), rt)

	rt = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Sql_database_instance{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("sql_database_instance_id", "connection_name", "first_ip_address", "ip_address", "master_instance_name", "name", "project", "replica_configuration", "self_link", "server_ca_cert", "service_account_email_address")
		b.ImmutableAttributes("database_version", "master_instance_name", "name", "project", "region")
	}))[0]
	sb.RegisterHandler("TerraformGoogle::Sql_database_instanceHandler", bridge.NewTFHandler(p, rt, "sql_database_instance_id", "google_sql_database_instance"), rt)

	rt = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Sql_ssl_cert{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("sql_ssl_cert_id", "cert", "cert_serial_number", "create_time", "expiration_time", "private_key", "server_ca_cert", "sha1_fingerprint")
		b.ImmutableAttributes("common_name", "instance")
	}))[0]
	sb.RegisterHandler("TerraformGoogle::Sql_ssl_certHandler", bridge.NewTFHandler(p, rt, "sql_ssl_cert_id", "google_sql_ssl_cert"), rt)

	rt = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Sql_user{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("sql_user_id", "project")
		b.ImmutableAttributes("host", "instance", "name", "project")
	}))[0]
	sb.RegisterHandler("TerraformGoogle::Sql_userHandler", bridge.NewTFHandler(p, rt, "sql_user_id", "google_sql_user"), rt)

	rt = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Storage_bucket{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("storage_bucket_id", "project", "self_link", "url")
		b.ImmutableAttributes("location", "name", "predefined_acl", "project", "storage_class")
	}))[0]
	sb.RegisterHandler("TerraformGoogle::Storage_bucketHandler", bridge.NewTFHandler(p, rt, "storage_bucket_id", "google_storage_bucket"), rt)

	rt = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Storage_bucket_acl{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("storage_bucket_acl_id", "role_entity")
		b.ImmutableAttributes("bucket", "predefined_acl")
	}))[0]
	sb.RegisterHandler("TerraformGoogle::Storage_bucket_aclHandler", bridge.NewTFHandler(p, rt, "storage_bucket_acl_id", "google_storage_bucket_acl"), rt)

	rt = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Storage_bucket_iam_binding{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("storage_bucket_iam_binding_id", "etag")
		b.ImmutableAttributes("bucket", "role")
	}))[0]
	sb.RegisterHandler("TerraformGoogle::Storage_bucket_iam_bindingHandler", bridge.NewTFHandler(p, rt, "storage_bucket_iam_binding_id", "google_storage_bucket_iam_binding"), rt)

	rt = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Storage_bucket_iam_member{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("storage_bucket_iam_member_id", "etag")
		b.ImmutableAttributes("bucket", "member", "role")
	}))[0]
	sb.RegisterHandler("TerraformGoogle::Storage_bucket_iam_memberHandler", bridge.NewTFHandler(p, rt, "storage_bucket_iam_member_id", "google_storage_bucket_iam_member"), rt)

	rt = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Storage_bucket_iam_policy{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("storage_bucket_iam_policy_id", "etag")
		b.ImmutableAttributes("bucket")
	}))[0]
	sb.RegisterHandler("TerraformGoogle::Storage_bucket_iam_policyHandler", bridge.NewTFHandler(p, rt, "storage_bucket_iam_policy_id", "google_storage_bucket_iam_policy"), rt)

	rt = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Storage_bucket_object{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("storage_bucket_object_id", "content_type", "crc32c", "md5hash", "storage_class")
		b.ImmutableAttributes("bucket", "cache_control", "content", "content_disposition", "content_encoding", "content_language", "content_type", "detect_md5hash", "name", "predefined_acl", "source", "storage_class")
	}))[0]
	sb.RegisterHandler("TerraformGoogle::Storage_bucket_objectHandler", bridge.NewTFHandler(p, rt, "storage_bucket_object_id", "google_storage_bucket_object"), rt)

	rt = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Storage_default_object_access_control{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("storage_default_object_access_control_id", "domain", "email", "entity_id", "generation", "project_team")
	}))[0]
	sb.RegisterHandler("TerraformGoogle::Storage_default_object_access_controlHandler", bridge.NewTFHandler(p, rt, "storage_default_object_access_control_id", "google_storage_default_object_access_control"), rt)

	rt = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Storage_default_object_acl{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("storage_default_object_acl_id", "role_entity")
		b.ImmutableAttributes("bucket")
	}))[0]
	sb.RegisterHandler("TerraformGoogle::Storage_default_object_aclHandler", bridge.NewTFHandler(p, rt, "storage_default_object_acl_id", "google_storage_default_object_acl"), rt)

	rt = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Storage_notification{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("storage_notification_id", "self_link")
		b.ImmutableAttributes("bucket", "custom_attributes", "event_types", "object_name_prefix", "payload_format", "topic")
	}))[0]
	sb.RegisterHandler("TerraformGoogle::Storage_notificationHandler", bridge.NewTFHandler(p, rt, "storage_notification_id", "google_storage_notification"), rt)

	rt = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Storage_object_access_control{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("storage_object_access_control_id", "domain", "email", "entity_id", "generation", "project_team")
	}))[0]
	sb.RegisterHandler("TerraformGoogle::Storage_object_access_controlHandler", bridge.NewTFHandler(p, rt, "storage_object_access_control_id", "google_storage_object_access_control"), rt)

	rt = sb.RegisterTypes("TerraformGoogle", sb.BuildResource(&Storage_object_acl{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("storage_object_acl_id", "role_entity")
		b.ImmutableAttributes("bucket", "object", "predefined_acl")
	}))[0]
	sb.RegisterHandler("TerraformGoogle::Storage_object_aclHandler", bridge.NewTFHandler(p, rt, "storage_object_acl_id", "google_storage_object_acl"), rt)

}
