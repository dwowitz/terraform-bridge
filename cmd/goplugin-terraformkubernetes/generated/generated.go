// Code generated by Lyra DO NOT EDIT.

// This code is generated on a per-Provider basis using "tf-gen"
// Long term our hope is to remove this generation step and adopt dynamic approach

package kubernetes

import (
	"github.com/hashicorp/terraform/helper/schema"
	"github.com/lyraproj/pcore/px"
	"github.com/lyraproj/servicesdk/service"
	"github.com/lyraproj/terraform-bridge/pkg/bridge"
)

type (
	Cluster_role_binding struct {
		Cluster_role_binding_id *string                      `lyra:"tf-gen.ignore"`
		Metadata                []map[string]interface{}     `puppet:"type => Array[Struct[Optional[annotations]=>Hash[String,String],Optional[generation]=>Integer,Optional[labels]=>Hash[String,String],Optional[name]=>String,Optional[resource_version]=>String,Optional[self_link]=>String,Optional[uid]=>String]]"`
		Role_ref                map[string]map[string]string `puppet:"type => Hash[String,Struct[api_group=>String,kind=>String,name=>String]]"`
		Subject                 []map[string]string          `puppet:"type => Array[Struct[Optional[api_group]=>String,kind=>String,name=>String,Optional[namespace]=>String]]"`
	}

	Config_map struct {
		Config_map_id *string `lyra:"tf-gen.ignore"`
		Data          *map[string]string
		Metadata      []map[string]interface{} `puppet:"type => Array[Struct[Optional[annotations]=>Hash[String,String],Optional[generate_name]=>String,Optional[generation]=>Integer,Optional[labels]=>Hash[String,String],Optional[name]=>String,Optional[namespace]=>String,Optional[resource_version]=>String,Optional[self_link]=>String,Optional[uid]=>String]]"`
	}

	Deployment struct {
		Deployment_id *string                  `lyra:"tf-gen.ignore"`
		Metadata      []map[string]interface{} `puppet:"type => Array[Struct[Optional[annotations]=>Hash[String,String],Optional[generate_name]=>String,Optional[generation]=>Integer,Optional[labels]=>Hash[String,String],Optional[name]=>String,Optional[namespace]=>String,Optional[resource_version]=>String,Optional[self_link]=>String,Optional[uid]=>String]]"`
		Spec          []map[string]interface{} `puppet:"type => Array[Struct[Optional[min_ready_seconds]=>Integer,Optional[paused]=>Boolean,Optional[progress_deadline_seconds]=>Integer,Optional[replicas]=>Integer,Optional[revision_history_limit]=>Integer,Optional[selector]=>Array[Struct[Optional[match_expressions]=>Array[Struct[Optional[key]=>String,Optional[operator]=>String,Optional[values]=>Array[String]]],Optional[match_labels]=>Hash[String,String]]],Optional[strategy]=>Array[Struct[Optional[rolling_update]=>Array[Struct[Optional[max_surge]=>String,Optional[max_unavailable]=>String]],Optional[type]=>String]],template=>Array[Struct[metadata=>Array[Struct[Optional[annotations]=>Hash[String,String],Optional[generate_name]=>String,Optional[generation]=>Integer,Optional[labels]=>Hash[String,String],Optional[name]=>String,Optional[namespace]=>String,Optional[resource_version]=>String,Optional[self_link]=>String,Optional[uid]=>String]],spec=>Array[Struct[Optional[active_deadline_seconds]=>Integer,Optional[container]=>Array[Struct[Optional[args]=>Array[String],Optional[command]=>Array[String],Optional[env]=>Array[Struct[name=>String,Optional[value]=>String,Optional[value_from]=>Array[Struct[Optional[config_map_key_ref]=>Array[Struct[Optional[key]=>String,Optional[name]=>String]],Optional[field_ref]=>Array[Struct[Optional[api_version]=>String,Optional[field_path]=>String]],Optional[resource_field_ref]=>Array[Struct[Optional[container_name]=>String,resource=>String]],Optional[secret_key_ref]=>Array[Struct[Optional[key]=>String,Optional[name]=>String]]]]]],Optional[env_from]=>Array[Struct[Optional[config_map_ref]=>Array[Struct[name=>String,Optional[optional]=>Boolean]],Optional[prefix]=>String,Optional[secret_ref]=>Array[Struct[name=>String,Optional[optional]=>Boolean]]]],Optional[image]=>String,Optional[image_pull_policy]=>String,Optional[lifecycle]=>Array[Struct[Optional[post_start]=>Array[Struct[Optional[exec]=>Array[Struct[Optional[command]=>Array[String]]],Optional[http_get]=>Array[Struct[Optional[host]=>String,Optional[http_header]=>Array[Struct[Optional[name]=>String,Optional[value]=>String]],Optional[path]=>String,Optional[port]=>String,Optional[scheme]=>String]],Optional[tcp_socket]=>Array[Struct[port=>String]]]],Optional[pre_stop]=>Array[Struct[Optional[exec]=>Array[Struct[Optional[command]=>Array[String]]],Optional[http_get]=>Array[Struct[Optional[host]=>String,Optional[http_header]=>Array[Struct[Optional[name]=>String,Optional[value]=>String]],Optional[path]=>String,Optional[port]=>String,Optional[scheme]=>String]],Optional[tcp_socket]=>Array[Struct[port=>String]]]]]],Optional[liveness_probe]=>Array[Struct[Optional[exec]=>Array[Struct[Optional[command]=>Array[String]]],Optional[failure_threshold]=>Integer,Optional[http_get]=>Array[Struct[Optional[host]=>String,Optional[http_header]=>Array[Struct[Optional[name]=>String,Optional[value]=>String]],Optional[path]=>String,Optional[port]=>String,Optional[scheme]=>String]],Optional[initial_delay_seconds]=>Integer,Optional[period_seconds]=>Integer,Optional[success_threshold]=>Integer,Optional[tcp_socket]=>Array[Struct[port=>String]],Optional[timeout_seconds]=>Integer]],name=>String,Optional[port]=>Array[Struct[container_port=>Integer,Optional[host_ip]=>String,Optional[host_port]=>Integer,Optional[name]=>String,Optional[protocol]=>String]],Optional[readiness_probe]=>Array[Struct[Optional[exec]=>Array[Struct[Optional[command]=>Array[String]]],Optional[failure_threshold]=>Integer,Optional[http_get]=>Array[Struct[Optional[host]=>String,Optional[http_header]=>Array[Struct[Optional[name]=>String,Optional[value]=>String]],Optional[path]=>String,Optional[port]=>String,Optional[scheme]=>String]],Optional[initial_delay_seconds]=>Integer,Optional[period_seconds]=>Integer,Optional[success_threshold]=>Integer,Optional[tcp_socket]=>Array[Struct[port=>String]],Optional[timeout_seconds]=>Integer]],Optional[resources]=>Array[Struct[Optional[limits]=>Array[Struct[Optional[cpu]=>String,Optional[memory]=>String]],Optional[requests]=>Array[Struct[Optional[cpu]=>String,Optional[memory]=>String]]]],Optional[security_context]=>Array[Struct[Optional[allow_privilege_escalation]=>Boolean,Optional[capabilities]=>Array[Struct[Optional[add]=>Array[String],Optional[drop]=>Array[String]]],Optional[privileged]=>Boolean,Optional[read_only_root_filesystem]=>Boolean,Optional[run_as_non_root]=>Boolean,Optional[run_as_user]=>Integer,Optional[se_linux_options]=>Array[Struct[Optional[level]=>String,Optional[role]=>String,Optional[type]=>String,Optional[user]=>String]]]],Optional[stdin]=>Boolean,Optional[stdin_once]=>Boolean,Optional[termination_message_path]=>String,Optional[tty]=>Boolean,Optional[volume_mount]=>Array[Struct[mount_path=>String,name=>String,Optional[read_only]=>Boolean,Optional[sub_path]=>String]],Optional[working_dir]=>String]],Optional[dns_policy]=>String,Optional[host_ipc]=>Boolean,Optional[host_network]=>Boolean,Optional[host_pid]=>Boolean,Optional[hostname]=>String,Optional[image_pull_secrets]=>Array[Struct[name=>String]],Optional[init_container]=>Array[Struct[Optional[args]=>Array[String],Optional[command]=>Array[String],Optional[env]=>Array[Struct[name=>String,Optional[value]=>String,Optional[value_from]=>Array[Struct[Optional[config_map_key_ref]=>Array[Struct[Optional[key]=>String,Optional[name]=>String]],Optional[field_ref]=>Array[Struct[Optional[api_version]=>String,Optional[field_path]=>String]],Optional[resource_field_ref]=>Array[Struct[Optional[container_name]=>String,resource=>String]],Optional[secret_key_ref]=>Array[Struct[Optional[key]=>String,Optional[name]=>String]]]]]],Optional[env_from]=>Array[Struct[Optional[config_map_ref]=>Array[Struct[name=>String,Optional[optional]=>Boolean]],Optional[prefix]=>String,Optional[secret_ref]=>Array[Struct[name=>String,Optional[optional]=>Boolean]]]],Optional[image]=>String,Optional[image_pull_policy]=>String,Optional[lifecycle]=>Array[Struct[Optional[post_start]=>Array[Struct[Optional[exec]=>Array[Struct[Optional[command]=>Array[String]]],Optional[http_get]=>Array[Struct[Optional[host]=>String,Optional[http_header]=>Array[Struct[Optional[name]=>String,Optional[value]=>String]],Optional[path]=>String,Optional[port]=>String,Optional[scheme]=>String]],Optional[tcp_socket]=>Array[Struct[port=>String]]]],Optional[pre_stop]=>Array[Struct[Optional[exec]=>Array[Struct[Optional[command]=>Array[String]]],Optional[http_get]=>Array[Struct[Optional[host]=>String,Optional[http_header]=>Array[Struct[Optional[name]=>String,Optional[value]=>String]],Optional[path]=>String,Optional[port]=>String,Optional[scheme]=>String]],Optional[tcp_socket]=>Array[Struct[port=>String]]]]]],Optional[liveness_probe]=>Array[Struct[Optional[exec]=>Array[Struct[Optional[command]=>Array[String]]],Optional[failure_threshold]=>Integer,Optional[http_get]=>Array[Struct[Optional[host]=>String,Optional[http_header]=>Array[Struct[Optional[name]=>String,Optional[value]=>String]],Optional[path]=>String,Optional[port]=>String,Optional[scheme]=>String]],Optional[initial_delay_seconds]=>Integer,Optional[period_seconds]=>Integer,Optional[success_threshold]=>Integer,Optional[tcp_socket]=>Array[Struct[port=>String]],Optional[timeout_seconds]=>Integer]],name=>String,Optional[port]=>Array[Struct[container_port=>Integer,Optional[host_ip]=>String,Optional[host_port]=>Integer,Optional[name]=>String,Optional[protocol]=>String]],Optional[readiness_probe]=>Array[Struct[Optional[exec]=>Array[Struct[Optional[command]=>Array[String]]],Optional[failure_threshold]=>Integer,Optional[http_get]=>Array[Struct[Optional[host]=>String,Optional[http_header]=>Array[Struct[Optional[name]=>String,Optional[value]=>String]],Optional[path]=>String,Optional[port]=>String,Optional[scheme]=>String]],Optional[initial_delay_seconds]=>Integer,Optional[period_seconds]=>Integer,Optional[success_threshold]=>Integer,Optional[tcp_socket]=>Array[Struct[port=>String]],Optional[timeout_seconds]=>Integer]],Optional[resources]=>Array[Struct[Optional[limits]=>Array[Struct[Optional[cpu]=>String,Optional[memory]=>String]],Optional[requests]=>Array[Struct[Optional[cpu]=>String,Optional[memory]=>String]]]],Optional[security_context]=>Array[Struct[Optional[allow_privilege_escalation]=>Boolean,Optional[capabilities]=>Array[Struct[Optional[add]=>Array[String],Optional[drop]=>Array[String]]],Optional[privileged]=>Boolean,Optional[read_only_root_filesystem]=>Boolean,Optional[run_as_non_root]=>Boolean,Optional[run_as_user]=>Integer,Optional[se_linux_options]=>Array[Struct[Optional[level]=>String,Optional[role]=>String,Optional[type]=>String,Optional[user]=>String]]]],Optional[stdin]=>Boolean,Optional[stdin_once]=>Boolean,Optional[termination_message_path]=>String,Optional[tty]=>Boolean,Optional[volume_mount]=>Array[Struct[mount_path=>String,name=>String,Optional[read_only]=>Boolean,Optional[sub_path]=>String]],Optional[working_dir]=>String]],Optional[node_name]=>String,Optional[node_selector]=>Hash[String,String],Optional[restart_policy]=>String,Optional[security_context]=>Array[Struct[Optional[fs_group]=>Integer,Optional[run_as_non_root]=>Boolean,Optional[run_as_user]=>Integer,Optional[se_linux_options]=>Array[Struct[Optional[level]=>String,Optional[role]=>String,Optional[type]=>String,Optional[user]=>String]],Optional[supplemental_groups]=>Array[Integer]]],Optional[service_account_name]=>String,Optional[subdomain]=>String,Optional[termination_grace_period_seconds]=>Integer,Optional[volume]=>Array[Struct[Optional[aws_elastic_block_store]=>Array[Struct[Optional[fs_type]=>String,Optional[partition]=>Integer,Optional[read_only]=>Boolean,volume_id=>String]],Optional[azure_disk]=>Array[Struct[caching_mode=>String,data_disk_uri=>String,disk_name=>String,Optional[fs_type]=>String,Optional[read_only]=>Boolean]],Optional[azure_file]=>Array[Struct[Optional[read_only]=>Boolean,secret_name=>String,share_name=>String]],Optional[ceph_fs]=>Array[Struct[monitors=>Array[String],Optional[path]=>String,Optional[read_only]=>Boolean,Optional[secret_file]=>String,Optional[secret_ref]=>Array[Struct[Optional[name]=>String]],Optional[user]=>String]],Optional[cinder]=>Array[Struct[Optional[fs_type]=>String,Optional[read_only]=>Boolean,volume_id=>String]],Optional[config_map]=>Array[Struct[Optional[default_mode]=>Integer,Optional[items]=>Array[Struct[Optional[key]=>String,Optional[mode]=>Integer,Optional[path]=>String]],Optional[name]=>String]],Optional[downward_api]=>Array[Struct[Optional[default_mode]=>Integer,Optional[items]=>Array[Struct[field_ref=>Array[Struct[Optional[api_version]=>String,Optional[field_path]=>String]],Optional[mode]=>Integer,path=>String,Optional[resource_field_ref]=>Array[Struct[container_name=>String,Optional[quantity]=>String,resource=>String]]]]]],Optional[empty_dir]=>Array[Struct[Optional[medium]=>String]],Optional[fc]=>Array[Struct[Optional[fs_type]=>String,lun=>Integer,Optional[read_only]=>Boolean,target_ww_ns=>Array[String]]],Optional[flex_volume]=>Array[Struct[driver=>String,Optional[fs_type]=>String,Optional[options]=>Hash[String,String],Optional[read_only]=>Boolean,Optional[secret_ref]=>Array[Struct[Optional[name]=>String]]]],Optional[flocker]=>Array[Struct[Optional[dataset_name]=>String,Optional[dataset_uuid]=>String]],Optional[gce_persistent_disk]=>Array[Struct[Optional[fs_type]=>String,Optional[partition]=>Integer,pd_name=>String,Optional[read_only]=>Boolean]],Optional[git_repo]=>Array[Struct[Optional[directory]=>String,Optional[repository]=>String,Optional[revision]=>String]],Optional[glusterfs]=>Array[Struct[endpoints_name=>String,path=>String,Optional[read_only]=>Boolean]],Optional[host_path]=>Array[Struct[Optional[path]=>String]],Optional[iscsi]=>Array[Struct[Optional[fs_type]=>String,iqn=>String,Optional[iscsi_interface]=>String,Optional[lun]=>Integer,Optional[read_only]=>Boolean,target_portal=>String]],Optional[local]=>Array[Struct[Optional[path]=>String]],Optional[name]=>String,Optional[nfs]=>Array[Struct[path=>String,Optional[read_only]=>Boolean,server=>String]],Optional[persistent_volume_claim]=>Array[Struct[Optional[claim_name]=>String,Optional[read_only]=>Boolean]],Optional[photon_persistent_disk]=>Array[Struct[Optional[fs_type]=>String,pd_id=>String]],Optional[quobyte]=>Array[Struct[Optional[group]=>String,Optional[read_only]=>Boolean,registry=>String,Optional[user]=>String,volume=>String]],Optional[rbd]=>Array[Struct[ceph_monitors=>Array[String],Optional[fs_type]=>String,Optional[keyring]=>String,Optional[rados_user]=>String,rbd_image=>String,Optional[rbd_pool]=>String,Optional[read_only]=>Boolean,Optional[secret_ref]=>Array[Struct[Optional[name]=>String]]]],Optional[secret]=>Array[Struct[Optional[default_mode]=>Integer,Optional[items]=>Array[Struct[Optional[key]=>String,Optional[mode]=>Integer,Optional[path]=>String]],Optional[optional]=>Boolean,Optional[secret_name]=>String]],Optional[vsphere_volume]=>Array[Struct[Optional[fs_type]=>String,volume_path=>String]]]]]]]]]]"`
	}

	Horizontal_pod_autoscaler struct {
		Horizontal_pod_autoscaler_id *string                  `lyra:"tf-gen.ignore"`
		Metadata                     []map[string]interface{} `puppet:"type => Array[Struct[Optional[annotations]=>Hash[String,String],Optional[generate_name]=>String,Optional[generation]=>Integer,Optional[labels]=>Hash[String,String],Optional[name]=>String,Optional[namespace]=>String,Optional[resource_version]=>String,Optional[self_link]=>String,Optional[uid]=>String]]"`
		Spec                         []map[string]interface{} `puppet:"type => Array[Struct[max_replicas=>Integer,Optional[min_replicas]=>Integer,scale_target_ref=>Array[Struct[Optional[api_version]=>String,kind=>String,name=>String]],Optional[target_cpu_utilization_percentage]=>Integer]]"`
	}

	Limit_range struct {
		Limit_range_id *string                     `lyra:"tf-gen.ignore"`
		Metadata       []map[string]interface{}    `puppet:"type => Array[Struct[Optional[annotations]=>Hash[String,String],Optional[generate_name]=>String,Optional[generation]=>Integer,Optional[labels]=>Hash[String,String],Optional[name]=>String,Optional[namespace]=>String,Optional[resource_version]=>String,Optional[self_link]=>String,Optional[uid]=>String]]"`
		Spec           *[]map[string][]interface{} `puppet:"type => Optional[Array[Struct[Optional[limit]=>Array[Struct[Optional['default']=>Hash[String,String],Optional[default_request]=>Hash[String,String],Optional[max]=>Hash[String,String],Optional[max_limit_request_ratio]=>Hash[String,String],Optional[min]=>Hash[String,String],Optional[type]=>String]]]]]"`
	}

	Namespace struct {
		Namespace_id *string                  `lyra:"tf-gen.ignore"`
		Metadata     []map[string]interface{} `puppet:"type => Array[Struct[Optional[annotations]=>Hash[String,String],Optional[generate_name]=>String,Optional[generation]=>Integer,Optional[labels]=>Hash[String,String],Optional[name]=>String,Optional[resource_version]=>String,Optional[self_link]=>String,Optional[uid]=>String]]"`
	}

	Network_policy struct {
		Network_policy_id *string                    `lyra:"tf-gen.ignore"`
		Metadata          []map[string]interface{}   `puppet:"type => Array[Struct[Optional[annotations]=>Hash[String,String],Optional[generate_name]=>String,Optional[generation]=>Integer,Optional[labels]=>Hash[String,String],Optional[name]=>String,Optional[namespace]=>String,Optional[resource_version]=>String,Optional[self_link]=>String,Optional[uid]=>String]]"`
		Spec              []map[string][]interface{} `puppet:"type => Array[Struct[Optional[egress]=>Array[Struct[Optional[ports]=>Array[Struct[Optional[port]=>String,Optional[protocol]=>String]],Optional[to]=>Array[Struct[Optional[ip_block]=>Array[Struct[Optional[cidr]=>String,Optional[except]=>Array[String]]],Optional[namespace_selector]=>Array[Struct[Optional[match_expressions]=>Array[Struct[Optional[key]=>String,Optional[operator]=>String,Optional[values]=>Array[String]]],Optional[match_labels]=>Hash[String,String]]],Optional[pod_selector]=>Array[Struct[Optional[match_expressions]=>Array[Struct[Optional[key]=>String,Optional[operator]=>String,Optional[values]=>Array[String]]],Optional[match_labels]=>Hash[String,String]]]]]]],Optional[ingress]=>Array[Struct[Optional[from]=>Array[Struct[Optional[ip_block]=>Array[Struct[Optional[cidr]=>String,Optional[except]=>Array[String]]],Optional[namespace_selector]=>Array[Struct[Optional[match_expressions]=>Array[Struct[Optional[key]=>String,Optional[operator]=>String,Optional[values]=>Array[String]]],Optional[match_labels]=>Hash[String,String]]],Optional[pod_selector]=>Array[Struct[Optional[match_expressions]=>Array[Struct[Optional[key]=>String,Optional[operator]=>String,Optional[values]=>Array[String]]],Optional[match_labels]=>Hash[String,String]]]]],Optional[ports]=>Array[Struct[Optional[port]=>String,Optional[protocol]=>String]]]],pod_selector=>Array[Struct[Optional[match_expressions]=>Array[Struct[Optional[key]=>String,Optional[operator]=>String,Optional[values]=>Array[String]]],Optional[match_labels]=>Hash[String,String]]],policy_types=>Array[String]]]"`
	}

	Persistent_volume struct {
		Persistent_volume_id *string                  `lyra:"tf-gen.ignore"`
		Metadata             []map[string]interface{} `puppet:"type => Array[Struct[Optional[annotations]=>Hash[String,String],Optional[generation]=>Integer,Optional[labels]=>Hash[String,String],Optional[name]=>String,Optional[resource_version]=>String,Optional[self_link]=>String,Optional[uid]=>String]]"`
		Spec                 []map[string]interface{} `puppet:"type => Array[Struct[access_modes=>Array[String],capacity=>Hash[String,String],Optional[node_affinity]=>Array[Struct[Optional[required]=>Array[Struct[Optional[node_selector_term]=>Array[Struct[Optional[match_expressions]=>Array[Struct[Optional[key]=>String,Optional[operator]=>String,Optional[values]=>Array[String]]],Optional[match_fields]=>Array[Struct[Optional[key]=>String,Optional[operator]=>String,Optional[values]=>Array[String]]]]]]]]],Optional[persistent_volume_reclaim_policy]=>String,persistent_volume_source=>Array[Struct[Optional[aws_elastic_block_store]=>Array[Struct[Optional[fs_type]=>String,Optional[partition]=>Integer,Optional[read_only]=>Boolean,volume_id=>String]],Optional[azure_disk]=>Array[Struct[caching_mode=>String,data_disk_uri=>String,disk_name=>String,Optional[fs_type]=>String,Optional[read_only]=>Boolean]],Optional[azure_file]=>Array[Struct[Optional[read_only]=>Boolean,secret_name=>String,share_name=>String]],Optional[ceph_fs]=>Array[Struct[monitors=>Array[String],Optional[path]=>String,Optional[read_only]=>Boolean,Optional[secret_file]=>String,Optional[secret_ref]=>Array[Struct[Optional[name]=>String]],Optional[user]=>String]],Optional[cinder]=>Array[Struct[Optional[fs_type]=>String,Optional[read_only]=>Boolean,volume_id=>String]],Optional[fc]=>Array[Struct[Optional[fs_type]=>String,lun=>Integer,Optional[read_only]=>Boolean,target_ww_ns=>Array[String]]],Optional[flex_volume]=>Array[Struct[driver=>String,Optional[fs_type]=>String,Optional[options]=>Hash[String,String],Optional[read_only]=>Boolean,Optional[secret_ref]=>Array[Struct[Optional[name]=>String]]]],Optional[flocker]=>Array[Struct[Optional[dataset_name]=>String,Optional[dataset_uuid]=>String]],Optional[gce_persistent_disk]=>Array[Struct[Optional[fs_type]=>String,Optional[partition]=>Integer,pd_name=>String,Optional[read_only]=>Boolean]],Optional[glusterfs]=>Array[Struct[endpoints_name=>String,path=>String,Optional[read_only]=>Boolean]],Optional[host_path]=>Array[Struct[Optional[path]=>String]],Optional[iscsi]=>Array[Struct[Optional[fs_type]=>String,iqn=>String,Optional[iscsi_interface]=>String,Optional[lun]=>Integer,Optional[read_only]=>Boolean,target_portal=>String]],Optional[local]=>Array[Struct[Optional[path]=>String]],Optional[nfs]=>Array[Struct[path=>String,Optional[read_only]=>Boolean,server=>String]],Optional[photon_persistent_disk]=>Array[Struct[Optional[fs_type]=>String,pd_id=>String]],Optional[quobyte]=>Array[Struct[Optional[group]=>String,Optional[read_only]=>Boolean,registry=>String,Optional[user]=>String,volume=>String]],Optional[rbd]=>Array[Struct[ceph_monitors=>Array[String],Optional[fs_type]=>String,Optional[keyring]=>String,Optional[rados_user]=>String,rbd_image=>String,Optional[rbd_pool]=>String,Optional[read_only]=>Boolean,Optional[secret_ref]=>Array[Struct[Optional[name]=>String]]]],Optional[vsphere_volume]=>Array[Struct[Optional[fs_type]=>String,volume_path=>String]]]],Optional[storage_class_name]=>String]]"`
	}

	Persistent_volume_claim struct {
		Persistent_volume_claim_id *string                  `lyra:"tf-gen.ignore"`
		Metadata                   []map[string]interface{} `puppet:"type => Array[Struct[Optional[annotations]=>Hash[String,String],Optional[generate_name]=>String,Optional[generation]=>Integer,Optional[labels]=>Hash[String,String],Optional[name]=>String,Optional[namespace]=>String,Optional[resource_version]=>String,Optional[self_link]=>String,Optional[uid]=>String]]"`
		Spec                       []map[string]interface{} `puppet:"type => Array[Struct[access_modes=>Array[String],resources=>Array[Struct[Optional[limits]=>Hash[String,String],Optional[requests]=>Hash[String,String]]],Optional[selector]=>Array[Struct[Optional[match_expressions]=>Array[Struct[Optional[key]=>String,Optional[operator]=>String,Optional[values]=>Array[String]]],Optional[match_labels]=>Hash[String,String]]],Optional[storage_class_name]=>String,Optional[volume_name]=>String]]"`
		Wait_until_bound           bool                     `puppet:"value=>true"`
	}

	Pod struct {
		Pod_id   *string                  `lyra:"tf-gen.ignore"`
		Metadata []map[string]interface{} `puppet:"type => Array[Struct[Optional[annotations]=>Hash[String,String],Optional[generate_name]=>String,Optional[generation]=>Integer,Optional[labels]=>Hash[String,String],Optional[name]=>String,Optional[namespace]=>String,Optional[resource_version]=>String,Optional[self_link]=>String,Optional[uid]=>String]]"`
		Spec     []map[string]interface{} `puppet:"type => Array[Struct[Optional[active_deadline_seconds]=>Integer,Optional[container]=>Array[Struct[Optional[args]=>Array[String],Optional[command]=>Array[String],Optional[env]=>Array[Struct[name=>String,Optional[value]=>String,Optional[value_from]=>Array[Struct[Optional[config_map_key_ref]=>Array[Struct[Optional[key]=>String,Optional[name]=>String]],Optional[field_ref]=>Array[Struct[Optional[api_version]=>String,Optional[field_path]=>String]],Optional[resource_field_ref]=>Array[Struct[Optional[container_name]=>String,resource=>String]],Optional[secret_key_ref]=>Array[Struct[Optional[key]=>String,Optional[name]=>String]]]]]],Optional[env_from]=>Array[Struct[Optional[config_map_ref]=>Array[Struct[name=>String,Optional[optional]=>Boolean]],Optional[prefix]=>String,Optional[secret_ref]=>Array[Struct[name=>String,Optional[optional]=>Boolean]]]],Optional[image]=>String,Optional[image_pull_policy]=>String,Optional[lifecycle]=>Array[Struct[Optional[post_start]=>Array[Struct[Optional[exec]=>Array[Struct[Optional[command]=>Array[String]]],Optional[http_get]=>Array[Struct[Optional[host]=>String,Optional[http_header]=>Array[Struct[Optional[name]=>String,Optional[value]=>String]],Optional[path]=>String,Optional[port]=>String,Optional[scheme]=>String]],Optional[tcp_socket]=>Array[Struct[port=>String]]]],Optional[pre_stop]=>Array[Struct[Optional[exec]=>Array[Struct[Optional[command]=>Array[String]]],Optional[http_get]=>Array[Struct[Optional[host]=>String,Optional[http_header]=>Array[Struct[Optional[name]=>String,Optional[value]=>String]],Optional[path]=>String,Optional[port]=>String,Optional[scheme]=>String]],Optional[tcp_socket]=>Array[Struct[port=>String]]]]]],Optional[liveness_probe]=>Array[Struct[Optional[exec]=>Array[Struct[Optional[command]=>Array[String]]],Optional[failure_threshold]=>Integer,Optional[http_get]=>Array[Struct[Optional[host]=>String,Optional[http_header]=>Array[Struct[Optional[name]=>String,Optional[value]=>String]],Optional[path]=>String,Optional[port]=>String,Optional[scheme]=>String]],Optional[initial_delay_seconds]=>Integer,Optional[period_seconds]=>Integer,Optional[success_threshold]=>Integer,Optional[tcp_socket]=>Array[Struct[port=>String]],Optional[timeout_seconds]=>Integer]],name=>String,Optional[port]=>Array[Struct[container_port=>Integer,Optional[host_ip]=>String,Optional[host_port]=>Integer,Optional[name]=>String,Optional[protocol]=>String]],Optional[readiness_probe]=>Array[Struct[Optional[exec]=>Array[Struct[Optional[command]=>Array[String]]],Optional[failure_threshold]=>Integer,Optional[http_get]=>Array[Struct[Optional[host]=>String,Optional[http_header]=>Array[Struct[Optional[name]=>String,Optional[value]=>String]],Optional[path]=>String,Optional[port]=>String,Optional[scheme]=>String]],Optional[initial_delay_seconds]=>Integer,Optional[period_seconds]=>Integer,Optional[success_threshold]=>Integer,Optional[tcp_socket]=>Array[Struct[port=>String]],Optional[timeout_seconds]=>Integer]],Optional[resources]=>Array[Struct[Optional[limits]=>Array[Struct[Optional[cpu]=>String,Optional[memory]=>String]],Optional[requests]=>Array[Struct[Optional[cpu]=>String,Optional[memory]=>String]]]],Optional[security_context]=>Array[Struct[Optional[allow_privilege_escalation]=>Boolean,Optional[capabilities]=>Array[Struct[Optional[add]=>Array[String],Optional[drop]=>Array[String]]],Optional[privileged]=>Boolean,Optional[read_only_root_filesystem]=>Boolean,Optional[run_as_non_root]=>Boolean,Optional[run_as_user]=>Integer,Optional[se_linux_options]=>Array[Struct[Optional[level]=>String,Optional[role]=>String,Optional[type]=>String,Optional[user]=>String]]]],Optional[stdin]=>Boolean,Optional[stdin_once]=>Boolean,Optional[termination_message_path]=>String,Optional[tty]=>Boolean,Optional[volume_mount]=>Array[Struct[mount_path=>String,name=>String,Optional[read_only]=>Boolean,Optional[sub_path]=>String]],Optional[working_dir]=>String]],Optional[dns_policy]=>String,Optional[host_ipc]=>Boolean,Optional[host_network]=>Boolean,Optional[host_pid]=>Boolean,Optional[hostname]=>String,Optional[image_pull_secrets]=>Array[Struct[name=>String]],Optional[init_container]=>Array[Struct[Optional[args]=>Array[String],Optional[command]=>Array[String],Optional[env]=>Array[Struct[name=>String,Optional[value]=>String,Optional[value_from]=>Array[Struct[Optional[config_map_key_ref]=>Array[Struct[Optional[key]=>String,Optional[name]=>String]],Optional[field_ref]=>Array[Struct[Optional[api_version]=>String,Optional[field_path]=>String]],Optional[resource_field_ref]=>Array[Struct[Optional[container_name]=>String,resource=>String]],Optional[secret_key_ref]=>Array[Struct[Optional[key]=>String,Optional[name]=>String]]]]]],Optional[env_from]=>Array[Struct[Optional[config_map_ref]=>Array[Struct[name=>String,Optional[optional]=>Boolean]],Optional[prefix]=>String,Optional[secret_ref]=>Array[Struct[name=>String,Optional[optional]=>Boolean]]]],Optional[image]=>String,Optional[image_pull_policy]=>String,Optional[lifecycle]=>Array[Struct[Optional[post_start]=>Array[Struct[Optional[exec]=>Array[Struct[Optional[command]=>Array[String]]],Optional[http_get]=>Array[Struct[Optional[host]=>String,Optional[http_header]=>Array[Struct[Optional[name]=>String,Optional[value]=>String]],Optional[path]=>String,Optional[port]=>String,Optional[scheme]=>String]],Optional[tcp_socket]=>Array[Struct[port=>String]]]],Optional[pre_stop]=>Array[Struct[Optional[exec]=>Array[Struct[Optional[command]=>Array[String]]],Optional[http_get]=>Array[Struct[Optional[host]=>String,Optional[http_header]=>Array[Struct[Optional[name]=>String,Optional[value]=>String]],Optional[path]=>String,Optional[port]=>String,Optional[scheme]=>String]],Optional[tcp_socket]=>Array[Struct[port=>String]]]]]],Optional[liveness_probe]=>Array[Struct[Optional[exec]=>Array[Struct[Optional[command]=>Array[String]]],Optional[failure_threshold]=>Integer,Optional[http_get]=>Array[Struct[Optional[host]=>String,Optional[http_header]=>Array[Struct[Optional[name]=>String,Optional[value]=>String]],Optional[path]=>String,Optional[port]=>String,Optional[scheme]=>String]],Optional[initial_delay_seconds]=>Integer,Optional[period_seconds]=>Integer,Optional[success_threshold]=>Integer,Optional[tcp_socket]=>Array[Struct[port=>String]],Optional[timeout_seconds]=>Integer]],name=>String,Optional[port]=>Array[Struct[container_port=>Integer,Optional[host_ip]=>String,Optional[host_port]=>Integer,Optional[name]=>String,Optional[protocol]=>String]],Optional[readiness_probe]=>Array[Struct[Optional[exec]=>Array[Struct[Optional[command]=>Array[String]]],Optional[failure_threshold]=>Integer,Optional[http_get]=>Array[Struct[Optional[host]=>String,Optional[http_header]=>Array[Struct[Optional[name]=>String,Optional[value]=>String]],Optional[path]=>String,Optional[port]=>String,Optional[scheme]=>String]],Optional[initial_delay_seconds]=>Integer,Optional[period_seconds]=>Integer,Optional[success_threshold]=>Integer,Optional[tcp_socket]=>Array[Struct[port=>String]],Optional[timeout_seconds]=>Integer]],Optional[resources]=>Array[Struct[Optional[limits]=>Array[Struct[Optional[cpu]=>String,Optional[memory]=>String]],Optional[requests]=>Array[Struct[Optional[cpu]=>String,Optional[memory]=>String]]]],Optional[security_context]=>Array[Struct[Optional[allow_privilege_escalation]=>Boolean,Optional[capabilities]=>Array[Struct[Optional[add]=>Array[String],Optional[drop]=>Array[String]]],Optional[privileged]=>Boolean,Optional[read_only_root_filesystem]=>Boolean,Optional[run_as_non_root]=>Boolean,Optional[run_as_user]=>Integer,Optional[se_linux_options]=>Array[Struct[Optional[level]=>String,Optional[role]=>String,Optional[type]=>String,Optional[user]=>String]]]],Optional[stdin]=>Boolean,Optional[stdin_once]=>Boolean,Optional[termination_message_path]=>String,Optional[tty]=>Boolean,Optional[volume_mount]=>Array[Struct[mount_path=>String,name=>String,Optional[read_only]=>Boolean,Optional[sub_path]=>String]],Optional[working_dir]=>String]],Optional[node_name]=>String,Optional[node_selector]=>Hash[String,String],Optional[restart_policy]=>String,Optional[security_context]=>Array[Struct[Optional[fs_group]=>Integer,Optional[run_as_non_root]=>Boolean,Optional[run_as_user]=>Integer,Optional[se_linux_options]=>Array[Struct[Optional[level]=>String,Optional[role]=>String,Optional[type]=>String,Optional[user]=>String]],Optional[supplemental_groups]=>Array[Integer]]],Optional[service_account_name]=>String,Optional[subdomain]=>String,Optional[termination_grace_period_seconds]=>Integer,Optional[volume]=>Array[Struct[Optional[aws_elastic_block_store]=>Array[Struct[Optional[fs_type]=>String,Optional[partition]=>Integer,Optional[read_only]=>Boolean,volume_id=>String]],Optional[azure_disk]=>Array[Struct[caching_mode=>String,data_disk_uri=>String,disk_name=>String,Optional[fs_type]=>String,Optional[read_only]=>Boolean]],Optional[azure_file]=>Array[Struct[Optional[read_only]=>Boolean,secret_name=>String,share_name=>String]],Optional[ceph_fs]=>Array[Struct[monitors=>Array[String],Optional[path]=>String,Optional[read_only]=>Boolean,Optional[secret_file]=>String,Optional[secret_ref]=>Array[Struct[Optional[name]=>String]],Optional[user]=>String]],Optional[cinder]=>Array[Struct[Optional[fs_type]=>String,Optional[read_only]=>Boolean,volume_id=>String]],Optional[config_map]=>Array[Struct[Optional[default_mode]=>Integer,Optional[items]=>Array[Struct[Optional[key]=>String,Optional[mode]=>Integer,Optional[path]=>String]],Optional[name]=>String]],Optional[downward_api]=>Array[Struct[Optional[default_mode]=>Integer,Optional[items]=>Array[Struct[field_ref=>Array[Struct[Optional[api_version]=>String,Optional[field_path]=>String]],Optional[mode]=>Integer,path=>String,Optional[resource_field_ref]=>Array[Struct[container_name=>String,Optional[quantity]=>String,resource=>String]]]]]],Optional[empty_dir]=>Array[Struct[Optional[medium]=>String]],Optional[fc]=>Array[Struct[Optional[fs_type]=>String,lun=>Integer,Optional[read_only]=>Boolean,target_ww_ns=>Array[String]]],Optional[flex_volume]=>Array[Struct[driver=>String,Optional[fs_type]=>String,Optional[options]=>Hash[String,String],Optional[read_only]=>Boolean,Optional[secret_ref]=>Array[Struct[Optional[name]=>String]]]],Optional[flocker]=>Array[Struct[Optional[dataset_name]=>String,Optional[dataset_uuid]=>String]],Optional[gce_persistent_disk]=>Array[Struct[Optional[fs_type]=>String,Optional[partition]=>Integer,pd_name=>String,Optional[read_only]=>Boolean]],Optional[git_repo]=>Array[Struct[Optional[directory]=>String,Optional[repository]=>String,Optional[revision]=>String]],Optional[glusterfs]=>Array[Struct[endpoints_name=>String,path=>String,Optional[read_only]=>Boolean]],Optional[host_path]=>Array[Struct[Optional[path]=>String]],Optional[iscsi]=>Array[Struct[Optional[fs_type]=>String,iqn=>String,Optional[iscsi_interface]=>String,Optional[lun]=>Integer,Optional[read_only]=>Boolean,target_portal=>String]],Optional[local]=>Array[Struct[Optional[path]=>String]],Optional[name]=>String,Optional[nfs]=>Array[Struct[path=>String,Optional[read_only]=>Boolean,server=>String]],Optional[persistent_volume_claim]=>Array[Struct[Optional[claim_name]=>String,Optional[read_only]=>Boolean]],Optional[photon_persistent_disk]=>Array[Struct[Optional[fs_type]=>String,pd_id=>String]],Optional[quobyte]=>Array[Struct[Optional[group]=>String,Optional[read_only]=>Boolean,registry=>String,Optional[user]=>String,volume=>String]],Optional[rbd]=>Array[Struct[ceph_monitors=>Array[String],Optional[fs_type]=>String,Optional[keyring]=>String,Optional[rados_user]=>String,rbd_image=>String,Optional[rbd_pool]=>String,Optional[read_only]=>Boolean,Optional[secret_ref]=>Array[Struct[Optional[name]=>String]]]],Optional[secret]=>Array[Struct[Optional[default_mode]=>Integer,Optional[items]=>Array[Struct[Optional[key]=>String,Optional[mode]=>Integer,Optional[path]=>String]],Optional[optional]=>Boolean,Optional[secret_name]=>String]],Optional[vsphere_volume]=>Array[Struct[Optional[fs_type]=>String,volume_path=>String]]]]]]"`
	}

	Replication_controller struct {
		Replication_controller_id *string                  `lyra:"tf-gen.ignore"`
		Metadata                  []map[string]interface{} `puppet:"type => Array[Struct[Optional[annotations]=>Hash[String,String],Optional[generate_name]=>String,Optional[generation]=>Integer,Optional[labels]=>Hash[String,String],Optional[name]=>String,Optional[namespace]=>String,Optional[resource_version]=>String,Optional[self_link]=>String,Optional[uid]=>String]]"`
		Spec                      []map[string]interface{} `puppet:"type => Array[Struct[Optional[min_ready_seconds]=>Integer,Optional[replicas]=>Integer,selector=>Hash[String,String],template=>Array[Struct[Optional[metadata]=>Array[Struct[Optional[annotations]=>Hash[String,String],Optional[generate_name]=>String,Optional[generation]=>Integer,Optional[labels]=>Hash[String,String],Optional[name]=>String,Optional[namespace]=>String,Optional[resource_version]=>String,Optional[self_link]=>String,Optional[uid]=>String]],Optional[spec]=>Array[Struct[Optional[active_deadline_seconds]=>Integer,Optional[container]=>Array[Struct[Optional[args]=>Array[String],Optional[command]=>Array[String],Optional[env]=>Array[Struct[name=>String,Optional[value]=>String,Optional[value_from]=>Array[Struct[Optional[config_map_key_ref]=>Array[Struct[Optional[key]=>String,Optional[name]=>String]],Optional[field_ref]=>Array[Struct[Optional[api_version]=>String,Optional[field_path]=>String]],Optional[resource_field_ref]=>Array[Struct[Optional[container_name]=>String,resource=>String]],Optional[secret_key_ref]=>Array[Struct[Optional[key]=>String,Optional[name]=>String]]]]]],Optional[env_from]=>Array[Struct[Optional[config_map_ref]=>Array[Struct[name=>String,Optional[optional]=>Boolean]],Optional[prefix]=>String,Optional[secret_ref]=>Array[Struct[name=>String,Optional[optional]=>Boolean]]]],Optional[image]=>String,Optional[image_pull_policy]=>String,Optional[lifecycle]=>Array[Struct[Optional[post_start]=>Array[Struct[Optional[exec]=>Array[Struct[Optional[command]=>Array[String]]],Optional[http_get]=>Array[Struct[Optional[host]=>String,Optional[http_header]=>Array[Struct[Optional[name]=>String,Optional[value]=>String]],Optional[path]=>String,Optional[port]=>String,Optional[scheme]=>String]],Optional[tcp_socket]=>Array[Struct[port=>String]]]],Optional[pre_stop]=>Array[Struct[Optional[exec]=>Array[Struct[Optional[command]=>Array[String]]],Optional[http_get]=>Array[Struct[Optional[host]=>String,Optional[http_header]=>Array[Struct[Optional[name]=>String,Optional[value]=>String]],Optional[path]=>String,Optional[port]=>String,Optional[scheme]=>String]],Optional[tcp_socket]=>Array[Struct[port=>String]]]]]],Optional[liveness_probe]=>Array[Struct[Optional[exec]=>Array[Struct[Optional[command]=>Array[String]]],Optional[failure_threshold]=>Integer,Optional[http_get]=>Array[Struct[Optional[host]=>String,Optional[http_header]=>Array[Struct[Optional[name]=>String,Optional[value]=>String]],Optional[path]=>String,Optional[port]=>String,Optional[scheme]=>String]],Optional[initial_delay_seconds]=>Integer,Optional[period_seconds]=>Integer,Optional[success_threshold]=>Integer,Optional[tcp_socket]=>Array[Struct[port=>String]],Optional[timeout_seconds]=>Integer]],name=>String,Optional[port]=>Array[Struct[container_port=>Integer,Optional[host_ip]=>String,Optional[host_port]=>Integer,Optional[name]=>String,Optional[protocol]=>String]],Optional[readiness_probe]=>Array[Struct[Optional[exec]=>Array[Struct[Optional[command]=>Array[String]]],Optional[failure_threshold]=>Integer,Optional[http_get]=>Array[Struct[Optional[host]=>String,Optional[http_header]=>Array[Struct[Optional[name]=>String,Optional[value]=>String]],Optional[path]=>String,Optional[port]=>String,Optional[scheme]=>String]],Optional[initial_delay_seconds]=>Integer,Optional[period_seconds]=>Integer,Optional[success_threshold]=>Integer,Optional[tcp_socket]=>Array[Struct[port=>String]],Optional[timeout_seconds]=>Integer]],Optional[resources]=>Array[Struct[Optional[limits]=>Array[Struct[Optional[cpu]=>String,Optional[memory]=>String]],Optional[requests]=>Array[Struct[Optional[cpu]=>String,Optional[memory]=>String]]]],Optional[security_context]=>Array[Struct[Optional[allow_privilege_escalation]=>Boolean,Optional[capabilities]=>Array[Struct[Optional[add]=>Array[String],Optional[drop]=>Array[String]]],Optional[privileged]=>Boolean,Optional[read_only_root_filesystem]=>Boolean,Optional[run_as_non_root]=>Boolean,Optional[run_as_user]=>Integer,Optional[se_linux_options]=>Array[Struct[Optional[level]=>String,Optional[role]=>String,Optional[type]=>String,Optional[user]=>String]]]],Optional[stdin]=>Boolean,Optional[stdin_once]=>Boolean,Optional[termination_message_path]=>String,Optional[tty]=>Boolean,Optional[volume_mount]=>Array[Struct[mount_path=>String,name=>String,Optional[read_only]=>Boolean,Optional[sub_path]=>String]],Optional[working_dir]=>String]],Optional[dns_policy]=>String,Optional[host_ipc]=>Boolean,Optional[host_network]=>Boolean,Optional[host_pid]=>Boolean,Optional[hostname]=>String,Optional[image_pull_secrets]=>Array[Struct[name=>String]],Optional[init_container]=>Array[Struct[Optional[args]=>Array[String],Optional[command]=>Array[String],Optional[env]=>Array[Struct[name=>String,Optional[value]=>String,Optional[value_from]=>Array[Struct[Optional[config_map_key_ref]=>Array[Struct[Optional[key]=>String,Optional[name]=>String]],Optional[field_ref]=>Array[Struct[Optional[api_version]=>String,Optional[field_path]=>String]],Optional[resource_field_ref]=>Array[Struct[Optional[container_name]=>String,resource=>String]],Optional[secret_key_ref]=>Array[Struct[Optional[key]=>String,Optional[name]=>String]]]]]],Optional[env_from]=>Array[Struct[Optional[config_map_ref]=>Array[Struct[name=>String,Optional[optional]=>Boolean]],Optional[prefix]=>String,Optional[secret_ref]=>Array[Struct[name=>String,Optional[optional]=>Boolean]]]],Optional[image]=>String,Optional[image_pull_policy]=>String,Optional[lifecycle]=>Array[Struct[Optional[post_start]=>Array[Struct[Optional[exec]=>Array[Struct[Optional[command]=>Array[String]]],Optional[http_get]=>Array[Struct[Optional[host]=>String,Optional[http_header]=>Array[Struct[Optional[name]=>String,Optional[value]=>String]],Optional[path]=>String,Optional[port]=>String,Optional[scheme]=>String]],Optional[tcp_socket]=>Array[Struct[port=>String]]]],Optional[pre_stop]=>Array[Struct[Optional[exec]=>Array[Struct[Optional[command]=>Array[String]]],Optional[http_get]=>Array[Struct[Optional[host]=>String,Optional[http_header]=>Array[Struct[Optional[name]=>String,Optional[value]=>String]],Optional[path]=>String,Optional[port]=>String,Optional[scheme]=>String]],Optional[tcp_socket]=>Array[Struct[port=>String]]]]]],Optional[liveness_probe]=>Array[Struct[Optional[exec]=>Array[Struct[Optional[command]=>Array[String]]],Optional[failure_threshold]=>Integer,Optional[http_get]=>Array[Struct[Optional[host]=>String,Optional[http_header]=>Array[Struct[Optional[name]=>String,Optional[value]=>String]],Optional[path]=>String,Optional[port]=>String,Optional[scheme]=>String]],Optional[initial_delay_seconds]=>Integer,Optional[period_seconds]=>Integer,Optional[success_threshold]=>Integer,Optional[tcp_socket]=>Array[Struct[port=>String]],Optional[timeout_seconds]=>Integer]],name=>String,Optional[port]=>Array[Struct[container_port=>Integer,Optional[host_ip]=>String,Optional[host_port]=>Integer,Optional[name]=>String,Optional[protocol]=>String]],Optional[readiness_probe]=>Array[Struct[Optional[exec]=>Array[Struct[Optional[command]=>Array[String]]],Optional[failure_threshold]=>Integer,Optional[http_get]=>Array[Struct[Optional[host]=>String,Optional[http_header]=>Array[Struct[Optional[name]=>String,Optional[value]=>String]],Optional[path]=>String,Optional[port]=>String,Optional[scheme]=>String]],Optional[initial_delay_seconds]=>Integer,Optional[period_seconds]=>Integer,Optional[success_threshold]=>Integer,Optional[tcp_socket]=>Array[Struct[port=>String]],Optional[timeout_seconds]=>Integer]],Optional[resources]=>Array[Struct[Optional[limits]=>Array[Struct[Optional[cpu]=>String,Optional[memory]=>String]],Optional[requests]=>Array[Struct[Optional[cpu]=>String,Optional[memory]=>String]]]],Optional[security_context]=>Array[Struct[Optional[allow_privilege_escalation]=>Boolean,Optional[capabilities]=>Array[Struct[Optional[add]=>Array[String],Optional[drop]=>Array[String]]],Optional[privileged]=>Boolean,Optional[read_only_root_filesystem]=>Boolean,Optional[run_as_non_root]=>Boolean,Optional[run_as_user]=>Integer,Optional[se_linux_options]=>Array[Struct[Optional[level]=>String,Optional[role]=>String,Optional[type]=>String,Optional[user]=>String]]]],Optional[stdin]=>Boolean,Optional[stdin_once]=>Boolean,Optional[termination_message_path]=>String,Optional[tty]=>Boolean,Optional[volume_mount]=>Array[Struct[mount_path=>String,name=>String,Optional[read_only]=>Boolean,Optional[sub_path]=>String]],Optional[working_dir]=>String]],Optional[node_name]=>String,Optional[node_selector]=>Hash[String,String],Optional[restart_policy]=>String,Optional[security_context]=>Array[Struct[Optional[fs_group]=>Integer,Optional[run_as_non_root]=>Boolean,Optional[run_as_user]=>Integer,Optional[se_linux_options]=>Array[Struct[Optional[level]=>String,Optional[role]=>String,Optional[type]=>String,Optional[user]=>String]],Optional[supplemental_groups]=>Array[Integer]]],Optional[service_account_name]=>String,Optional[subdomain]=>String,Optional[termination_grace_period_seconds]=>Integer,Optional[volume]=>Array[Struct[Optional[aws_elastic_block_store]=>Array[Struct[Optional[fs_type]=>String,Optional[partition]=>Integer,Optional[read_only]=>Boolean,volume_id=>String]],Optional[azure_disk]=>Array[Struct[caching_mode=>String,data_disk_uri=>String,disk_name=>String,Optional[fs_type]=>String,Optional[read_only]=>Boolean]],Optional[azure_file]=>Array[Struct[Optional[read_only]=>Boolean,secret_name=>String,share_name=>String]],Optional[ceph_fs]=>Array[Struct[monitors=>Array[String],Optional[path]=>String,Optional[read_only]=>Boolean,Optional[secret_file]=>String,Optional[secret_ref]=>Array[Struct[Optional[name]=>String]],Optional[user]=>String]],Optional[cinder]=>Array[Struct[Optional[fs_type]=>String,Optional[read_only]=>Boolean,volume_id=>String]],Optional[config_map]=>Array[Struct[Optional[default_mode]=>Integer,Optional[items]=>Array[Struct[Optional[key]=>String,Optional[mode]=>Integer,Optional[path]=>String]],Optional[name]=>String]],Optional[downward_api]=>Array[Struct[Optional[default_mode]=>Integer,Optional[items]=>Array[Struct[field_ref=>Array[Struct[Optional[api_version]=>String,Optional[field_path]=>String]],Optional[mode]=>Integer,path=>String,Optional[resource_field_ref]=>Array[Struct[container_name=>String,Optional[quantity]=>String,resource=>String]]]]]],Optional[empty_dir]=>Array[Struct[Optional[medium]=>String]],Optional[fc]=>Array[Struct[Optional[fs_type]=>String,lun=>Integer,Optional[read_only]=>Boolean,target_ww_ns=>Array[String]]],Optional[flex_volume]=>Array[Struct[driver=>String,Optional[fs_type]=>String,Optional[options]=>Hash[String,String],Optional[read_only]=>Boolean,Optional[secret_ref]=>Array[Struct[Optional[name]=>String]]]],Optional[flocker]=>Array[Struct[Optional[dataset_name]=>String,Optional[dataset_uuid]=>String]],Optional[gce_persistent_disk]=>Array[Struct[Optional[fs_type]=>String,Optional[partition]=>Integer,pd_name=>String,Optional[read_only]=>Boolean]],Optional[git_repo]=>Array[Struct[Optional[directory]=>String,Optional[repository]=>String,Optional[revision]=>String]],Optional[glusterfs]=>Array[Struct[endpoints_name=>String,path=>String,Optional[read_only]=>Boolean]],Optional[host_path]=>Array[Struct[Optional[path]=>String]],Optional[iscsi]=>Array[Struct[Optional[fs_type]=>String,iqn=>String,Optional[iscsi_interface]=>String,Optional[lun]=>Integer,Optional[read_only]=>Boolean,target_portal=>String]],Optional[local]=>Array[Struct[Optional[path]=>String]],Optional[name]=>String,Optional[nfs]=>Array[Struct[path=>String,Optional[read_only]=>Boolean,server=>String]],Optional[persistent_volume_claim]=>Array[Struct[Optional[claim_name]=>String,Optional[read_only]=>Boolean]],Optional[photon_persistent_disk]=>Array[Struct[Optional[fs_type]=>String,pd_id=>String]],Optional[quobyte]=>Array[Struct[Optional[group]=>String,Optional[read_only]=>Boolean,registry=>String,Optional[user]=>String,volume=>String]],Optional[rbd]=>Array[Struct[ceph_monitors=>Array[String],Optional[fs_type]=>String,Optional[keyring]=>String,Optional[rados_user]=>String,rbd_image=>String,Optional[rbd_pool]=>String,Optional[read_only]=>Boolean,Optional[secret_ref]=>Array[Struct[Optional[name]=>String]]]],Optional[secret]=>Array[Struct[Optional[default_mode]=>Integer,Optional[items]=>Array[Struct[Optional[key]=>String,Optional[mode]=>Integer,Optional[path]=>String]],Optional[optional]=>Boolean,Optional[secret_name]=>String]],Optional[vsphere_volume]=>Array[Struct[Optional[fs_type]=>String,volume_path=>String]]]]]]]]]]"`
	}

	Resource_quota struct {
		Resource_quota_id *string                   `lyra:"tf-gen.ignore"`
		Metadata          []map[string]interface{}  `puppet:"type => Array[Struct[Optional[annotations]=>Hash[String,String],Optional[generate_name]=>String,Optional[generation]=>Integer,Optional[labels]=>Hash[String,String],Optional[name]=>String,Optional[namespace]=>String,Optional[resource_version]=>String,Optional[self_link]=>String,Optional[uid]=>String]]"`
		Spec              *[]map[string]interface{} `puppet:"type => Optional[Array[Struct[Optional[hard]=>Hash[String,String],Optional[scopes]=>Array[String]]]]"`
	}

	Role struct {
		Role_id  *string                    `lyra:"tf-gen.ignore"`
		Metadata []map[string]interface{}   `puppet:"type => Array[Struct[Optional[annotations]=>Hash[String,String],Optional[generate_name]=>String,Optional[generation]=>Integer,Optional[labels]=>Hash[String,String],Optional[name]=>String,Optional[namespace]=>String,Optional[resource_version]=>String,Optional[self_link]=>String,Optional[uid]=>String]]"`
		Rule     []map[string][]interface{} `puppet:"type => Array[Struct[api_groups=>Array[String],Optional[resource_names]=>Array[String],resources=>Array[String],verbs=>Array[String]]]"`
	}

	Role_binding struct {
		Role_binding_id *string                      `lyra:"tf-gen.ignore"`
		Metadata        []map[string]interface{}     `puppet:"type => Array[Struct[Optional[annotations]=>Hash[String,String],Optional[generation]=>Integer,Optional[labels]=>Hash[String,String],Optional[name]=>String,Optional[namespace]=>String,Optional[resource_version]=>String,Optional[self_link]=>String,Optional[uid]=>String]]"`
		Role_ref        map[string]map[string]string `puppet:"type => Hash[String,Struct[api_group=>String,kind=>String,name=>String]]"`
		Subject         []map[string]string          `puppet:"type => Array[Struct[Optional[api_group]=>String,kind=>String,name=>String,Optional[namespace]=>String]]"`
	}

	Secret struct {
		Secret_id *string `lyra:"tf-gen.ignore"`
		Data      *map[string]string
		Metadata  []map[string]interface{} `puppet:"type => Array[Struct[Optional[annotations]=>Hash[String,String],Optional[generate_name]=>String,Optional[generation]=>Integer,Optional[labels]=>Hash[String,String],Optional[name]=>String,Optional[namespace]=>String,Optional[resource_version]=>String,Optional[self_link]=>String,Optional[uid]=>String]]"`
		Type      string                   `puppet:"value=>'Opaque'"`
	}

	Service struct {
		Service_id            *string                  `lyra:"tf-gen.ignore"`
		Load_balancer_ingress *[]map[string]string     `puppet:"type => Optional[Array[Struct[Optional[hostname]=>String,Optional[ip]=>String]]]"`
		Metadata              []map[string]interface{} `puppet:"type => Array[Struct[Optional[annotations]=>Hash[String,String],Optional[generate_name]=>String,Optional[generation]=>Integer,Optional[labels]=>Hash[String,String],Optional[name]=>String,Optional[namespace]=>String,Optional[resource_version]=>String,Optional[self_link]=>String,Optional[uid]=>String]]"`
		Spec                  []map[string]interface{} `puppet:"type => Array[Struct[Optional[cluster_ip]=>String,Optional[external_ips]=>Array[String],Optional[external_name]=>String,Optional[load_balancer_ip]=>String,Optional[load_balancer_source_ranges]=>Array[String],Optional[port]=>Array[Struct[Optional[name]=>String,Optional[node_port]=>Integer,port=>Integer,Optional[protocol]=>String,Optional[target_port]=>String]],Optional[selector]=>Hash[String,String],Optional[session_affinity]=>String,Optional[type]=>String]]"`
	}

	Service_account struct {
		Service_account_id              *string `lyra:"tf-gen.ignore"`
		Automount_service_account_token bool    `puppet:"value=>false"`
		Default_secret_name             *string
		Image_pull_secret               *[]map[string]string     `puppet:"type => Optional[Array[Struct[Optional[name]=>String]]]"`
		Metadata                        []map[string]interface{} `puppet:"type => Array[Struct[Optional[annotations]=>Hash[String,String],Optional[generate_name]=>String,Optional[generation]=>Integer,Optional[labels]=>Hash[String,String],Optional[name]=>String,Optional[namespace]=>String,Optional[resource_version]=>String,Optional[self_link]=>String,Optional[uid]=>String]]"`
		Secret                          *[]map[string]string     `puppet:"type => Optional[Array[Struct[Optional[name]=>String]]]"`
	}

	Stateful_set struct {
		Stateful_set_id *string                  `lyra:"tf-gen.ignore"`
		Metadata        []map[string]interface{} `puppet:"type => Array[Struct[Optional[annotations]=>Hash[String,String],Optional[generate_name]=>String,Optional[generation]=>Integer,Optional[labels]=>Hash[String,String],Optional[name]=>String,Optional[namespace]=>String,Optional[resource_version]=>String,Optional[self_link]=>String,Optional[uid]=>String]]"`
		Spec            []map[string]interface{} `puppet:"type => Array[Struct[Optional[pod_management_policy]=>String,Optional[replicas]=>Integer,Optional[revision_history_limit]=>Integer,selector=>Array[Struct[Optional[match_expressions]=>Array[Struct[Optional[key]=>String,Optional[operator]=>String,Optional[values]=>Array[String]]],Optional[match_labels]=>Hash[String,String]]],service_name=>String,template=>Array[Struct[metadata=>Array[Struct[Optional[annotations]=>Hash[String,String],Optional[generate_name]=>String,Optional[generation]=>Integer,Optional[labels]=>Hash[String,String],Optional[name]=>String,Optional[resource_version]=>String,Optional[self_link]=>String,Optional[uid]=>String]],Optional[spec]=>Array[Struct[Optional[active_deadline_seconds]=>Integer,Optional[container]=>Array[Struct[Optional[args]=>Array[String],Optional[command]=>Array[String],Optional[env]=>Array[Struct[name=>String,Optional[value]=>String,Optional[value_from]=>Array[Struct[Optional[config_map_key_ref]=>Array[Struct[Optional[key]=>String,Optional[name]=>String]],Optional[field_ref]=>Array[Struct[Optional[api_version]=>String,Optional[field_path]=>String]],Optional[resource_field_ref]=>Array[Struct[Optional[container_name]=>String,resource=>String]],Optional[secret_key_ref]=>Array[Struct[Optional[key]=>String,Optional[name]=>String]]]]]],Optional[env_from]=>Array[Struct[Optional[config_map_ref]=>Array[Struct[name=>String,Optional[optional]=>Boolean]],Optional[prefix]=>String,Optional[secret_ref]=>Array[Struct[name=>String,Optional[optional]=>Boolean]]]],Optional[image]=>String,Optional[image_pull_policy]=>String,Optional[lifecycle]=>Array[Struct[Optional[post_start]=>Array[Struct[Optional[exec]=>Array[Struct[Optional[command]=>Array[String]]],Optional[http_get]=>Array[Struct[Optional[host]=>String,Optional[http_header]=>Array[Struct[Optional[name]=>String,Optional[value]=>String]],Optional[path]=>String,Optional[port]=>String,Optional[scheme]=>String]],Optional[tcp_socket]=>Array[Struct[port=>String]]]],Optional[pre_stop]=>Array[Struct[Optional[exec]=>Array[Struct[Optional[command]=>Array[String]]],Optional[http_get]=>Array[Struct[Optional[host]=>String,Optional[http_header]=>Array[Struct[Optional[name]=>String,Optional[value]=>String]],Optional[path]=>String,Optional[port]=>String,Optional[scheme]=>String]],Optional[tcp_socket]=>Array[Struct[port=>String]]]]]],Optional[liveness_probe]=>Array[Struct[Optional[exec]=>Array[Struct[Optional[command]=>Array[String]]],Optional[failure_threshold]=>Integer,Optional[http_get]=>Array[Struct[Optional[host]=>String,Optional[http_header]=>Array[Struct[Optional[name]=>String,Optional[value]=>String]],Optional[path]=>String,Optional[port]=>String,Optional[scheme]=>String]],Optional[initial_delay_seconds]=>Integer,Optional[period_seconds]=>Integer,Optional[success_threshold]=>Integer,Optional[tcp_socket]=>Array[Struct[port=>String]],Optional[timeout_seconds]=>Integer]],name=>String,Optional[port]=>Array[Struct[container_port=>Integer,Optional[host_ip]=>String,Optional[host_port]=>Integer,Optional[name]=>String,Optional[protocol]=>String]],Optional[readiness_probe]=>Array[Struct[Optional[exec]=>Array[Struct[Optional[command]=>Array[String]]],Optional[failure_threshold]=>Integer,Optional[http_get]=>Array[Struct[Optional[host]=>String,Optional[http_header]=>Array[Struct[Optional[name]=>String,Optional[value]=>String]],Optional[path]=>String,Optional[port]=>String,Optional[scheme]=>String]],Optional[initial_delay_seconds]=>Integer,Optional[period_seconds]=>Integer,Optional[success_threshold]=>Integer,Optional[tcp_socket]=>Array[Struct[port=>String]],Optional[timeout_seconds]=>Integer]],Optional[resources]=>Array[Struct[Optional[limits]=>Array[Struct[Optional[cpu]=>String,Optional[memory]=>String]],Optional[requests]=>Array[Struct[Optional[cpu]=>String,Optional[memory]=>String]]]],Optional[security_context]=>Array[Struct[Optional[allow_privilege_escalation]=>Boolean,Optional[capabilities]=>Array[Struct[Optional[add]=>Array[String],Optional[drop]=>Array[String]]],Optional[privileged]=>Boolean,Optional[read_only_root_filesystem]=>Boolean,Optional[run_as_non_root]=>Boolean,Optional[run_as_user]=>Integer,Optional[se_linux_options]=>Array[Struct[Optional[level]=>String,Optional[role]=>String,Optional[type]=>String,Optional[user]=>String]]]],Optional[stdin]=>Boolean,Optional[stdin_once]=>Boolean,Optional[termination_message_path]=>String,Optional[tty]=>Boolean,Optional[volume_mount]=>Array[Struct[mount_path=>String,name=>String,Optional[read_only]=>Boolean,Optional[sub_path]=>String]],Optional[working_dir]=>String]],Optional[dns_policy]=>String,Optional[host_ipc]=>Boolean,Optional[host_network]=>Boolean,Optional[host_pid]=>Boolean,Optional[hostname]=>String,Optional[image_pull_secrets]=>Array[Struct[name=>String]],Optional[init_container]=>Array[Struct[Optional[args]=>Array[String],Optional[command]=>Array[String],Optional[env]=>Array[Struct[name=>String,Optional[value]=>String,Optional[value_from]=>Array[Struct[Optional[config_map_key_ref]=>Array[Struct[Optional[key]=>String,Optional[name]=>String]],Optional[field_ref]=>Array[Struct[Optional[api_version]=>String,Optional[field_path]=>String]],Optional[resource_field_ref]=>Array[Struct[Optional[container_name]=>String,resource=>String]],Optional[secret_key_ref]=>Array[Struct[Optional[key]=>String,Optional[name]=>String]]]]]],Optional[env_from]=>Array[Struct[Optional[config_map_ref]=>Array[Struct[name=>String,Optional[optional]=>Boolean]],Optional[prefix]=>String,Optional[secret_ref]=>Array[Struct[name=>String,Optional[optional]=>Boolean]]]],Optional[image]=>String,Optional[image_pull_policy]=>String,Optional[lifecycle]=>Array[Struct[Optional[post_start]=>Array[Struct[Optional[exec]=>Array[Struct[Optional[command]=>Array[String]]],Optional[http_get]=>Array[Struct[Optional[host]=>String,Optional[http_header]=>Array[Struct[Optional[name]=>String,Optional[value]=>String]],Optional[path]=>String,Optional[port]=>String,Optional[scheme]=>String]],Optional[tcp_socket]=>Array[Struct[port=>String]]]],Optional[pre_stop]=>Array[Struct[Optional[exec]=>Array[Struct[Optional[command]=>Array[String]]],Optional[http_get]=>Array[Struct[Optional[host]=>String,Optional[http_header]=>Array[Struct[Optional[name]=>String,Optional[value]=>String]],Optional[path]=>String,Optional[port]=>String,Optional[scheme]=>String]],Optional[tcp_socket]=>Array[Struct[port=>String]]]]]],Optional[liveness_probe]=>Array[Struct[Optional[exec]=>Array[Struct[Optional[command]=>Array[String]]],Optional[failure_threshold]=>Integer,Optional[http_get]=>Array[Struct[Optional[host]=>String,Optional[http_header]=>Array[Struct[Optional[name]=>String,Optional[value]=>String]],Optional[path]=>String,Optional[port]=>String,Optional[scheme]=>String]],Optional[initial_delay_seconds]=>Integer,Optional[period_seconds]=>Integer,Optional[success_threshold]=>Integer,Optional[tcp_socket]=>Array[Struct[port=>String]],Optional[timeout_seconds]=>Integer]],name=>String,Optional[port]=>Array[Struct[container_port=>Integer,Optional[host_ip]=>String,Optional[host_port]=>Integer,Optional[name]=>String,Optional[protocol]=>String]],Optional[readiness_probe]=>Array[Struct[Optional[exec]=>Array[Struct[Optional[command]=>Array[String]]],Optional[failure_threshold]=>Integer,Optional[http_get]=>Array[Struct[Optional[host]=>String,Optional[http_header]=>Array[Struct[Optional[name]=>String,Optional[value]=>String]],Optional[path]=>String,Optional[port]=>String,Optional[scheme]=>String]],Optional[initial_delay_seconds]=>Integer,Optional[period_seconds]=>Integer,Optional[success_threshold]=>Integer,Optional[tcp_socket]=>Array[Struct[port=>String]],Optional[timeout_seconds]=>Integer]],Optional[resources]=>Array[Struct[Optional[limits]=>Array[Struct[Optional[cpu]=>String,Optional[memory]=>String]],Optional[requests]=>Array[Struct[Optional[cpu]=>String,Optional[memory]=>String]]]],Optional[security_context]=>Array[Struct[Optional[allow_privilege_escalation]=>Boolean,Optional[capabilities]=>Array[Struct[Optional[add]=>Array[String],Optional[drop]=>Array[String]]],Optional[privileged]=>Boolean,Optional[read_only_root_filesystem]=>Boolean,Optional[run_as_non_root]=>Boolean,Optional[run_as_user]=>Integer,Optional[se_linux_options]=>Array[Struct[Optional[level]=>String,Optional[role]=>String,Optional[type]=>String,Optional[user]=>String]]]],Optional[stdin]=>Boolean,Optional[stdin_once]=>Boolean,Optional[termination_message_path]=>String,Optional[tty]=>Boolean,Optional[volume_mount]=>Array[Struct[mount_path=>String,name=>String,Optional[read_only]=>Boolean,Optional[sub_path]=>String]],Optional[working_dir]=>String]],Optional[node_name]=>String,Optional[node_selector]=>Hash[String,String],Optional[restart_policy]=>String,Optional[security_context]=>Array[Struct[Optional[fs_group]=>Integer,Optional[run_as_non_root]=>Boolean,Optional[run_as_user]=>Integer,Optional[se_linux_options]=>Array[Struct[Optional[level]=>String,Optional[role]=>String,Optional[type]=>String,Optional[user]=>String]],Optional[supplemental_groups]=>Array[Integer]]],Optional[service_account_name]=>String,Optional[subdomain]=>String,Optional[termination_grace_period_seconds]=>Integer,Optional[volume]=>Array[Struct[Optional[aws_elastic_block_store]=>Array[Struct[Optional[fs_type]=>String,Optional[partition]=>Integer,Optional[read_only]=>Boolean,volume_id=>String]],Optional[azure_disk]=>Array[Struct[caching_mode=>String,data_disk_uri=>String,disk_name=>String,Optional[fs_type]=>String,Optional[read_only]=>Boolean]],Optional[azure_file]=>Array[Struct[Optional[read_only]=>Boolean,secret_name=>String,share_name=>String]],Optional[ceph_fs]=>Array[Struct[monitors=>Array[String],Optional[path]=>String,Optional[read_only]=>Boolean,Optional[secret_file]=>String,Optional[secret_ref]=>Array[Struct[Optional[name]=>String]],Optional[user]=>String]],Optional[cinder]=>Array[Struct[Optional[fs_type]=>String,Optional[read_only]=>Boolean,volume_id=>String]],Optional[config_map]=>Array[Struct[Optional[default_mode]=>Integer,Optional[items]=>Array[Struct[Optional[key]=>String,Optional[mode]=>Integer,Optional[path]=>String]],Optional[name]=>String]],Optional[downward_api]=>Array[Struct[Optional[default_mode]=>Integer,Optional[items]=>Array[Struct[field_ref=>Array[Struct[Optional[api_version]=>String,Optional[field_path]=>String]],Optional[mode]=>Integer,path=>String,Optional[resource_field_ref]=>Array[Struct[container_name=>String,Optional[quantity]=>String,resource=>String]]]]]],Optional[empty_dir]=>Array[Struct[Optional[medium]=>String]],Optional[fc]=>Array[Struct[Optional[fs_type]=>String,lun=>Integer,Optional[read_only]=>Boolean,target_ww_ns=>Array[String]]],Optional[flex_volume]=>Array[Struct[driver=>String,Optional[fs_type]=>String,Optional[options]=>Hash[String,String],Optional[read_only]=>Boolean,Optional[secret_ref]=>Array[Struct[Optional[name]=>String]]]],Optional[flocker]=>Array[Struct[Optional[dataset_name]=>String,Optional[dataset_uuid]=>String]],Optional[gce_persistent_disk]=>Array[Struct[Optional[fs_type]=>String,Optional[partition]=>Integer,pd_name=>String,Optional[read_only]=>Boolean]],Optional[git_repo]=>Array[Struct[Optional[directory]=>String,Optional[repository]=>String,Optional[revision]=>String]],Optional[glusterfs]=>Array[Struct[endpoints_name=>String,path=>String,Optional[read_only]=>Boolean]],Optional[host_path]=>Array[Struct[Optional[path]=>String]],Optional[iscsi]=>Array[Struct[Optional[fs_type]=>String,iqn=>String,Optional[iscsi_interface]=>String,Optional[lun]=>Integer,Optional[read_only]=>Boolean,target_portal=>String]],Optional[local]=>Array[Struct[Optional[path]=>String]],Optional[name]=>String,Optional[nfs]=>Array[Struct[path=>String,Optional[read_only]=>Boolean,server=>String]],Optional[persistent_volume_claim]=>Array[Struct[Optional[claim_name]=>String,Optional[read_only]=>Boolean]],Optional[photon_persistent_disk]=>Array[Struct[Optional[fs_type]=>String,pd_id=>String]],Optional[quobyte]=>Array[Struct[Optional[group]=>String,Optional[read_only]=>Boolean,registry=>String,Optional[user]=>String,volume=>String]],Optional[rbd]=>Array[Struct[ceph_monitors=>Array[String],Optional[fs_type]=>String,Optional[keyring]=>String,Optional[rados_user]=>String,rbd_image=>String,Optional[rbd_pool]=>String,Optional[read_only]=>Boolean,Optional[secret_ref]=>Array[Struct[Optional[name]=>String]]]],Optional[secret]=>Array[Struct[Optional[default_mode]=>Integer,Optional[items]=>Array[Struct[Optional[key]=>String,Optional[mode]=>Integer,Optional[path]=>String]],Optional[optional]=>Boolean,Optional[secret_name]=>String]],Optional[vsphere_volume]=>Array[Struct[Optional[fs_type]=>String,volume_path=>String]]]]]]]],Optional[update_strategy]=>Array[Struct[Optional[rolling_update]=>Array[Struct[Optional[partition]=>Integer]],Optional[type]=>String]],Optional[volume_claim_template]=>Array[Struct[metadata=>Array[Struct[Optional[annotations]=>Hash[String,String],Optional[generate_name]=>String,Optional[generation]=>Integer,Optional[labels]=>Hash[String,String],Optional[name]=>String,Optional[namespace]=>String,Optional[resource_version]=>String,Optional[self_link]=>String,Optional[uid]=>String]],spec=>Array[Struct[access_modes=>Array[String],resources=>Array[Struct[Optional[limits]=>Hash[String,String],Optional[requests]=>Hash[String,String]]],Optional[selector]=>Array[Struct[Optional[match_expressions]=>Array[Struct[Optional[key]=>String,Optional[operator]=>String,Optional[values]=>Array[String]]],Optional[match_labels]=>Hash[String,String]]],Optional[storage_class_name]=>String,Optional[volume_name]=>String]]]]]]"`
	}

	Storage_class struct {
		Storage_class_id    *string                  `lyra:"tf-gen.ignore"`
		Metadata            []map[string]interface{} `puppet:"type => Array[Struct[Optional[annotations]=>Hash[String,String],Optional[generate_name]=>String,Optional[generation]=>Integer,Optional[labels]=>Hash[String,String],Optional[name]=>String,Optional[resource_version]=>String,Optional[self_link]=>String,Optional[uid]=>String]]"`
		Parameters          *map[string]string
		Reclaim_policy      string `puppet:"value=>'Delete'"`
		Storage_provisioner string
		Volume_binding_mode string `puppet:"value=>'Immediate'"`
	}
)

func Initialize(sb *service.Builder, p *schema.Provider) {
	// Generic handler API
	sb.RegisterAPI("TerraformKubernetes::GenericHandler", bridge.NewTFHandler(nil, nil, "", ""))

	// Registration of resource types with handler
	var rt px.Type
	rt = sb.RegisterTypes("TerraformKubernetes", sb.BuildResource(&Cluster_role_binding{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("cluster_role_binding_id")
		b.ImmutableAttributes("role_ref")
	}))[0]
	sb.RegisterHandler("TerraformKubernetes::Cluster_role_bindingHandler", bridge.NewTFHandler(p, rt, "cluster_role_binding_id", "kubernetes_cluster_role_binding"), rt)

	rt = sb.RegisterTypes("TerraformKubernetes", sb.BuildResource(&Config_map{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("config_map_id")
	}))[0]
	sb.RegisterHandler("TerraformKubernetes::Config_mapHandler", bridge.NewTFHandler(p, rt, "config_map_id", "kubernetes_config_map"), rt)

	rt = sb.RegisterTypes("TerraformKubernetes", sb.BuildResource(&Deployment{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("deployment_id")
	}))[0]
	sb.RegisterHandler("TerraformKubernetes::DeploymentHandler", bridge.NewTFHandler(p, rt, "deployment_id", "kubernetes_deployment"), rt)

	rt = sb.RegisterTypes("TerraformKubernetes", sb.BuildResource(&Horizontal_pod_autoscaler{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("horizontal_pod_autoscaler_id")
	}))[0]
	sb.RegisterHandler("TerraformKubernetes::Horizontal_pod_autoscalerHandler", bridge.NewTFHandler(p, rt, "horizontal_pod_autoscaler_id", "kubernetes_horizontal_pod_autoscaler"), rt)

	rt = sb.RegisterTypes("TerraformKubernetes", sb.BuildResource(&Limit_range{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("limit_range_id")
	}))[0]
	sb.RegisterHandler("TerraformKubernetes::Limit_rangeHandler", bridge.NewTFHandler(p, rt, "limit_range_id", "kubernetes_limit_range"), rt)

	rt = sb.RegisterTypes("TerraformKubernetes", sb.BuildResource(&Namespace{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("namespace_id")
	}))[0]
	sb.RegisterHandler("TerraformKubernetes::NamespaceHandler", bridge.NewTFHandler(p, rt, "namespace_id", "kubernetes_namespace"), rt)

	rt = sb.RegisterTypes("TerraformKubernetes", sb.BuildResource(&Network_policy{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("network_policy_id")
	}))[0]
	sb.RegisterHandler("TerraformKubernetes::Network_policyHandler", bridge.NewTFHandler(p, rt, "network_policy_id", "kubernetes_network_policy"), rt)

	rt = sb.RegisterTypes("TerraformKubernetes", sb.BuildResource(&Persistent_volume{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("persistent_volume_id")
	}))[0]
	sb.RegisterHandler("TerraformKubernetes::Persistent_volumeHandler", bridge.NewTFHandler(p, rt, "persistent_volume_id", "kubernetes_persistent_volume"), rt)

	rt = sb.RegisterTypes("TerraformKubernetes", sb.BuildResource(&Persistent_volume_claim{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("persistent_volume_claim_id")
		b.ImmutableAttributes("spec")
	}))[0]
	sb.RegisterHandler("TerraformKubernetes::Persistent_volume_claimHandler", bridge.NewTFHandler(p, rt, "persistent_volume_claim_id", "kubernetes_persistent_volume_claim"), rt)

	rt = sb.RegisterTypes("TerraformKubernetes", sb.BuildResource(&Pod{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("pod_id")
	}))[0]
	sb.RegisterHandler("TerraformKubernetes::PodHandler", bridge.NewTFHandler(p, rt, "pod_id", "kubernetes_pod"), rt)

	rt = sb.RegisterTypes("TerraformKubernetes", sb.BuildResource(&Replication_controller{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("replication_controller_id")
	}))[0]
	sb.RegisterHandler("TerraformKubernetes::Replication_controllerHandler", bridge.NewTFHandler(p, rt, "replication_controller_id", "kubernetes_replication_controller"), rt)

	rt = sb.RegisterTypes("TerraformKubernetes", sb.BuildResource(&Resource_quota{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("resource_quota_id")
	}))[0]
	sb.RegisterHandler("TerraformKubernetes::Resource_quotaHandler", bridge.NewTFHandler(p, rt, "resource_quota_id", "kubernetes_resource_quota"), rt)

	rt = sb.RegisterTypes("TerraformKubernetes", sb.BuildResource(&Role{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("role_id")
	}))[0]
	sb.RegisterHandler("TerraformKubernetes::RoleHandler", bridge.NewTFHandler(p, rt, "role_id", "kubernetes_role"), rt)

	rt = sb.RegisterTypes("TerraformKubernetes", sb.BuildResource(&Role_binding{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("role_binding_id")
		b.ImmutableAttributes("role_ref")
	}))[0]
	sb.RegisterHandler("TerraformKubernetes::Role_bindingHandler", bridge.NewTFHandler(p, rt, "role_binding_id", "kubernetes_role_binding"), rt)

	rt = sb.RegisterTypes("TerraformKubernetes", sb.BuildResource(&Secret{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("secret_id")
		b.ImmutableAttributes("type")
	}))[0]
	sb.RegisterHandler("TerraformKubernetes::SecretHandler", bridge.NewTFHandler(p, rt, "secret_id", "kubernetes_secret"), rt)

	rt = sb.RegisterTypes("TerraformKubernetes", sb.BuildResource(&Service{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("service_id", "load_balancer_ingress")
	}))[0]
	sb.RegisterHandler("TerraformKubernetes::ServiceHandler", bridge.NewTFHandler(p, rt, "service_id", "kubernetes_service"), rt)

	rt = sb.RegisterTypes("TerraformKubernetes", sb.BuildResource(&Service_account{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("service_account_id", "default_secret_name")
	}))[0]
	sb.RegisterHandler("TerraformKubernetes::Service_accountHandler", bridge.NewTFHandler(p, rt, "service_account_id", "kubernetes_service_account"), rt)

	rt = sb.RegisterTypes("TerraformKubernetes", sb.BuildResource(&Stateful_set{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("stateful_set_id")
		b.ImmutableAttributes("spec")
	}))[0]
	sb.RegisterHandler("TerraformKubernetes::Stateful_setHandler", bridge.NewTFHandler(p, rt, "stateful_set_id", "kubernetes_stateful_set"), rt)

	rt = sb.RegisterTypes("TerraformKubernetes", sb.BuildResource(&Storage_class{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("storage_class_id")
		b.ImmutableAttributes("parameters", "storage_provisioner")
	}))[0]
	sb.RegisterHandler("TerraformKubernetes::Storage_classHandler", bridge.NewTFHandler(p, rt, "storage_class_id", "kubernetes_storage_class"), rt)

}
