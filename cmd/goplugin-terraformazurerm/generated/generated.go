// Code generated by Lyra DO NOT EDIT.

// This code is generated on a per-Provider basis using "tf-gen"
// Long term our hope is to remove this generation step and adopt dynamic approach

package azurerm

import (
	"github.com/hashicorp/terraform/helper/schema"
	"github.com/lyraproj/pcore/px"
	"github.com/lyraproj/servicesdk/service"
	"github.com/lyraproj/terraform-bridge/pkg/bridge"
)

type (
	Api_management struct {
		Api_management_id         *string                   `lyra:"tf-gen.ignore"`
		Additional_location       *[]map[string]interface{} `puppet:"type => Optional[Array[Struct[Optional[gateway_regional_url]=>String,location=>String,Optional[public_ip_addresses]=>Array[String]]]]"`
		Certificate               *[]map[string]string      `puppet:"type => Optional[Array[Struct[certificate_password=>String,encoded_certificate=>String,store_name=>String]]]"`
		Gateway_regional_url      *string
		Gateway_url               *string
		Hostname_configuration    *[]map[string][]interface{} `puppet:"type => Optional[Array[Struct[Optional[management]=>Array[Struct[Optional[certificate]=>String,Optional[certificate_password]=>String,host_name=>String,Optional[key_vault_id]=>String,Optional[negotiate_client_certificate]=>Boolean]],Optional[portal]=>Array[Struct[Optional[certificate]=>String,Optional[certificate_password]=>String,host_name=>String,Optional[key_vault_id]=>String,Optional[negotiate_client_certificate]=>Boolean]],Optional[proxy]=>Array[Struct[Optional[certificate]=>String,Optional[certificate_password]=>String,Optional[default_ssl_binding]=>Boolean,host_name=>String,Optional[key_vault_id]=>String,Optional[negotiate_client_certificate]=>Boolean]],Optional[scm]=>Array[Struct[Optional[certificate]=>String,Optional[certificate_password]=>String,host_name=>String,Optional[key_vault_id]=>String,Optional[negotiate_client_certificate]=>Boolean]]]]]"`
		Identity                  *[]map[string]string        `puppet:"type => Optional[Array[Struct[Optional[principal_id]=>String,Optional[tenant_id]=>String,type=>String]]]"`
		Location                  string
		Management_api_url        *string
		Name                      string
		Notification_sender_email *string
		Portal_url                *string
		Public_ip_addresses       *[]string
		Publisher_email           string
		Publisher_name            string
		Resource_group_name       string
		Scm_url                   *string
		Security                  *[]map[string]bool       `puppet:"type => Optional[Array[Struct[Optional[disable_backend_ssl30]=>Boolean,Optional[disable_backend_tls10]=>Boolean,Optional[disable_backend_tls11]=>Boolean,Optional[disable_frontend_ssl30]=>Boolean,Optional[disable_frontend_tls10]=>Boolean,Optional[disable_frontend_tls11]=>Boolean,Optional[disable_triple_des_chipers]=>Boolean]]]"`
		Sku                       []map[string]interface{} `puppet:"type => Array[Struct[capacity=>Integer,name=>String]]"`
		Tags                      *map[string]string
	}

	App_service struct {
		App_service_id                 *string `lyra:"tf-gen.ignore"`
		App_service_plan_id            string
		App_settings                   *map[string]string
		Client_affinity_enabled        *bool
		Connection_string              *[]map[string]string `puppet:"type => Optional[Array[Struct[name=>String,type=>String,value=>String]]]"`
		Default_site_hostname          *string
		Enabled                        bool                 `puppet:"value=>true"`
		Https_only                     bool                 `puppet:"value=>false"`
		Identity                       *[]map[string]string `puppet:"type => Optional[Array[Struct[Optional[principal_id]=>String,Optional[tenant_id]=>String,type=>String]]]"`
		Location                       string
		Name                           string
		Outbound_ip_addresses          *string
		Possible_outbound_ip_addresses *string
		Resource_group_name            string
		Site_config                    *[]map[string]interface{} `puppet:"type => Optional[Array[Struct[Optional[always_on]=>Boolean,Optional[app_command_line]=>String,Optional[default_documents]=>Array[String],Optional[dotnet_framework_version]=>String,Optional[ftps_state]=>String,Optional[http2_enabled]=>Boolean,Optional[ip_restriction]=>Array[Struct[ip_address=>String,Optional[subnet_mask]=>String]],Optional[java_container]=>String,Optional[java_container_version]=>String,Optional[java_version]=>String,Optional[linux_fx_version]=>String,Optional[local_mysql_enabled]=>Boolean,Optional[managed_pipeline_mode]=>String,Optional[min_tls_version]=>String,Optional[php_version]=>String,Optional[python_version]=>String,Optional[remote_debugging_enabled]=>Boolean,Optional[remote_debugging_version]=>String,Optional[scm_type]=>String,Optional[use_32_bit_worker_process]=>Boolean,Optional[virtual_network_name]=>String,Optional[websockets_enabled]=>Boolean]]]"`
		Site_credential                *[]map[string]string      `puppet:"type => Optional[Array[Struct[Optional[password]=>String,Optional[username]=>String]]]"`
		Source_control                 *[]map[string]string      `puppet:"type => Optional[Array[Struct[Optional[branch]=>String,Optional[repo_url]=>String]]]"`
		Tags                           *map[string]string
	}

	App_service_active_slot struct {
		App_service_active_slot_id *string `lyra:"tf-gen.ignore"`
		App_service_name           string
		App_service_slot_name      string
		Resource_group_name        string
	}

	App_service_custom_hostname_binding struct {
		App_service_custom_hostname_binding_id *string `lyra:"tf-gen.ignore"`
		App_service_name                       string
		Hostname                               string
		Resource_group_name                    string
	}

	App_service_plan struct {
		App_service_plan_id        *string `lyra:"tf-gen.ignore"`
		App_service_environment_id *string
		Kind                       string `puppet:"value=>'Windows'"`
		Location                   string
		Maximum_number_of_workers  *int64
		Name                       string
		Per_site_scaling           *bool
		Properties                 *[]map[string]interface{} `puppet:"type => Optional[Array[Struct[]]]"`
		Reserved                   *bool
		Resource_group_name        string
		Sku                        []map[string]interface{} `puppet:"type => Array[Struct[Optional[capacity]=>Integer,size=>String,tier=>String]]"`
		Tags                       *map[string]string
	}

	App_service_slot struct {
		App_service_slot_id     *string `lyra:"tf-gen.ignore"`
		App_service_name        string
		App_service_plan_id     string
		App_settings            *map[string]string
		Client_affinity_enabled *bool
		Connection_string       *[]map[string]string `puppet:"type => Optional[Array[Struct[name=>String,type=>String,value=>String]]]"`
		Default_site_hostname   *string
		Enabled                 bool                 `puppet:"value=>true"`
		Https_only              bool                 `puppet:"value=>false"`
		Identity                *[]map[string]string `puppet:"type => Optional[Array[Struct[Optional[principal_id]=>String,Optional[tenant_id]=>String,type=>String]]]"`
		Location                string
		Name                    string
		Resource_group_name     string
		Site_config             *[]map[string]interface{} `puppet:"type => Optional[Array[Struct[Optional[always_on]=>Boolean,Optional[app_command_line]=>String,Optional[default_documents]=>Array[String],Optional[dotnet_framework_version]=>String,Optional[ftps_state]=>String,Optional[http2_enabled]=>Boolean,Optional[ip_restriction]=>Array[Struct[ip_address=>String,Optional[subnet_mask]=>String]],Optional[java_container]=>String,Optional[java_container_version]=>String,Optional[java_version]=>String,Optional[linux_fx_version]=>String,Optional[local_mysql_enabled]=>Boolean,Optional[managed_pipeline_mode]=>String,Optional[min_tls_version]=>String,Optional[php_version]=>String,Optional[python_version]=>String,Optional[remote_debugging_enabled]=>Boolean,Optional[remote_debugging_version]=>String,Optional[scm_type]=>String,Optional[use_32_bit_worker_process]=>Boolean,Optional[virtual_network_name]=>String,Optional[websockets_enabled]=>Boolean]]]"`
		Tags                    *map[string]string
	}

	Application_gateway struct {
		Application_gateway_id     *string                  `lyra:"tf-gen.ignore"`
		Authentication_certificate *[]map[string]string     `puppet:"type => Optional[Array[Struct[data=>String,Optional[id]=>String,name=>String]]]"`
		Backend_address_pool       []map[string]interface{} `puppet:"type => Array[Struct[Optional[fqdn_list]=>Array[String],Optional[id]=>String,Optional[ip_address_list]=>Array[String],name=>String]]"`
		Backend_http_settings      []map[string]interface{} `puppet:"type => Array[Struct[Optional[authentication_certificate]=>Array[Struct[Optional[id]=>String,name=>String]],cookie_based_affinity=>String,Optional[id]=>String,name=>String,port=>Integer,Optional[probe_id]=>String,Optional[probe_name]=>String,protocol=>String,Optional[request_timeout]=>Integer]]"`
		Disabled_ssl_protocols     *[]string
		Frontend_ip_configuration  []map[string]string      `puppet:"type => Array[Struct[Optional[id]=>String,name=>String,Optional[private_ip_address]=>String,Optional[private_ip_address_allocation]=>String,Optional[public_ip_address_id]=>String,Optional[subnet_id]=>String]]"`
		Frontend_port              []map[string]interface{} `puppet:"type => Array[Struct[Optional[id]=>String,name=>String,port=>Integer]]"`
		Gateway_ip_configuration   []map[string]string      `puppet:"type => Array[Struct[Optional[id]=>String,name=>String,subnet_id=>String]]"`
		Http_listener              []map[string]interface{} `puppet:"type => Array[Struct[Optional[frontend_ip_configuration_id]=>String,frontend_ip_configuration_name=>String,Optional[frontend_port_id]=>String,frontend_port_name=>String,Optional[host_name]=>String,Optional[id]=>String,name=>String,protocol=>String,Optional[require_sni]=>Boolean,Optional[ssl_certificate_id]=>String,Optional[ssl_certificate_name]=>String]]"`
		Location                   string
		Name                       string
		Probe                      *[]map[string]interface{} `puppet:"type => Optional[Array[Struct[host=>String,Optional[id]=>String,interval=>Integer,Optional[match]=>Array[Struct[Optional[body]=>String,Optional[status_code]=>Array[String]]],Optional[minimum_servers]=>Integer,name=>String,path=>String,protocol=>String,timeout=>Integer,unhealthy_threshold=>Integer]]]"`
		Request_routing_rule       []map[string]string       `puppet:"type => Array[Struct[Optional[backend_address_pool_id]=>String,Optional[backend_address_pool_name]=>String,Optional[backend_http_settings_id]=>String,Optional[backend_http_settings_name]=>String,Optional[http_listener_id]=>String,http_listener_name=>String,Optional[id]=>String,name=>String,rule_type=>String,Optional[url_path_map_id]=>String,Optional[url_path_map_name]=>String]]"`
		Resource_group_name        string
		Sku                        []map[string]interface{} `puppet:"type => Array[Struct[capacity=>Integer,name=>String,tier=>String]]"`
		Ssl_certificate            *[]map[string]string     `puppet:"type => Optional[Array[Struct[data=>String,Optional[id]=>String,name=>String,password=>String,Optional[public_cert_data]=>String]]]"`
		Tags                       *map[string]string
		Url_path_map               *[]map[string]interface{} `puppet:"type => Optional[Array[Struct[Optional[default_backend_address_pool_id]=>String,default_backend_address_pool_name=>String,Optional[default_backend_http_settings_id]=>String,default_backend_http_settings_name=>String,Optional[id]=>String,name=>String,path_rule=>Array[Struct[Optional[backend_address_pool_id]=>String,backend_address_pool_name=>String,Optional[backend_http_settings_id]=>String,backend_http_settings_name=>String,Optional[id]=>String,name=>String,paths=>Array[String]]]]]]"`
		Waf_configuration          *[]map[string]interface{} `puppet:"type => Optional[Array[Struct[enabled=>Boolean,firewall_mode=>String,Optional[rule_set_type]=>String,rule_set_version=>String]]]"`
	}

	Application_insights struct {
		Application_insights_id *string `lyra:"tf-gen.ignore"`
		App_id                  *string
		Application_type        string
		Instrumentation_key     *string
		Location                string
		Name                    string
		Resource_group_name     string
		Tags                    *map[string]string
	}

	Application_insights_api_key struct {
		Application_insights_api_key_id *string `lyra:"tf-gen.ignore"`
		Api_key                         *string
		Application_insights_id         string
		Name                            string
		Read_permissions                *[]string
		Write_permissions               *[]string
	}

	Application_security_group struct {
		Application_security_group_id *string `lyra:"tf-gen.ignore"`
		Location                      string
		Name                          string
		Resource_group_name           string
		Tags                          *map[string]string
	}

	Automation_account struct {
		Automation_account_id    *string `lyra:"tf-gen.ignore"`
		Dsc_primary_access_key   *string
		Dsc_secondary_access_key *string
		Dsc_server_endpoint      *string
		Location                 string
		Name                     string
		Resource_group_name      string
		Sku                      []map[string]string `puppet:"type => Array[Struct[Optional[name]=>String]]"`
		Tags                     *map[string]string
	}

	Automation_credential struct {
		Automation_credential_id *string `lyra:"tf-gen.ignore"`
		Account_name             string
		Description              *string
		Name                     string
		Password                 string
		Resource_group_name      string
		Username                 string
	}

	Automation_dsc_configuration struct {
		Automation_dsc_configuration_id *string `lyra:"tf-gen.ignore"`
		Automation_account_name         string
		Content_embedded                string
		Description                     *string
		Location                        string
		Log_verbose                     bool `puppet:"value=>false"`
		Name                            string
		Resource_group_name             string
		State                           *string
	}

	Automation_dsc_nodeconfiguration struct {
		Automation_dsc_nodeconfiguration_id *string `lyra:"tf-gen.ignore"`
		Automation_account_name             string
		Configuration_name                  *string
		Content_embedded                    string
		Name                                string
		Resource_group_name                 string
	}

	Automation_module struct {
		Automation_module_id    *string `lyra:"tf-gen.ignore"`
		Automation_account_name string
		Module_link             []map[string]interface{} `puppet:"type => Array[Struct[Optional[hash]=>Array[Struct[algorithm=>String,value=>String]],uri=>String]]"`
		Name                    string
		Resource_group_name     string
	}

	Automation_runbook struct {
		Automation_runbook_id *string `lyra:"tf-gen.ignore"`
		Account_name          string
		Content               *string
		Description           *string
		Location              string
		Log_progress          bool
		Log_verbose           bool
		Name                  string
		Publish_content_link  []map[string]interface{} `puppet:"type => Array[Struct[Optional[hash]=>Array[Struct[algorithm=>String,value=>String]],uri=>String,Optional[version]=>String]]"`
		Resource_group_name   string
		Runbook_type          string
		Tags                  *map[string]string
	}

	Automation_schedule struct {
		Automation_schedule_id  *string `lyra:"tf-gen.ignore"`
		Account_name            *string
		Automation_account_name *string
		Description             *string
		Expiry_time             *string
		Frequency               string
		Interval                *int64
		Month_days              *[]int64
		Monthly_occurrence      *[]map[string]interface{} `puppet:"type => Optional[Array[Struct[day=>String,occurrence=>Integer]]]"`
		Name                    string
		Resource_group_name     string
		Start_time              *string
		Timezone                string `puppet:"value=>'UTC'"`
		Week_days               *[]string
	}

	Autoscale_setting struct {
		Autoscale_setting_id *string `lyra:"tf-gen.ignore"`
		Enabled              bool    `puppet:"value=>true"`
		Location             string
		Name                 string
		Notification         *[]map[string][]interface{} `puppet:"type => Optional[Array[Struct[Optional[email]=>Array[Struct[Optional[custom_emails]=>Array[String],Optional[send_to_subscription_administrator]=>Boolean,Optional[send_to_subscription_co_administrator]=>Boolean]],Optional[webhook]=>Array[Struct[Optional[properties]=>Hash[String,String],service_uri=>String]]]]]"`
		Profile              []map[string]interface{}    `puppet:"type => Array[Struct[capacity=>Array[Struct['default'=>Integer,maximum=>Integer,minimum=>Integer]],Optional[fixed_date]=>Array[Struct[end=>String,start=>String,Optional[timezone]=>String]],name=>String,Optional[recurrence]=>Array[Struct[days=>Array[String],hours=>Array[Integer],minutes=>Array[Integer],Optional[timezone]=>String]],Optional[rule]=>Array[Struct[metric_trigger=>Array[Struct[metric_name=>String,metric_resource_id=>String,operator=>String,statistic=>String,threshold=>Float,time_aggregation=>String,time_grain=>String,time_window=>String]],scale_action=>Array[Struct[cooldown=>String,direction=>String,type=>String,value=>Integer]]]]]]"`
		Resource_group_name  string
		Tags                 *map[string]string
		Target_resource_id   string
	}

	Availability_set struct {
		Availability_set_id          *string `lyra:"tf-gen.ignore"`
		Location                     string
		Managed                      bool `puppet:"value=>false"`
		Name                         string
		Platform_fault_domain_count  int64 `puppet:"value=>3"`
		Platform_update_domain_count int64 `puppet:"value=>5"`
		Resource_group_name          string
		Tags                         *map[string]string
	}

	Azuread_application struct {
		Azuread_application_id     *string `lyra:"tf-gen.ignore"`
		Application_id             *string
		Available_to_other_tenants *bool
		Homepage                   *string
		Identifier_uris            *[]string
		Name                       string
		Oauth2_allow_implicit_flow *bool
		Reply_urls                 *[]string
	}

	Azuread_service_principal struct {
		Azuread_service_principal_id *string `lyra:"tf-gen.ignore"`
		Application_id               string
		Display_name                 *string
	}

	Azuread_service_principal_password struct {
		Azuread_service_principal_password_id *string `lyra:"tf-gen.ignore"`
		End_date                              string
		Key_id                                *string
		Service_principal_id                  string
		Start_date                            *string
		Value                                 string
	}

	Batch_account struct {
		Batch_account_id     *string `lyra:"tf-gen.ignore"`
		Location             string
		Name                 string
		Pool_allocation_mode string `puppet:"value=>'BatchService'"`
		Resource_group_name  string
		Storage_account_id   *string
		Tags                 *map[string]string
	}

	Batch_pool struct {
		Batch_pool_id                 *string `lyra:"tf-gen.ignore"`
		Account_name                  string
		Auto_scale                    *[]map[string]string `puppet:"type => Optional[Array[Struct[Optional[evaluation_interval]=>String,formula=>String]]]"`
		Display_name                  *string
		Fixed_scale                   *[]map[string]interface{} `puppet:"type => Optional[Array[Struct[Optional[resize_timeout]=>String,Optional[target_dedicated_nodes]=>Integer,Optional[target_low_priority_nodes]=>Integer]]]"`
		Name                          string
		Node_agent_sku_id             string
		Resource_group_name           string
		Start_task                    *[]map[string]interface{} `puppet:"type => Optional[Array[Struct[command_line=>String,Optional[environment]=>Hash[String,String],Optional[max_task_retry_count]=>Integer,user_identity=>Array[Struct[Optional[auto_user]=>Array[Struct[Optional[elevation_level]=>String,Optional[scope]=>String]],Optional[user_name]=>String]],Optional[wait_for_success]=>Boolean]]]"`
		Stop_pending_resize_operation bool                      `puppet:"value=>false"`
		Storage_image_reference       []map[string]string       `puppet:"type => Array[Struct[Optional[id]=>String,offer=>String,publisher=>String,sku=>String,version=>String]]"`
		Vm_size                       string
	}

	Cdn_endpoint struct {
		Cdn_endpoint_id               *string `lyra:"tf-gen.ignore"`
		Content_types_to_compress     *[]string
		Geo_filter                    *[]map[string]interface{} `puppet:"type => Optional[Array[Struct[action=>String,country_codes=>Array[String],relative_path=>String]]]"`
		Host_name                     *string
		Is_compression_enabled        bool `puppet:"value=>false"`
		Is_http_allowed               bool `puppet:"value=>true"`
		Is_https_allowed              bool `puppet:"value=>true"`
		Location                      string
		Name                          string
		Optimization_type             *string
		Origin                        []map[string]interface{} `puppet:"type => Array[Struct[host_name=>String,Optional[http_port]=>Integer,Optional[https_port]=>Integer,name=>String]]"`
		Origin_host_header            *string
		Origin_path                   *string
		Probe_path                    *string
		Profile_name                  string
		Querystring_caching_behaviour string `puppet:"value=>'IgnoreQueryString'"`
		Resource_group_name           string
		Tags                          *map[string]string
	}

	Cdn_profile struct {
		Cdn_profile_id      *string `lyra:"tf-gen.ignore"`
		Location            string
		Name                string
		Resource_group_name string
		Sku                 string
		Tags                *map[string]string
	}

	Cognitive_account struct {
		Cognitive_account_id *string `lyra:"tf-gen.ignore"`
		Endpoint             *string
		Kind                 string
		Location             string
		Name                 string
		Resource_group_name  string
		Sku                  []map[string]string `puppet:"type => Array[Struct[name=>String,tier=>String]]"`
		Tags                 *map[string]string
	}

	Container_group struct {
		Container_group_id        *string                  `lyra:"tf-gen.ignore"`
		Container                 []map[string]interface{} `puppet:"type => Array[Struct[Optional[commands]=>Array[String],cpu=>Float,Optional[environment_variables]=>Hash[String,String],image=>String,memory=>Float,name=>String,Optional[ports]=>Array[Struct[Optional[port]=>Integer,Optional[protocol]=>String]],Optional[secure_environment_variables]=>Hash[String,String],Optional[volume]=>Array[Struct[mount_path=>String,name=>String,Optional[read_only]=>Boolean,share_name=>String,storage_account_key=>String,storage_account_name=>String]]]]"`
		Dns_name_label            *string
		Fqdn                      *string
		Image_registry_credential *[]map[string]string `puppet:"type => Optional[Array[Struct[password=>String,server=>String,username=>String]]]"`
		Ip_address                *string
		Ip_address_type           string `puppet:"value=>'Public'"`
		Location                  string
		Name                      string
		Os_type                   string
		Resource_group_name       string
		Restart_policy            string `puppet:"value=>'Always'"`
		Tags                      *map[string]string
	}

	Container_registry struct {
		Container_registry_id    *string `lyra:"tf-gen.ignore"`
		Admin_enabled            bool    `puppet:"value=>false"`
		Admin_password           *string
		Admin_username           *string
		Georeplication_locations *[]string
		Location                 string
		Login_server             *string
		Name                     string
		Resource_group_name      string
		Sku                      string               `puppet:"value=>'Classic'"`
		Storage_account          *[]map[string]string `puppet:"type => Optional[Array[Struct[access_key=>String,name=>String]]]"`
		Storage_account_id       *string
		Tags                     *map[string]string
	}

	Container_service struct {
		Container_service_id   *string                  `lyra:"tf-gen.ignore"`
		Agent_pool_profile     []map[string]interface{} `puppet:"type => Array[Struct[Optional[count]=>Integer,dns_prefix=>String,Optional[fqdn]=>String,name=>String,vm_size=>String]]"`
		Diagnostics_profile    []map[string]interface{} `puppet:"type => Array[Struct[enabled=>Boolean,Optional[storage_uri]=>String]]"`
		Linux_profile          []map[string]interface{} `puppet:"type => Array[Struct[admin_username=>String,ssh_key=>Array[Struct[key_data=>String]]]]"`
		Location               string
		Master_profile         []map[string]interface{} `puppet:"type => Array[Struct[Optional[count]=>Integer,dns_prefix=>String,Optional[fqdn]=>String]]"`
		Name                   string
		Orchestration_platform string
		Resource_group_name    string
		Service_principal      *[]map[string]string `puppet:"type => Optional[Array[Struct[client_id=>String,client_secret=>String]]]"`
		Tags                   *map[string]string
	}

	Cosmosdb_account struct {
		Cosmosdb_account_id               *string              `lyra:"tf-gen.ignore"`
		Capabilities                      *[]map[string]string `puppet:"type => Optional[Array[Struct[name=>String]]]"`
		Connection_strings                *[]string
		Consistency_policy                []map[string]interface{} `puppet:"type => Array[Struct[consistency_level=>String,Optional[max_interval_in_seconds]=>Integer,Optional[max_staleness_prefix]=>Integer]]"`
		Enable_automatic_failover         bool                     `puppet:"value=>false"`
		Enable_multiple_write_locations   bool                     `puppet:"value=>false"`
		Endpoint                          *string
		Failover_policy                   *[]map[string]interface{} `puppet:"type => Optional[Array[Struct[Optional[id]=>String,location=>String,priority=>Integer]]]"`
		Geo_location                      *[]map[string]interface{} `puppet:"type => Optional[Array[Struct[failover_priority=>Integer,Optional[id]=>String,location=>String,Optional[prefix]=>String]]]"`
		Ip_range_filter                   *string
		Is_virtual_network_filter_enabled bool   `puppet:"value=>false"`
		Kind                              string `puppet:"value=>'GlobalDocumentDB'"`
		Location                          string
		Name                              string
		Offer_type                        string
		Primary_master_key                *string
		Primary_readonly_master_key       *string
		Read_endpoints                    *[]string
		Resource_group_name               string
		Secondary_master_key              *string
		Secondary_readonly_master_key     *string
		Tags                              *map[string]string
		Virtual_network_rule              *[]map[string]string `puppet:"type => Optional[Array[Struct[id=>String]]]"`
		Write_endpoints                   *[]string
	}

	Data_lake_analytics_account struct {
		Data_lake_analytics_account_id *string `lyra:"tf-gen.ignore"`
		Default_store_account_name     string
		Location                       string
		Name                           string
		Resource_group_name            string
		Tags                           *map[string]string
		Tier                           string `puppet:"value=>'Consumption'"`
	}

	Data_lake_analytics_firewall_rule struct {
		Data_lake_analytics_firewall_rule_id *string `lyra:"tf-gen.ignore"`
		Account_name                         string
		End_ip_address                       string
		Name                                 string
		Resource_group_name                  string
		Start_ip_address                     string
	}

	Data_lake_store struct {
		Data_lake_store_id       *string `lyra:"tf-gen.ignore"`
		Encryption_state         string  `puppet:"value=>'Enabled'"`
		Encryption_type          *string
		Endpoint                 *string
		Firewall_allow_azure_ips string `puppet:"value=>'Enabled'"`
		Firewall_state           string `puppet:"value=>'Enabled'"`
		Location                 string
		Name                     string
		Resource_group_name      string
		Tags                     *map[string]string
		Tier                     string `puppet:"value=>'Consumption'"`
	}

	Data_lake_store_file struct {
		Data_lake_store_file_id *string `lyra:"tf-gen.ignore"`
		Account_name            string
		Local_file_path         string
		Remote_file_path        string
	}

	Data_lake_store_firewall_rule struct {
		Data_lake_store_firewall_rule_id *string `lyra:"tf-gen.ignore"`
		Account_name                     string
		End_ip_address                   string
		Name                             string
		Resource_group_name              string
		Start_ip_address                 string
	}

	Databricks_workspace struct {
		Databricks_workspace_id     *string `lyra:"tf-gen.ignore"`
		Location                    string
		Managed_resource_group_id   *string
		Managed_resource_group_name *string
		Name                        string
		Resource_group_name         string
		Sku                         string
		Tags                        *map[string]string
	}

	Dev_test_lab struct {
		Dev_test_lab_id                      *string `lyra:"tf-gen.ignore"`
		Artifacts_storage_account_id         *string
		Default_premium_storage_account_id   *string
		Default_storage_account_id           *string
		Key_vault_id                         *string
		Location                             string
		Name                                 string
		Premium_data_disk_storage_account_id *string
		Resource_group_name                  string
		Storage_type                         string `puppet:"value=>'Premium'"`
		Tags                                 *map[string]string
		Unique_identifier                    *string
	}

	Dev_test_linux_virtual_machine struct {
		Dev_test_linux_virtual_machine_id *string `lyra:"tf-gen.ignore"`
		Allow_claim                       bool    `puppet:"value=>true"`
		Disallow_public_ip_address        *bool
		Fqdn                              *string
		Gallery_image_reference           []map[string]string       `puppet:"type => Array[Struct[offer=>String,publisher=>String,sku=>String,version=>String]]"`
		Inbound_nat_rule                  *[]map[string]interface{} `puppet:"type => Optional[Array[Struct[backend_port=>Integer,Optional[frontend_port]=>Integer,protocol=>String]]]"`
		Lab_name                          string
		Lab_subnet_name                   string
		Lab_virtual_network_id            string
		Location                          string
		Name                              string
		Notes                             *string
		Password                          *string
		Resource_group_name               string
		Size                              string
		Ssh_key                           *string
		Storage_type                      string
		Tags                              *map[string]string
		Unique_identifier                 *string
		Username                          string
	}

	Dev_test_policy struct {
		Dev_test_policy_id  *string `lyra:"tf-gen.ignore"`
		Description         *string
		Evaluator_type      string
		Fact_data           *string
		Lab_name            string
		Name                string
		Policy_set_name     string
		Resource_group_name string
		Tags                *map[string]string
		Threshold           string
	}

	Dev_test_virtual_network struct {
		Dev_test_virtual_network_id *string `lyra:"tf-gen.ignore"`
		Description                 *string
		Lab_name                    string
		Name                        string
		Resource_group_name         string
		Subnet                      *[]map[string]string `puppet:"type => Optional[Array[Struct[Optional[name]=>String,Optional[use_in_virtual_machine_creation]=>String,Optional[use_public_ip_address]=>String]]]"`
		Tags                        *map[string]string
		Unique_identifier           *string
	}

	Dev_test_windows_virtual_machine struct {
		Dev_test_windows_virtual_machine_id *string `lyra:"tf-gen.ignore"`
		Allow_claim                         bool    `puppet:"value=>true"`
		Disallow_public_ip_address          *bool
		Fqdn                                *string
		Gallery_image_reference             []map[string]string       `puppet:"type => Array[Struct[offer=>String,publisher=>String,sku=>String,version=>String]]"`
		Inbound_nat_rule                    *[]map[string]interface{} `puppet:"type => Optional[Array[Struct[backend_port=>Integer,Optional[frontend_port]=>Integer,protocol=>String]]]"`
		Lab_name                            string
		Lab_subnet_name                     string
		Lab_virtual_network_id              string
		Location                            string
		Name                                string
		Notes                               *string
		Password                            string
		Resource_group_name                 string
		Size                                string
		Storage_type                        string
		Tags                                *map[string]string
		Unique_identifier                   *string
		Username                            string
	}

	Devspace_controller struct {
		Devspace_controller_id                   *string `lyra:"tf-gen.ignore"`
		Data_plane_fqdn                          *string
		Host_suffix                              string
		Location                                 string
		Name                                     string
		Resource_group_name                      string
		Sku                                      []map[string]string `puppet:"type => Array[Struct[name=>String,tier=>String]]"`
		Tags                                     *map[string]string
		Target_container_host_credentials_base64 string
		Target_container_host_resource_id        string
	}

	Dns_a_record struct {
		Dns_a_record_id     *string `lyra:"tf-gen.ignore"`
		Name                string
		Records             []string
		Resource_group_name string
		Tags                *map[string]string
		Ttl                 int64
		Zone_name           string
	}

	Dns_aaaa_record struct {
		Dns_aaaa_record_id  *string `lyra:"tf-gen.ignore"`
		Name                string
		Records             []string
		Resource_group_name string
		Tags                *map[string]string
		Ttl                 int64
		Zone_name           string
	}

	Dns_caa_record struct {
		Dns_caa_record_id   *string `lyra:"tf-gen.ignore"`
		Name                string
		Record              []map[string]interface{} `puppet:"type => Array[Struct[flags=>Integer,tag=>String,value=>String]]"`
		Resource_group_name string
		Tags                *map[string]string
		Ttl                 int64
		Zone_name           string
	}

	Dns_cname_record struct {
		Dns_cname_record_id *string `lyra:"tf-gen.ignore"`
		Name                string
		Record              string
		Records             *string
		Resource_group_name string
		Tags                *map[string]string
		Ttl                 int64
		Zone_name           string
	}

	Dns_mx_record struct {
		Dns_mx_record_id    *string `lyra:"tf-gen.ignore"`
		Name                string
		Record              []map[string]string `puppet:"type => Array[Struct[exchange=>String,preference=>String]]"`
		Resource_group_name string
		Tags                *map[string]string
		Ttl                 int64
		Zone_name           string
	}

	Dns_ns_record struct {
		Dns_ns_record_id    *string `lyra:"tf-gen.ignore"`
		Name                string
		Record              *[]map[string]string `puppet:"type => Optional[Array[Struct[nsdname=>String]]]"`
		Records             *[]string
		Resource_group_name string
		Tags                *map[string]string
		Ttl                 int64
		Zone_name           string
	}

	Dns_ptr_record struct {
		Dns_ptr_record_id   *string `lyra:"tf-gen.ignore"`
		Name                string
		Records             []string
		Resource_group_name string
		Tags                *map[string]string
		Ttl                 int64
		Zone_name           string
	}

	Dns_srv_record struct {
		Dns_srv_record_id   *string `lyra:"tf-gen.ignore"`
		Name                string
		Record              []map[string]interface{} `puppet:"type => Array[Struct[port=>Integer,priority=>Integer,target=>String,weight=>Integer]]"`
		Resource_group_name string
		Tags                *map[string]string
		Ttl                 int64
		Zone_name           string
	}

	Dns_txt_record struct {
		Dns_txt_record_id   *string `lyra:"tf-gen.ignore"`
		Name                string
		Record              []map[string]string `puppet:"type => Array[Struct[value=>String]]"`
		Resource_group_name string
		Tags                *map[string]string
		Ttl                 int64
		Zone_name           string
	}

	Dns_zone struct {
		Dns_zone_id                      *string `lyra:"tf-gen.ignore"`
		Max_number_of_record_sets        *int64
		Name                             string
		Name_servers                     *[]string
		Number_of_record_sets            *int64
		Registration_virtual_network_ids *[]string
		Resolution_virtual_network_ids   *[]string
		Resource_group_name              string
		Tags                             *map[string]string
		Zone_type                        string `puppet:"value=>'Public'"`
	}

	Eventgrid_topic struct {
		Eventgrid_topic_id   *string `lyra:"tf-gen.ignore"`
		Endpoint             *string
		Location             string
		Name                 string
		Primary_access_key   *string
		Resource_group_name  string
		Secondary_access_key *string
		Tags                 *map[string]string
	}

	Eventhub struct {
		Eventhub_id         *string                   `lyra:"tf-gen.ignore"`
		Capture_description *[]map[string]interface{} `puppet:"type => Optional[Array[Struct[destination=>Array[Struct[archive_name_format=>String,blob_container_name=>String,name=>String,storage_account_id=>String]],enabled=>Boolean,encoding=>String,Optional[interval_in_seconds]=>Integer,Optional[size_limit_in_bytes]=>Integer]]]"`
		Location            *string
		Message_retention   int64
		Name                string
		Namespace_name      string
		Partition_count     int64
		Partition_ids       *[]string
		Resource_group_name string
	}

	Eventhub_authorization_rule struct {
		Eventhub_authorization_rule_id *string `lyra:"tf-gen.ignore"`
		Eventhub_name                  string
		Listen                         bool `puppet:"value=>false"`
		Location                       *string
		Manage                         bool `puppet:"value=>false"`
		Name                           string
		Namespace_name                 string
		Primary_connection_string      *string
		Primary_key                    *string
		Resource_group_name            string
		Secondary_connection_string    *string
		Secondary_key                  *string
		Send                           bool `puppet:"value=>false"`
	}

	Eventhub_consumer_group struct {
		Eventhub_consumer_group_id *string `lyra:"tf-gen.ignore"`
		Eventhub_name              string
		Location                   *string
		Name                       string
		Namespace_name             string
		Resource_group_name        string
		User_metadata              *string
	}

	Eventhub_namespace struct {
		Eventhub_namespace_id               *string `lyra:"tf-gen.ignore"`
		Auto_inflate_enabled                bool    `puppet:"value=>false"`
		Capacity                            int64   `puppet:"value=>1"`
		Default_primary_connection_string   *string
		Default_primary_key                 *string
		Default_secondary_connection_string *string
		Default_secondary_key               *string
		Kafka_enabled                       bool `puppet:"value=>false"`
		Location                            string
		Maximum_throughput_units            *int64
		Name                                string
		Resource_group_name                 string
		Sku                                 string
		Tags                                *map[string]string
	}

	Eventhub_namespace_authorization_rule struct {
		Eventhub_namespace_authorization_rule_id *string `lyra:"tf-gen.ignore"`
		Listen                                   bool    `puppet:"value=>false"`
		Location                                 *string
		Manage                                   bool `puppet:"value=>false"`
		Name                                     string
		Namespace_name                           string
		Primary_connection_string                *string
		Primary_key                              *string
		Resource_group_name                      string
		Secondary_connection_string              *string
		Secondary_key                            *string
		Send                                     bool `puppet:"value=>false"`
	}

	Express_route_circuit struct {
		Express_route_circuit_id            *string `lyra:"tf-gen.ignore"`
		Allow_classic_operations            bool    `puppet:"value=>false"`
		Bandwidth_in_mbps                   int64
		Location                            string
		Name                                string
		Peering_location                    string
		Resource_group_name                 string
		Service_key                         *string
		Service_provider_name               string
		Service_provider_provisioning_state *string
		Sku                                 []map[string]string `puppet:"type => Array[Struct[family=>String,tier=>String]]"`
		Tags                                *map[string]string
	}

	Express_route_circuit_authorization struct {
		Express_route_circuit_authorization_id *string `lyra:"tf-gen.ignore"`
		Authorization_key                      *string
		Authorization_use_status               *string
		Express_route_circuit_name             string
		Name                                   string
		Resource_group_name                    string
	}

	Express_route_circuit_peering struct {
		Express_route_circuit_peering_id *string `lyra:"tf-gen.ignore"`
		Azure_asn                        *int64
		Express_route_circuit_name       string
		Microsoft_peering_config         *[]map[string][]interface{} `puppet:"type => Optional[Array[Struct[advertised_public_prefixes=>Array[String]]]]"`
		Peer_asn                         *int64
		Peering_type                     string
		Primary_azure_port               *string
		Primary_peer_address_prefix      string
		Resource_group_name              string
		Secondary_azure_port             *string
		Secondary_peer_address_prefix    string
		Shared_key                       *string
		Vlan_id                          int64
	}

	Firewall struct {
		Firewall_id         *string             `lyra:"tf-gen.ignore"`
		Ip_configuration    []map[string]string `puppet:"type => Array[Struct[name=>String,Optional[private_ip_address]=>String,Optional[public_ip_address_id]=>String,subnet_id=>String]]"`
		Location            string
		Name                string
		Resource_group_name string
		Tags                *map[string]string
	}

	Firewall_application_rule_collection struct {
		Firewall_application_rule_collection_id *string `lyra:"tf-gen.ignore"`
		Action                                  string
		Azure_firewall_name                     string
		Name                                    string
		Priority                                int64
		Resource_group_name                     string
		Rule                                    []map[string]interface{} `puppet:"type => Array[Struct[Optional[description]=>String,Optional[fqdn_tags]=>Array[String],name=>String,Optional[protocol]=>Array[Struct[Optional[port]=>Integer,type=>String]],source_addresses=>Array[String],Optional[target_fqdns]=>Array[String]]]"`
	}

	Firewall_network_rule_collection struct {
		Firewall_network_rule_collection_id *string `lyra:"tf-gen.ignore"`
		Action                              string
		Azure_firewall_name                 string
		Name                                string
		Priority                            int64
		Resource_group_name                 string
		Rule                                []map[string]interface{} `puppet:"type => Array[Struct[Optional[description]=>String,destination_addresses=>Array[String],destination_ports=>Array[String],name=>String,protocols=>Array[String],source_addresses=>Array[String]]]"`
	}

	Function_app struct {
		Function_app_id           *string `lyra:"tf-gen.ignore"`
		App_service_plan_id       string
		App_settings              *map[string]string
		Client_affinity_enabled   *bool
		Connection_string         *[]map[string]string `puppet:"type => Optional[Array[Struct[name=>String,type=>String,value=>String]]]"`
		Default_hostname          *string
		Enable_builtin_logging    bool                 `puppet:"value=>true"`
		Enabled                   bool                 `puppet:"value=>true"`
		Https_only                bool                 `puppet:"value=>false"`
		Identity                  *[]map[string]string `puppet:"type => Optional[Array[Struct[Optional[principal_id]=>String,Optional[tenant_id]=>String,type=>String]]]"`
		Location                  string
		Name                      string
		Outbound_ip_addresses     *string
		Resource_group_name       string
		Site_config               *[]map[string]bool   `puppet:"type => Optional[Array[Struct[Optional[always_on]=>Boolean,Optional[use_32_bit_worker_process]=>Boolean,Optional[websockets_enabled]=>Boolean]]]"`
		Site_credential           *[]map[string]string `puppet:"type => Optional[Array[Struct[Optional[password]=>String,Optional[username]=>String]]]"`
		Storage_connection_string string
		Tags                      *map[string]string
		Version                   string `puppet:"value=>'~1'"`
	}

	Image struct {
		Image_id                  *string                   `lyra:"tf-gen.ignore"`
		Data_disk                 *[]map[string]interface{} `puppet:"type => Optional[Array[Struct[Optional[blob_uri]=>String,Optional[caching]=>String,Optional[lun]=>Integer,Optional[managed_disk_id]=>String,Optional[size_gb]=>Integer]]]"`
		Location                  string
		Name                      string
		Os_disk                   *[]map[string]interface{} `puppet:"type => Optional[Array[Struct[Optional[blob_uri]=>String,Optional[caching]=>String,Optional[managed_disk_id]=>String,Optional[os_state]=>String,Optional[os_type]=>String,Optional[size_gb]=>Integer]]]"`
		Resource_group_name       string
		Source_virtual_machine_id *string
		Tags                      *map[string]string
	}

	Iothub struct {
		Iothub_id                     *string                   `lyra:"tf-gen.ignore"`
		Endpoint                      *[]map[string]interface{} `puppet:"type => Optional[Array[Struct[Optional[batch_frequency_in_seconds]=>Integer,connection_string=>String,Optional[container_name]=>String,Optional[encoding]=>String,Optional[file_name_format]=>String,Optional[max_chunk_size_in_bytes]=>Integer,name=>String,type=>String]]]"`
		Event_hub_events_endpoint     *string
		Event_hub_events_path         *string
		Event_hub_operations_endpoint *string
		Event_hub_operations_path     *string
		Hostname                      *string
		Location                      string
		Name                          string
		Resource_group_name           string
		Route                         *[]map[string]interface{} `puppet:"type => Optional[Array[Struct[Optional[condition]=>String,enabled=>Boolean,endpoint_names=>Array[String],name=>String,source=>String]]]"`
		Shared_access_policy          *[]map[string]string      `puppet:"type => Optional[Array[Struct[Optional[key_name]=>String,Optional[permissions]=>String,Optional[primary_key]=>String,Optional[secondary_key]=>String]]]"`
		Sku                           []map[string]interface{}  `puppet:"type => Array[Struct[capacity=>Integer,name=>String,tier=>String]]"`
		Tags                          *map[string]string
		Type                          *string
	}

	Iothub_consumer_group struct {
		Iothub_consumer_group_id *string `lyra:"tf-gen.ignore"`
		Eventhub_endpoint_name   string
		Iothub_name              string
		Name                     string
		Resource_group_name      string
	}

	Key_vault struct {
		Key_vault_id                    *string                   `lyra:"tf-gen.ignore"`
		Access_policy                   *[]map[string]interface{} `puppet:"type => Optional[Array[Struct[Optional[application_id]=>String,Optional[certificate_permissions]=>Array[String],Optional[key_permissions]=>Array[String],object_id=>String,Optional[secret_permissions]=>Array[String],tenant_id=>String]]]"`
		Enabled_for_deployment          *bool
		Enabled_for_disk_encryption     *bool
		Enabled_for_template_deployment *bool
		Location                        string
		Name                            string
		Network_acls                    *[]map[string]interface{} `puppet:"type => Optional[Array[Struct[bypass=>String,default_action=>String,Optional[ip_rules]=>Array[String],Optional[virtual_network_subnet_ids]=>Array[String]]]]"`
		Resource_group_name             string
		Sku                             []map[string]string `puppet:"type => Array[Struct[name=>String]]"`
		Tags                            *map[string]string
		Tenant_id                       string
		Vault_uri                       *string
	}

	Key_vault_access_policy struct {
		Key_vault_access_policy_id *string `lyra:"tf-gen.ignore"`
		Application_id             *string
		Certificate_permissions    *[]string
		Key_permissions            *[]string
		Object_id                  string
		Resource_group_name        string
		Secret_permissions         *[]string
		Tenant_id                  string
		Vault_name                 string
	}

	Key_vault_certificate struct {
		Key_vault_certificate_id *string              `lyra:"tf-gen.ignore"`
		Certificate              *[]map[string]string `puppet:"type => Optional[Array[Struct[contents=>String,Optional[password]=>String]]]"`
		Certificate_data         *string
		Certificate_policy       []map[string][]interface{} `puppet:"type => Array[Struct[issuer_parameters=>Array[Struct[name=>String]],key_properties=>Array[Struct[exportable=>Boolean,key_size=>Integer,key_type=>String,reuse_key=>Boolean]],Optional[lifetime_action]=>Array[Struct[action=>Array[Struct[action_type=>String]],trigger=>Array[Struct[Optional[days_before_expiry]=>Integer,Optional[lifetime_percentage]=>Integer]]]],secret_properties=>Array[Struct[content_type=>String]],Optional[x509_certificate_properties]=>Array[Struct[Optional[extended_key_usage]=>Array[String],key_usage=>Array[String],subject=>String,Optional[subject_alternative_names]=>Array[Struct[Optional[dns_names]=>Array[String],Optional[emails]=>Array[String],Optional[upns]=>Array[String]]],validity_in_months=>Integer]]]]"`
		Name                     string
		Secret_id                *string
		Tags                     *map[string]string
		Thumbprint               *string
		Vault_uri                string
		Version                  *string
	}

	Key_vault_key struct {
		Key_vault_key_id *string `lyra:"tf-gen.ignore"`
		E                *string
		Key_opts         []string
		Key_size         int64
		Key_type         string
		N                *string
		Name             string
		Tags             *map[string]string
		Vault_uri        string
		Version          *string
	}

	Key_vault_secret struct {
		Key_vault_secret_id *string `lyra:"tf-gen.ignore"`
		Content_type        *string
		Name                string
		Tags                *map[string]string
		Value               string
		Vault_uri           string
		Version             *string
	}

	Kubernetes_cluster struct {
		Kubernetes_cluster_id     *string                     `lyra:"tf-gen.ignore"`
		Addon_profile             *[]map[string][]interface{} `puppet:"type => Optional[Array[Struct[Optional[aci_connector_linux]=>Array[Struct[enabled=>Boolean,subnet_name=>String]],Optional[http_application_routing]=>Array[Struct[enabled=>Boolean,Optional[http_application_routing_zone_name]=>String]],Optional[oms_agent]=>Array[Struct[enabled=>Boolean,log_analytics_workspace_id=>String]]]]]"`
		Agent_pool_profile        []map[string]interface{}    `puppet:"type => Array[Struct[Optional[count]=>Integer,Optional[max_pods]=>Integer,name=>String,Optional[os_disk_size_gb]=>Integer,Optional[os_type]=>String,vm_size=>String,Optional[vnet_subnet_id]=>String]]"`
		Dns_prefix                string
		Fqdn                      *string
		Kube_admin_config         *[]map[string]string `puppet:"type => Optional[Array[Struct[Optional[client_certificate]=>String,Optional[client_key]=>String,Optional[cluster_ca_certificate]=>String,Optional[host]=>String,Optional[password]=>String,Optional[username]=>String]]]"`
		Kube_admin_config_raw     *string
		Kube_config               *[]map[string]string `puppet:"type => Optional[Array[Struct[Optional[client_certificate]=>String,Optional[client_key]=>String,Optional[cluster_ca_certificate]=>String,Optional[host]=>String,Optional[password]=>String,Optional[username]=>String]]]"`
		Kube_config_raw           *string
		Kubernetes_version        *string
		Linux_profile             *[]map[string]interface{} `puppet:"type => Optional[Array[Struct[admin_username=>String,ssh_key=>Array[Struct[key_data=>String]]]]]"`
		Location                  string
		Name                      string
		Network_profile           *[]map[string]string `puppet:"type => Optional[Array[Struct[Optional[dns_service_ip]=>String,Optional[docker_bridge_cidr]=>String,network_plugin=>String,Optional[pod_cidr]=>String,Optional[service_cidr]=>String]]]"`
		Node_resource_group       *string
		Resource_group_name       string
		Role_based_access_control *[]map[string]interface{} `puppet:"type => Optional[Array[Struct[Optional[azure_active_directory]=>Array[Struct[client_app_id=>String,server_app_id=>String,server_app_secret=>String,Optional[tenant_id]=>String]],enabled=>Boolean]]]"`
		Service_principal         []map[string]string       `puppet:"type => Array[Struct[client_id=>String,client_secret=>String]]"`
		Tags                      *map[string]string
	}

	Lb struct {
		Lb_id                     *string                   `lyra:"tf-gen.ignore"`
		Frontend_ip_configuration *[]map[string]interface{} `puppet:"type => Optional[Array[Struct[Optional[inbound_nat_rules]=>Array[String],Optional[load_balancer_rules]=>Array[String],name=>String,Optional[private_ip_address]=>String,Optional[private_ip_address_allocation]=>String,Optional[public_ip_address_id]=>String,Optional[subnet_id]=>String,Optional[zones]=>Array[String]]]]"`
		Location                  string
		Name                      string
		Private_ip_address        *string
		Private_ip_addresses      *[]string
		Resource_group_name       string
		Sku                       string `puppet:"value=>'Basic'"`
		Tags                      *map[string]string
	}

	Lb_backend_address_pool struct {
		Lb_backend_address_pool_id *string `lyra:"tf-gen.ignore"`
		Backend_ip_configurations  *[]string
		Load_balancing_rules       *[]string
		Loadbalancer_id            string
		Location                   *string
		Name                       string
		Resource_group_name        string
	}

	Lb_nat_pool struct {
		Lb_nat_pool_id                 *string `lyra:"tf-gen.ignore"`
		Backend_port                   int64
		Frontend_ip_configuration_id   *string
		Frontend_ip_configuration_name string
		Frontend_port_end              int64
		Frontend_port_start            int64
		Loadbalancer_id                string
		Location                       *string
		Name                           string
		Protocol                       string
		Resource_group_name            string
	}

	Lb_nat_rule struct {
		Lb_nat_rule_id                 *string `lyra:"tf-gen.ignore"`
		Backend_ip_configuration_id    *string
		Backend_port                   int64
		Enable_floating_ip             *bool
		Frontend_ip_configuration_id   *string
		Frontend_ip_configuration_name string
		Frontend_port                  int64
		Loadbalancer_id                string
		Location                       *string
		Name                           string
		Protocol                       string
		Resource_group_name            string
	}

	Lb_probe struct {
		Lb_probe_id         *string `lyra:"tf-gen.ignore"`
		Interval_in_seconds int64   `puppet:"value=>15"`
		Load_balancer_rules *[]string
		Loadbalancer_id     string
		Location            *string
		Name                string
		Number_of_probes    int64 `puppet:"value=>2"`
		Port                int64
		Protocol            *string
		Request_path        *string
		Resource_group_name string
	}

	Lb_rule struct {
		Lb_rule_id                     *string `lyra:"tf-gen.ignore"`
		Backend_address_pool_id        *string
		Backend_port                   int64
		Enable_floating_ip             bool `puppet:"value=>false"`
		Frontend_ip_configuration_id   *string
		Frontend_ip_configuration_name string
		Frontend_port                  int64
		Idle_timeout_in_minutes        *int64
		Load_distribution              *string
		Loadbalancer_id                string
		Location                       *string
		Name                           string
		Probe_id                       *string
		Protocol                       string
		Resource_group_name            string
	}

	Local_network_gateway struct {
		Local_network_gateway_id *string `lyra:"tf-gen.ignore"`
		Address_space            []string
		Bgp_settings             *[]map[string]interface{} `puppet:"type => Optional[Array[Struct[asn=>Integer,bgp_peering_address=>String,Optional[peer_weight]=>Integer]]]"`
		Gateway_address          string
		Location                 string
		Name                     string
		Resource_group_name      string
		Tags                     *map[string]string
	}

	Log_analytics_solution struct {
		Log_analytics_solution_id *string `lyra:"tf-gen.ignore"`
		Location                  string
		Plan                      []map[string]string `puppet:"type => Array[Struct[Optional[name]=>String,product=>String,Optional[promotion_code]=>String,publisher=>String]]"`
		Resource_group_name       string
		Solution_name             string
		Workspace_name            string
		Workspace_resource_id     string
	}

	Log_analytics_workspace struct {
		Log_analytics_workspace_id *string `lyra:"tf-gen.ignore"`
		Location                   string
		Name                       string
		Portal_url                 *string
		Primary_shared_key         *string
		Resource_group_name        string
		Retention_in_days          *int64
		Secondary_shared_key       *string
		Sku                        string
		Tags                       *map[string]string
		Workspace_id               *string
	}

	Log_analytics_workspace_linked_service struct {
		Log_analytics_workspace_linked_service_id *string                      `lyra:"tf-gen.ignore"`
		Linked_service_name                       string                       `puppet:"value=>'automation'"`
		Linked_service_properties                 map[string]map[string]string `puppet:"type => Hash[String,Struct[resource_id=>String]]"`
		Name                                      *string
		Resource_group_name                       string
		Tags                                      *map[string]string
		Workspace_name                            string
	}

	Logic_app_action_custom struct {
		Logic_app_action_custom_id *string `lyra:"tf-gen.ignore"`
		Body                       string
		Logic_app_id               string
		Name                       string
	}

	Logic_app_action_http struct {
		Logic_app_action_http_id *string `lyra:"tf-gen.ignore"`
		Body                     *string
		Headers                  *map[string]string
		Logic_app_id             string
		Method                   string
		Name                     string
		Uri                      string
	}

	Logic_app_trigger_custom struct {
		Logic_app_trigger_custom_id *string `lyra:"tf-gen.ignore"`
		Body                        string
		Logic_app_id                string
		Name                        string
	}

	Logic_app_trigger_http_request struct {
		Logic_app_trigger_http_request_id *string `lyra:"tf-gen.ignore"`
		Logic_app_id                      string
		Method                            *string
		Name                              string
		Relative_path                     *string
		Schema                            string
	}

	Logic_app_trigger_recurrence struct {
		Logic_app_trigger_recurrence_id *string `lyra:"tf-gen.ignore"`
		Frequency                       string
		Interval                        int64
		Logic_app_id                    string
		Name                            string
	}

	Logic_app_workflow struct {
		Logic_app_workflow_id *string `lyra:"tf-gen.ignore"`
		Access_endpoint       *string
		Location              string
		Name                  string
		Parameters            *map[string]string
		Resource_group_name   string
		Tags                  *map[string]string
		Workflow_schema       string `puppet:"value=>'https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#'"`
		Workflow_version      string `puppet:"value=>'1.0.0.0'"`
	}

	Managed_disk struct {
		Managed_disk_id      *string `lyra:"tf-gen.ignore"`
		Create_option        string
		Disk_size_gb         *int64
		Encryption_settings  *[]map[string]interface{} `puppet:"type => Optional[Array[Struct[Optional[disk_encryption_key]=>Array[Struct[secret_url=>String,source_vault_id=>String]],enabled=>Boolean,Optional[key_encryption_key]=>Array[Struct[key_url=>String,source_vault_id=>String]]]]]"`
		Image_reference_id   *string
		Location             string
		Name                 string
		Os_type              *string
		Resource_group_name  string
		Source_resource_id   *string
		Source_uri           *string
		Storage_account_type string
		Tags                 *map[string]string
		Zones                *[]string
	}

	Management_group struct {
		Management_group_id        *string `lyra:"tf-gen.ignore"`
		Display_name               *string
		Group_id                   *string
		Parent_management_group_id *string
		Subscription_ids           *[]string
	}

	Management_lock struct {
		Management_lock_id *string `lyra:"tf-gen.ignore"`
		Lock_level         string
		Name               string
		Notes              *string
		Scope              string
	}

	Mariadb_database struct {
		Mariadb_database_id *string `lyra:"tf-gen.ignore"`
		Charset             string
		Collation           string
		Name                string
		Resource_group_name string
		Server_name         string
	}

	Mariadb_server struct {
		Mariadb_server_id            *string `lyra:"tf-gen.ignore"`
		Administrator_login          string
		Administrator_login_password string
		Fqdn                         *string
		Location                     string
		Name                         string
		Resource_group_name          string
		Sku                          []map[string]interface{} `puppet:"type => Array[Struct[capacity=>Integer,family=>String,name=>String,tier=>String]]"`
		Ssl_enforcement              string
		Storage_profile              []map[string]interface{} `puppet:"type => Array[Struct[Optional[backup_retention_days]=>Integer,Optional[geo_redundant_backup]=>String,storage_mb=>Integer]]"`
		Tags                         *map[string]string
		Version                      string
	}

	Metric_alertrule struct {
		Metric_alertrule_id *string `lyra:"tf-gen.ignore"`
		Aggregation         string
		Description         *string
		Email_action        *[]map[string]interface{} `puppet:"type => Optional[Array[Struct[Optional[custom_emails]=>Array[String],Optional[send_to_service_owners]=>Boolean]]]"`
		Enabled             bool                      `puppet:"value=>true"`
		Location            string
		Metric_name         string
		Name                string
		Operator            string
		Period              string
		Resource_group_name string
		Resource_id         string
		Tags                *map[string]string
		Threshold           float64
		Webhook_action      *[]map[string]interface{} `puppet:"type => Optional[Array[Struct[Optional[properties]=>Hash[String,String],service_uri=>String]]]"`
	}

	Monitor_action_group struct {
		Monitor_action_group_id *string              `lyra:"tf-gen.ignore"`
		Email_receiver          *[]map[string]string `puppet:"type => Optional[Array[Struct[email_address=>String,name=>String]]]"`
		Enabled                 bool                 `puppet:"value=>true"`
		Name                    string
		Resource_group_name     string
		Short_name              string
		Sms_receiver            *[]map[string]string `puppet:"type => Optional[Array[Struct[country_code=>String,name=>String,phone_number=>String]]]"`
		Tags                    *map[string]string
		Webhook_receiver        *[]map[string]string `puppet:"type => Optional[Array[Struct[name=>String,service_uri=>String]]]"`
	}

	Monitor_activity_log_alert struct {
		Monitor_activity_log_alert_id *string                   `lyra:"tf-gen.ignore"`
		Action                        *[]map[string]interface{} `puppet:"type => Optional[Array[Struct[action_group_id=>String,Optional[webhook_properties]=>Hash[String,String]]]]"`
		Criteria                      []map[string]string       `puppet:"type => Array[Struct[Optional[caller]=>String,category=>String,Optional[level]=>String,Optional[operation_name]=>String,Optional[resource_group]=>String,Optional[resource_id]=>String,Optional[resource_provider]=>String,Optional[resource_type]=>String,Optional[status]=>String,Optional[sub_status]=>String]]"`
		Description                   *string
		Enabled                       bool `puppet:"value=>true"`
		Name                          string
		Resource_group_name           string
		Scopes                        []string
		Tags                          *map[string]string
	}

	Monitor_diagnostic_setting struct {
		Monitor_diagnostic_setting_id  *string `lyra:"tf-gen.ignore"`
		Eventhub_authorization_rule_id *string
		Eventhub_name                  *string
		Log                            *[]map[string]interface{} `puppet:"type => Optional[Array[Struct[category=>String,Optional[enabled]=>Boolean,retention_policy=>Array[Struct[Optional[days]=>Integer,enabled=>Boolean]]]]]"`
		Log_analytics_workspace_id     *string
		Metric                         *[]map[string]interface{} `puppet:"type => Optional[Array[Struct[category=>String,Optional[enabled]=>Boolean,retention_policy=>Array[Struct[Optional[days]=>Integer,enabled=>Boolean]]]]]"`
		Name                           string
		Storage_account_id             *string
		Target_resource_id             string
	}

	Monitor_log_profile struct {
		Monitor_log_profile_id *string `lyra:"tf-gen.ignore"`
		Categories             []string
		Locations              []string
		Name                   string
		Retention_policy       []map[string]interface{} `puppet:"type => Array[Struct[Optional[days]=>Integer,enabled=>Boolean]]"`
		Servicebus_rule_id     *string
		Storage_account_id     *string
	}

	Monitor_metric_alert struct {
		Monitor_metric_alert_id *string                   `lyra:"tf-gen.ignore"`
		Action                  *[]map[string]interface{} `puppet:"type => Optional[Array[Struct[action_group_id=>String,Optional[webhook_properties]=>Hash[String,String]]]]"`
		Auto_mitigate           bool                      `puppet:"value=>false"`
		Criteria                []map[string]interface{}  `puppet:"type => Array[Struct[aggregation=>String,Optional[dimension]=>Array[Struct[name=>String,operator=>String,values=>Array[String]]],metric_name=>String,metric_namespace=>String,operator=>String,threshold=>Float]]"`
		Description             *string
		Enabled                 bool   `puppet:"value=>true"`
		Frequency               string `puppet:"value=>'PT1M'"`
		Name                    string
		Resource_group_name     string
		Scopes                  []string
		Severity                int64 `puppet:"value=>3"`
		Tags                    *map[string]string
		Window_size             string `puppet:"value=>'PT5M'"`
	}

	Mssql_elasticpool struct {
		Mssql_elasticpool_id    *string                   `lyra:"tf-gen.ignore"`
		Elastic_pool_properties *[]map[string]interface{} `puppet:"type => Optional[Array[Struct[]]]"`
		Location                string
		Max_size_bytes          *int64
		Name                    string
		Per_database_settings   []map[string]float64 `puppet:"type => Array[Struct[max_capacity=>Float,min_capacity=>Float]]"`
		Resource_group_name     string
		Server_name             string
		Sku                     []map[string]interface{} `puppet:"type => Array[Struct[capacity=>Integer,Optional[family]=>String,name=>String,tier=>String]]"`
		Tags                    *map[string]string
		Zone_redundant          *bool
	}

	Mysql_configuration struct {
		Mysql_configuration_id *string `lyra:"tf-gen.ignore"`
		Name                   string
		Resource_group_name    string
		Server_name            string
		Value                  string
	}

	Mysql_database struct {
		Mysql_database_id   *string `lyra:"tf-gen.ignore"`
		Charset             string
		Collation           string
		Name                string
		Resource_group_name string
		Server_name         string
	}

	Mysql_firewall_rule struct {
		Mysql_firewall_rule_id *string `lyra:"tf-gen.ignore"`
		End_ip_address         string
		Name                   string
		Resource_group_name    string
		Server_name            string
		Start_ip_address       string
	}

	Mysql_server struct {
		Mysql_server_id              *string `lyra:"tf-gen.ignore"`
		Administrator_login          string
		Administrator_login_password string
		Fqdn                         *string
		Location                     string
		Name                         string
		Resource_group_name          string
		Sku                          []map[string]interface{} `puppet:"type => Array[Struct[capacity=>Integer,family=>String,name=>String,tier=>String]]"`
		Ssl_enforcement              string
		Storage_profile              []map[string]interface{} `puppet:"type => Array[Struct[Optional[backup_retention_days]=>Integer,Optional[geo_redundant_backup]=>String,storage_mb=>Integer]]"`
		Tags                         *map[string]string
		Version                      string
	}

	Mysql_virtual_network_rule struct {
		Mysql_virtual_network_rule_id *string `lyra:"tf-gen.ignore"`
		Name                          string
		Resource_group_name           string
		Server_name                   string
		Subnet_id                     string
	}

	Network_interface struct {
		Network_interface_id          *string `lyra:"tf-gen.ignore"`
		Applied_dns_servers           *[]string
		Dns_servers                   *[]string
		Enable_accelerated_networking bool `puppet:"value=>false"`
		Enable_ip_forwarding          bool `puppet:"value=>false"`
		Internal_dns_name_label       *string
		Internal_fqdn                 *string
		Ip_configuration              []map[string]interface{} `puppet:"type => Array[Struct[Optional[application_security_group_ids]=>Array[String],name=>String,Optional[primary]=>Boolean,Optional[private_ip_address]=>String,private_ip_address_allocation=>String,Optional[private_ip_address_version]=>String,Optional[public_ip_address_id]=>String,Optional[subnet_id]=>String]]"`
		Location                      string
		Mac_address                   *string
		Name                          string
		Network_security_group_id     *string
		Private_ip_address            *string
		Private_ip_addresses          *[]string
		Resource_group_name           string
		Tags                          *map[string]string
		Virtual_machine_id            *string
	}

	Network_interface_application_gateway_backend_address_pool_association struct {
		Network_interface_application_gateway_backend_address_pool_association_id *string `lyra:"tf-gen.ignore"`
		Backend_address_pool_id                                                   string
		Ip_configuration_name                                                     string
		Network_interface_id                                                      string
	}

	Network_interface_backend_address_pool_association struct {
		Network_interface_backend_address_pool_association_id *string `lyra:"tf-gen.ignore"`
		Backend_address_pool_id                               string
		Ip_configuration_name                                 string
		Network_interface_id                                  string
	}

	Network_interface_nat_rule_association struct {
		Network_interface_nat_rule_association_id *string `lyra:"tf-gen.ignore"`
		Ip_configuration_name                     string
		Nat_rule_id                               string
		Network_interface_id                      string
	}

	Network_security_group struct {
		Network_security_group_id *string `lyra:"tf-gen.ignore"`
		Location                  string
		Name                      string
		Resource_group_name       string
		Security_rule             *[]map[string]interface{} `puppet:"type => Optional[Array[Struct[access=>String,Optional[description]=>String,Optional[destination_address_prefix]=>String,Optional[destination_address_prefixes]=>Array[String],Optional[destination_application_security_group_ids]=>Array[String],Optional[destination_port_range]=>String,Optional[destination_port_ranges]=>Array[String],direction=>String,name=>String,priority=>Integer,protocol=>String,Optional[source_address_prefix]=>String,Optional[source_address_prefixes]=>Array[String],Optional[source_application_security_group_ids]=>Array[String],Optional[source_port_range]=>String,Optional[source_port_ranges]=>Array[String]]]]"`
		Tags                      *map[string]string
	}

	Network_security_rule struct {
		Network_security_rule_id                   *string `lyra:"tf-gen.ignore"`
		Access                                     string
		Description                                *string
		Destination_address_prefix                 *string
		Destination_address_prefixes               *[]string
		Destination_application_security_group_ids *[]string
		Destination_port_range                     *string
		Destination_port_ranges                    *[]string
		Direction                                  string
		Name                                       string
		Network_security_group_name                string
		Priority                                   int64
		Protocol                                   string
		Resource_group_name                        string
		Source_address_prefix                      *string
		Source_address_prefixes                    *[]string
		Source_application_security_group_ids      *[]string
		Source_port_range                          *string
		Source_port_ranges                         *[]string
	}

	Network_watcher struct {
		Network_watcher_id  *string `lyra:"tf-gen.ignore"`
		Location            string
		Name                string
		Resource_group_name string
		Tags                *map[string]string
	}

	Notification_hub struct {
		Notification_hub_id *string              `lyra:"tf-gen.ignore"`
		Apns_credential     *[]map[string]string `puppet:"type => Optional[Array[Struct[application_mode=>String,bundle_id=>String,key_id=>String,team_id=>String,token=>String]]]"`
		Gcm_credential      *[]map[string]string `puppet:"type => Optional[Array[Struct[api_key=>String]]]"`
		Location            string
		Name                string
		Namespace_name      string
		Resource_group_name string
	}

	Notification_hub_authorization_rule struct {
		Notification_hub_authorization_rule_id *string `lyra:"tf-gen.ignore"`
		Listen                                 bool    `puppet:"value=>false"`
		Manage                                 bool    `puppet:"value=>false"`
		Name                                   string
		Namespace_name                         string
		Notification_hub_name                  string
		Primary_access_key                     *string
		Resource_group_name                    string
		Secondary_access_key                   *string
		Send                                   bool `puppet:"value=>false"`
	}

	Notification_hub_namespace struct {
		Notification_hub_namespace_id *string `lyra:"tf-gen.ignore"`
		Enabled                       bool    `puppet:"value=>true"`
		Location                      string
		Name                          string
		Namespace_type                string
		Resource_group_name           string
		Servicebus_endpoint           *string
		Sku                           []map[string]string `puppet:"type => Array[Struct[name=>String]]"`
	}

	Packet_capture struct {
		Packet_capture_id         *string              `lyra:"tf-gen.ignore"`
		Filter                    *[]map[string]string `puppet:"type => Optional[Array[Struct[Optional[local_ip_address]=>String,Optional[local_port]=>String,protocol=>String,Optional[remote_ip_address]=>String,Optional[remote_port]=>String]]]"`
		Maximum_bytes_per_packet  int64                `puppet:"value=>0"`
		Maximum_bytes_per_session int64                `puppet:"value=>1073741824"`
		Maximum_capture_duration  int64                `puppet:"value=>18000"`
		Name                      string
		Network_watcher_name      string
		Resource_group_name       string
		Storage_location          []map[string]string `puppet:"type => Array[Struct[Optional[file_path]=>String,Optional[storage_account_id]=>String,Optional[storage_path]=>String]]"`
		Target_resource_id        string
	}

	Policy_assignment struct {
		Policy_assignment_id *string `lyra:"tf-gen.ignore"`
		Description          *string
		Display_name         *string
		Identity             *[]map[string]string `puppet:"type => Optional[Array[Struct[Optional[principal_id]=>String,Optional[tenant_id]=>String,Optional[type]=>String]]]"`
		Location             *string
		Name                 string
		Not_scopes           *[]string
		Parameters           *string
		Policy_definition_id string
		Scope                string
	}

	Policy_definition struct {
		Policy_definition_id *string `lyra:"tf-gen.ignore"`
		Description          *string
		Display_name         string
		Management_group_id  *string
		Metadata             *string
		Mode                 string
		Name                 string
		Parameters           *string
		Policy_rule          *string
		Policy_type          string
	}

	Policy_set_definition struct {
		Policy_set_definition_id *string `lyra:"tf-gen.ignore"`
		Description              *string
		Display_name             string
		Management_group_id      *string
		Metadata                 *string
		Name                     string
		Parameters               *string
		Policy_definitions       *string
		Policy_type              string
	}

	Postgresql_configuration struct {
		Postgresql_configuration_id *string `lyra:"tf-gen.ignore"`
		Name                        string
		Resource_group_name         string
		Server_name                 string
		Value                       string
	}

	Postgresql_database struct {
		Postgresql_database_id *string `lyra:"tf-gen.ignore"`
		Charset                string
		Collation              string
		Name                   string
		Resource_group_name    string
		Server_name            string
	}

	Postgresql_firewall_rule struct {
		Postgresql_firewall_rule_id *string `lyra:"tf-gen.ignore"`
		End_ip_address              string
		Name                        string
		Resource_group_name         string
		Server_name                 string
		Start_ip_address            string
	}

	Postgresql_server struct {
		Postgresql_server_id         *string `lyra:"tf-gen.ignore"`
		Administrator_login          string
		Administrator_login_password string
		Fqdn                         *string
		Location                     string
		Name                         string
		Resource_group_name          string
		Sku                          []map[string]interface{} `puppet:"type => Array[Struct[capacity=>Integer,family=>String,name=>String,tier=>String]]"`
		Ssl_enforcement              string
		Storage_profile              []map[string]interface{} `puppet:"type => Array[Struct[Optional[backup_retention_days]=>Integer,Optional[geo_redundant_backup]=>String,storage_mb=>Integer]]"`
		Tags                         *map[string]string
		Version                      string
	}

	Postgresql_virtual_network_rule struct {
		Postgresql_virtual_network_rule_id   *string `lyra:"tf-gen.ignore"`
		Ignore_missing_vnet_service_endpoint *bool
		Name                                 string
		Resource_group_name                  string
		Server_name                          string
		Subnet_id                            string
	}

	Public_ip struct {
		Public_ip_id                 *string `lyra:"tf-gen.ignore"`
		Allocation_method            *string
		Domain_name_label            *string
		Fqdn                         *string
		Idle_timeout_in_minutes      int64 `puppet:"value=>4"`
		Ip_address                   *string
		Ip_version                   string `puppet:"value=>'IPv4'"`
		Location                     string
		Name                         string
		Public_ip_address_allocation *string
		Resource_group_name          string
		Reverse_fqdn                 *string
		Sku                          string `puppet:"value=>'Basic'"`
		Tags                         *map[string]string
		Zones                        *[]string
	}

	Recovery_services_protected_vm struct {
		Recovery_services_protected_vm_id *string `lyra:"tf-gen.ignore"`
		Backup_policy_id                  string
		Recovery_vault_name               string
		Resource_group_name               string
		Source_vm_id                      string
		Tags                              *map[string]string
	}

	Recovery_services_protection_policy_vm struct {
		Recovery_services_protection_policy_vm_id *string                  `lyra:"tf-gen.ignore"`
		Backup                                    []map[string]interface{} `puppet:"type => Array[Struct[frequency=>String,time=>String,Optional[weekdays]=>Array[String]]]"`
		Name                                      string
		Recovery_vault_name                       string
		Resource_group_name                       string
		Retention_daily                           *[]map[string]int64       `puppet:"type => Optional[Array[Struct[count=>Integer]]]"`
		Retention_monthly                         *[]map[string]interface{} `puppet:"type => Optional[Array[Struct[count=>Integer,weekdays=>Array[String],weeks=>Array[String]]]]"`
		Retention_weekly                          *[]map[string]interface{} `puppet:"type => Optional[Array[Struct[count=>Integer,weekdays=>Array[String]]]]"`
		Retention_yearly                          *[]map[string]interface{} `puppet:"type => Optional[Array[Struct[count=>Integer,months=>Array[String],weekdays=>Array[String],weeks=>Array[String]]]]"`
		Tags                                      *map[string]string
		Timezone                                  string `puppet:"value=>'UTC'"`
	}

	Recovery_services_vault struct {
		Recovery_services_vault_id *string `lyra:"tf-gen.ignore"`
		Location                   string
		Name                       string
		Resource_group_name        string
		Sku                        string
		Tags                       *map[string]string
	}

	Redis_cache struct {
		Redis_cache_id            *string `lyra:"tf-gen.ignore"`
		Capacity                  int64
		Enable_non_ssl_port       bool `puppet:"value=>false"`
		Family                    string
		Hostname                  *string
		Location                  string
		Name                      string
		Patch_schedule            *[]map[string]interface{} `puppet:"type => Optional[Array[Struct[day_of_week=>String,Optional[start_hour_utc]=>Integer]]]"`
		Port                      *int64
		Primary_access_key        *string
		Private_static_ip_address *string
		Redis_configuration       []map[string]interface{} `puppet:"type => Array[Struct[Optional[maxclients]=>Integer,Optional[maxmemory_delta]=>Integer,Optional[maxmemory_policy]=>String,Optional[maxmemory_reserved]=>Integer,Optional[notify_keyspace_events]=>String,Optional[rdb_backup_enabled]=>Boolean,Optional[rdb_backup_frequency]=>Integer,Optional[rdb_backup_max_snapshot_count]=>Integer,Optional[rdb_storage_connection_string]=>String]]"`
		Resource_group_name       string
		Secondary_access_key      *string
		Shard_count               *int64
		Sku_name                  string
		Ssl_port                  *int64
		Subnet_id                 *string
		Tags                      *map[string]string
		Zones                     *[]string
	}

	Redis_firewall_rule struct {
		Redis_firewall_rule_id *string `lyra:"tf-gen.ignore"`
		End_ip                 string
		Name                   string
		Redis_cache_name       string
		Resource_group_name    string
		Start_ip               string
	}

	Relay_namespace struct {
		Relay_namespace_id          *string `lyra:"tf-gen.ignore"`
		Location                    string
		Metric_id                   *string
		Name                        string
		Primary_connection_string   *string
		Primary_key                 *string
		Resource_group_name         string
		Secondary_connection_string *string
		Secondary_key               *string
		Sku                         []map[string]string `puppet:"type => Array[Struct[name=>String]]"`
		Tags                        *map[string]string
	}

	Resource_group struct {
		Resource_group_id *string `lyra:"tf-gen.ignore"`
		Location          string
		Name              string
		Tags              *map[string]string
	}

	Role_assignment struct {
		Role_assignment_id   *string `lyra:"tf-gen.ignore"`
		Name                 *string
		Principal_id         string
		Role_definition_id   *string
		Role_definition_name *string
		Scope                string
	}

	Role_definition struct {
		Role_definition_lyra_id *string `lyra:"tf-gen.ignore"`
		Assignable_scopes       []string
		Description             *string
		Name                    string
		Permissions             []map[string]interface{} `puppet:"type => Array[Struct[Optional[actions]=>Array[String],Optional[data_actions]=>Array[String],Optional[not_actions]=>Array[String],Optional[not_data_actions]=>Array[String]]]"`
		Role_definition_id      *string
		Scope                   string
	}

	Route struct {
		Route_id               *string `lyra:"tf-gen.ignore"`
		Address_prefix         string
		Name                   string
		Next_hop_in_ip_address *string
		Next_hop_type          string
		Resource_group_name    string
		Route_table_name       string
	}

	Route_table struct {
		Route_table_id                *string `lyra:"tf-gen.ignore"`
		Disable_bgp_route_propagation bool    `puppet:"value=>false"`
		Location                      string
		Name                          string
		Resource_group_name           string
		Route                         *[]map[string]string `puppet:"type => Optional[Array[Struct[address_prefix=>String,name=>String,Optional[next_hop_in_ip_address]=>String,next_hop_type=>String]]]"`
		Subnets                       *[]string
		Tags                          *map[string]string
	}

	Scheduler_job struct {
		Scheduler_job_id           *string                   `lyra:"tf-gen.ignore"`
		Action_storage_queue       *[]map[string]string      `puppet:"type => Optional[Array[Struct[message=>String,sas_token=>String,storage_account_name=>String,storage_queue_name=>String]]]"`
		Action_web                 *[]map[string]interface{} `puppet:"type => Optional[Array[Struct[Optional[authentication_active_directory]=>Array[Struct[Optional[audience]=>String,client_id=>String,secret=>String,tenant_id=>String]],Optional[authentication_basic]=>Array[Struct[password=>String,username=>String]],Optional[authentication_certificate]=>Array[Struct[Optional[expiration]=>String,password=>String,pfx=>String,Optional[subject_name]=>String,Optional[thumbprint]=>String]],Optional[body]=>String,Optional[headers]=>Hash[String,String],method=>String,url=>String]]]"`
		Error_action_storage_queue *[]map[string]string      `puppet:"type => Optional[Array[Struct[message=>String,sas_token=>String,storage_account_name=>String,storage_queue_name=>String]]]"`
		Error_action_web           *[]map[string]interface{} `puppet:"type => Optional[Array[Struct[Optional[authentication_active_directory]=>Array[Struct[Optional[audience]=>String,client_id=>String,secret=>String,tenant_id=>String]],Optional[authentication_basic]=>Array[Struct[password=>String,username=>String]],Optional[authentication_certificate]=>Array[Struct[Optional[expiration]=>String,password=>String,pfx=>String,Optional[subject_name]=>String,Optional[thumbprint]=>String]],Optional[body]=>String,Optional[headers]=>Hash[String,String],method=>String,url=>String]]]"`
		Job_collection_name        string
		Name                       string
		Recurrence                 *[]map[string]interface{} `puppet:"type => Optional[Array[Struct[Optional[count]=>Integer,Optional[end_time]=>String,frequency=>String,Optional[hours]=>Array[Integer],Optional[interval]=>Integer,Optional[minutes]=>Array[Integer],Optional[month_days]=>Array[Integer],Optional[monthly_occurrences]=>Array[Struct[day=>String,occurrence=>Integer]],Optional[week_days]=>Array[String]]]]"`
		Resource_group_name        string
		Retry                      *[]map[string]interface{} `puppet:"type => Optional[Array[Struct[Optional[count]=>Integer,Optional[interval]=>String]]]"`
		Start_time                 *string
		State                      *string
	}

	Scheduler_job_collection struct {
		Scheduler_job_collection_id *string `lyra:"tf-gen.ignore"`
		Location                    string
		Name                        string
		Quota                       *[]map[string]interface{} `puppet:"type => Optional[Array[Struct[Optional[max_job_count]=>Integer,max_recurrence_frequency=>String,Optional[max_recurrence_interval]=>Integer]]]"`
		Resource_group_name         string
		Sku                         string
		State                       string `puppet:"value=>'Enabled'"`
		Tags                        *map[string]string
	}

	Search_service struct {
		Search_service_id   *string `lyra:"tf-gen.ignore"`
		Location            string
		Name                string
		Partition_count     *int64
		Primary_key         *string
		Replica_count       *int64
		Resource_group_name string
		Secondary_key       *string
		Sku                 string
		Tags                *map[string]string
	}

	Security_center_contact struct {
		Security_center_contact_id *string `lyra:"tf-gen.ignore"`
		Alert_notifications        bool
		Alerts_to_admins           bool
		Email                      string
		Phone                      string
	}

	Security_center_subscription_pricing struct {
		Security_center_subscription_pricing_id *string `lyra:"tf-gen.ignore"`
		Tier                                    string
	}

	Security_center_workspace struct {
		Security_center_workspace_id *string `lyra:"tf-gen.ignore"`
		Scope                        string
		Workspace_id                 string
	}

	Service_fabric_cluster struct {
		Service_fabric_cluster_id     *string `lyra:"tf-gen.ignore"`
		Add_on_features               *[]string
		Azure_active_directory        *[]map[string]string      `puppet:"type => Optional[Array[Struct[client_application_id=>String,cluster_application_id=>String,tenant_id=>String]]]"`
		Certificate                   *[]map[string]string      `puppet:"type => Optional[Array[Struct[thumbprint=>String,Optional[thumbprint_secondary]=>String,x509_store_name=>String]]]"`
		Client_certificate_thumbprint *[]map[string]interface{} `puppet:"type => Optional[Array[Struct[is_admin=>Boolean,thumbprint=>String]]]"`
		Cluster_code_version          *string
		Cluster_endpoint              *string
		Diagnostics_config            *[]map[string]string      `puppet:"type => Optional[Array[Struct[blob_endpoint=>String,protected_account_key_name=>String,queue_endpoint=>String,storage_account_name=>String,table_endpoint=>String]]]"`
		Fabric_settings               *[]map[string]interface{} `puppet:"type => Optional[Array[Struct[name=>String,Optional[parameters]=>Hash[String,String]]]]"`
		Location                      string
		Management_endpoint           string
		Name                          string
		Node_type                     []map[string]interface{} `puppet:"type => Array[Struct[Optional[application_ports]=>Array[Struct[end_port=>Integer,start_port=>Integer]],client_endpoint_port=>Integer,Optional[durability_level]=>String,Optional[ephemeral_ports]=>Array[Struct[end_port=>Integer,start_port=>Integer]],http_endpoint_port=>Integer,instance_count=>Integer,is_primary=>Boolean,name=>String,Optional[reverse_proxy_endpoint_port]=>Integer]]"`
		Reliability_level             string
		Resource_group_name           string
		Reverse_proxy_certificate     *[]map[string]string `puppet:"type => Optional[Array[Struct[thumbprint=>String,Optional[thumbprint_secondary]=>String,x509_store_name=>String]]]"`
		Tags                          *map[string]string
		Upgrade_mode                  string
		Vm_image                      string
	}

	Servicebus_namespace struct {
		Servicebus_namespace_id             *string `lyra:"tf-gen.ignore"`
		Capacity                            *int64
		Default_primary_connection_string   *string
		Default_primary_key                 *string
		Default_secondary_connection_string *string
		Default_secondary_key               *string
		Location                            string
		Name                                string
		Resource_group_name                 string
		Sku                                 string
		Tags                                *map[string]string
	}

	Servicebus_namespace_authorization_rule struct {
		Servicebus_namespace_authorization_rule_id *string `lyra:"tf-gen.ignore"`
		Listen                                     bool    `puppet:"value=>false"`
		Manage                                     bool    `puppet:"value=>false"`
		Name                                       string
		Namespace_name                             string
		Primary_connection_string                  *string
		Primary_key                                *string
		Resource_group_name                        string
		Secondary_connection_string                *string
		Secondary_key                              *string
		Send                                       bool `puppet:"value=>false"`
	}

	Servicebus_queue struct {
		Servicebus_queue_id                     *string `lyra:"tf-gen.ignore"`
		Auto_delete_on_idle                     *string
		Dead_lettering_on_message_expiration    bool `puppet:"value=>false"`
		Default_message_ttl                     *string
		Duplicate_detection_history_time_window *string
		Enable_batched_operations               *bool
		Enable_express                          bool `puppet:"value=>false"`
		Enable_partitioning                     bool `puppet:"value=>false"`
		Location                                *string
		Lock_duration                           *string
		Max_delivery_count                      int64 `puppet:"value=>10"`
		Max_size_in_megabytes                   *int64
		Name                                    string
		Namespace_name                          string
		Requires_duplicate_detection            bool `puppet:"value=>false"`
		Requires_session                        bool `puppet:"value=>false"`
		Resource_group_name                     string
		Support_ordering                        *bool
	}

	Servicebus_queue_authorization_rule struct {
		Servicebus_queue_authorization_rule_id *string `lyra:"tf-gen.ignore"`
		Listen                                 bool    `puppet:"value=>false"`
		Manage                                 bool    `puppet:"value=>false"`
		Name                                   string
		Namespace_name                         string
		Primary_connection_string              *string
		Primary_key                            *string
		Queue_name                             string
		Resource_group_name                    string
		Secondary_connection_string            *string
		Secondary_key                          *string
		Send                                   bool `puppet:"value=>false"`
	}

	Servicebus_subscription struct {
		Servicebus_subscription_id                     *string `lyra:"tf-gen.ignore"`
		Auto_delete_on_idle                            *string
		Dead_lettering_on_filter_evaluation_exceptions *bool
		Dead_lettering_on_message_expiration           *bool
		Default_message_ttl                            *string
		Enable_batched_operations                      *bool
		Forward_to                                     *string
		Location                                       *string
		Lock_duration                                  *string
		Max_delivery_count                             int64
		Name                                           string
		Namespace_name                                 string
		Requires_session                               *bool
		Resource_group_name                            string
		Topic_name                                     string
	}

	Servicebus_subscription_rule struct {
		Servicebus_subscription_rule_id *string `lyra:"tf-gen.ignore"`
		Action                          *string
		Correlation_filter              *[]map[string]string `puppet:"type => Optional[Array[Struct[Optional[content_type]=>String,Optional[correlation_id]=>String,Optional[label]=>String,Optional[message_id]=>String,Optional[reply_to]=>String,Optional[reply_to_session_id]=>String,Optional[session_id]=>String,Optional[to]=>String]]]"`
		Filter_type                     string
		Name                            string
		Namespace_name                  string
		Resource_group_name             string
		Sql_filter                      *string
		Subscription_name               string
		Topic_name                      string
	}

	Servicebus_topic struct {
		Servicebus_topic_id                         *string `lyra:"tf-gen.ignore"`
		Auto_delete_on_idle                         *string
		Default_message_ttl                         *string
		Duplicate_detection_history_time_window     *string
		Enable_batched_operations                   *bool
		Enable_express                              *bool
		Enable_filtering_messages_before_publishing *bool
		Enable_partitioning                         *bool
		Location                                    *string
		Max_size_in_megabytes                       *int64
		Name                                        string
		Namespace_name                              string
		Requires_duplicate_detection                *bool
		Resource_group_name                         string
		Status                                      string `puppet:"value=>'Active'"`
		Support_ordering                            *bool
	}

	Servicebus_topic_authorization_rule struct {
		Servicebus_topic_authorization_rule_id *string `lyra:"tf-gen.ignore"`
		Listen                                 bool    `puppet:"value=>false"`
		Manage                                 bool    `puppet:"value=>false"`
		Name                                   string
		Namespace_name                         string
		Primary_connection_string              *string
		Primary_key                            *string
		Resource_group_name                    string
		Secondary_connection_string            *string
		Secondary_key                          *string
		Send                                   bool `puppet:"value=>false"`
		Topic_name                             string
	}

	Shared_image struct {
		Shared_image_id       *string `lyra:"tf-gen.ignore"`
		Description           *string
		Eula                  *string
		Gallery_name          string
		Identifier            []map[string]string `puppet:"type => Array[Struct[offer=>String,publisher=>String,sku=>String]]"`
		Location              string
		Name                  string
		Os_type               string
		Privacy_statement_uri *string
		Release_note_uri      *string
		Resource_group_name   string
		Tags                  *map[string]string
	}

	Shared_image_gallery struct {
		Shared_image_gallery_id *string `lyra:"tf-gen.ignore"`
		Description             *string
		Location                string
		Name                    string
		Resource_group_name     string
		Tags                    *map[string]string
		Unique_name             *string
	}

	Shared_image_version struct {
		Shared_image_version_id *string `lyra:"tf-gen.ignore"`
		Exclude_from_latest     bool    `puppet:"value=>false"`
		Gallery_name            string
		Image_name              string
		Location                string
		Managed_image_id        string
		Name                    string
		Resource_group_name     string
		Tags                    *map[string]string
		Target_region           []map[string]interface{} `puppet:"type => Array[Struct[name=>String,regional_replica_count=>Integer]]"`
	}

	Signalr_service struct {
		Signalr_service_id  *string `lyra:"tf-gen.ignore"`
		Hostname            *string
		Ip_address          *string
		Location            string
		Name                string
		Public_port         *int64
		Resource_group_name string
		Server_port         *int64
		Sku                 []map[string]interface{} `puppet:"type => Array[Struct[capacity=>Integer,name=>String]]"`
		Tags                *map[string]string
	}

	Snapshot struct {
		Snapshot_id         *string `lyra:"tf-gen.ignore"`
		Create_option       string
		Disk_size_gb        *int64
		Encryption_settings *[]map[string]interface{} `puppet:"type => Optional[Array[Struct[Optional[disk_encryption_key]=>Array[Struct[secret_url=>String,source_vault_id=>String]],enabled=>Boolean,Optional[key_encryption_key]=>Array[Struct[key_url=>String,source_vault_id=>String]]]]]"`
		Location            string
		Name                string
		Resource_group_name string
		Source_resource_id  *string
		Source_uri          *string
		Storage_account_id  *string
		Tags                *map[string]string
	}

	Sql_active_directory_administrator struct {
		Sql_active_directory_administrator_id *string `lyra:"tf-gen.ignore"`
		Login                                 string
		Object_id                             string
		Resource_group_name                   string
		Server_name                           string
		Tenant_id                             string
	}

	Sql_database struct {
		Sql_database_id                  *string `lyra:"tf-gen.ignore"`
		Collation                        *string
		Create_mode                      string `puppet:"value=>'Default'"`
		Creation_date                    *string
		Default_secondary_location       *string
		Edition                          *string
		Elastic_pool_name                *string
		Encryption                       *string
		Import                           *[]map[string]string `puppet:"type => Optional[Array[Struct[administrator_login=>String,administrator_login_password=>String,authentication_type=>String,Optional[operation_mode]=>String,storage_key=>String,storage_key_type=>String,storage_uri=>String]]]"`
		Location                         string
		Max_size_bytes                   *string
		Name                             string
		Requested_service_objective_id   *string
		Requested_service_objective_name *string
		Resource_group_name              string
		Restore_point_in_time            *string
		Server_name                      string
		Source_database_deletion_date    *string
		Source_database_id               *string
		Tags                             *map[string]string
		Threat_detection_policy          *[]map[string]interface{} `puppet:"type => Optional[Array[Struct[Optional[disabled_alerts]=>Array[String],Optional[email_account_admins]=>String,Optional[email_addresses]=>Array[String],Optional[retention_days]=>Integer,Optional[state]=>String,Optional[storage_account_access_key]=>String,Optional[storage_endpoint]=>String,Optional[use_server_default]=>String]]]"`
	}

	Sql_elasticpool struct {
		Sql_elasticpool_id  *string `lyra:"tf-gen.ignore"`
		Creation_date       *string
		Db_dtu_max          *int64
		Db_dtu_min          *int64
		Dtu                 int64
		Edition             string
		Location            string
		Name                string
		Pool_size           *int64
		Resource_group_name string
		Server_name         string
		Tags                *map[string]string
	}

	Sql_firewall_rule struct {
		Sql_firewall_rule_id *string `lyra:"tf-gen.ignore"`
		End_ip_address       string
		Name                 string
		Resource_group_name  string
		Server_name          string
		Start_ip_address     string
	}

	Sql_server struct {
		Sql_server_id                *string `lyra:"tf-gen.ignore"`
		Administrator_login          string
		Administrator_login_password string
		Fully_qualified_domain_name  *string
		Location                     string
		Name                         string
		Resource_group_name          string
		Tags                         *map[string]string
		Version                      string
	}

	Sql_virtual_network_rule struct {
		Sql_virtual_network_rule_id          *string `lyra:"tf-gen.ignore"`
		Ignore_missing_vnet_service_endpoint bool    `puppet:"value=>false"`
		Name                                 string
		Resource_group_name                  string
		Server_name                          string
		Subnet_id                            string
	}

	Storage_account struct {
		Storage_account_id               *string `lyra:"tf-gen.ignore"`
		Access_tier                      *string
		Account_encryption_source        string `puppet:"value=>'Microsoft.Storage'"`
		Account_kind                     string `puppet:"value=>'Storage'"`
		Account_replication_type         string
		Account_tier                     string
		Account_type                     *string
		Custom_domain                    *[]map[string]interface{} `puppet:"type => Optional[Array[Struct[name=>String,Optional[use_subdomain]=>Boolean]]]"`
		Enable_blob_encryption           bool                      `puppet:"value=>true"`
		Enable_file_encryption           bool                      `puppet:"value=>true"`
		Enable_https_traffic_only        *bool
		Identity                         *[]map[string]string `puppet:"type => Optional[Array[Struct[Optional[principal_id]=>String,Optional[tenant_id]=>String,type=>String]]]"`
		Location                         string
		Name                             string
		Network_rules                    *[]map[string][]interface{} `puppet:"type => Optional[Array[Struct[Optional[bypass]=>Array[String],Optional[ip_rules]=>Array[String],Optional[virtual_network_subnet_ids]=>Array[String]]]]"`
		Primary_access_key               *string
		Primary_blob_connection_string   *string
		Primary_blob_endpoint            *string
		Primary_connection_string        *string
		Primary_file_endpoint            *string
		Primary_location                 *string
		Primary_queue_endpoint           *string
		Primary_table_endpoint           *string
		Resource_group_name              string
		Secondary_access_key             *string
		Secondary_blob_connection_string *string
		Secondary_blob_endpoint          *string
		Secondary_connection_string      *string
		Secondary_location               *string
		Secondary_queue_endpoint         *string
		Secondary_table_endpoint         *string
		Tags                             *map[string]string
	}

	Storage_blob struct {
		Storage_blob_id        *string `lyra:"tf-gen.ignore"`
		Attempts               int64   `puppet:"value=>1"`
		Content_type           string  `puppet:"value=>'application/octet-stream'"`
		Name                   string
		Parallelism            int64 `puppet:"value=>8"`
		Resource_group_name    string
		Size                   int64 `puppet:"value=>0"`
		Source                 *string
		Source_uri             *string
		Storage_account_name   string
		Storage_container_name string
		Type                   *string
		Url                    *string
	}

	Storage_container struct {
		Storage_container_id  *string `lyra:"tf-gen.ignore"`
		Container_access_type string  `puppet:"value=>'private'"`
		Name                  string
		Properties            *map[string]string
		Resource_group_name   string
		Storage_account_name  string
	}

	Storage_queue struct {
		Storage_queue_id     *string `lyra:"tf-gen.ignore"`
		Name                 string
		Resource_group_name  string
		Storage_account_name string
	}

	Storage_share struct {
		Storage_share_id     *string `lyra:"tf-gen.ignore"`
		Name                 string
		Quota                int64 `puppet:"value=>5120"`
		Resource_group_name  string
		Storage_account_name string
		Url                  *string
	}

	Storage_table struct {
		Storage_table_id     *string `lyra:"tf-gen.ignore"`
		Name                 string
		Resource_group_name  string
		Storage_account_name string
	}

	Subnet struct {
		Subnet_id                 *string `lyra:"tf-gen.ignore"`
		Address_prefix            string
		Delegation                *[]map[string]interface{} `puppet:"type => Optional[Array[Struct[name=>String,service_delegation=>Array[Struct[Optional[actions]=>Array[String],name=>String]]]]]"`
		Ip_configurations         *[]string
		Name                      string
		Network_security_group_id *string
		Resource_group_name       string
		Route_table_id            *string
		Service_endpoints         *[]string
		Virtual_network_name      string
	}

	Subnet_network_security_group_association struct {
		Subnet_network_security_group_association_id *string `lyra:"tf-gen.ignore"`
		Network_security_group_id                    string
		Subnet_id                                    string
	}

	Subnet_route_table_association struct {
		Subnet_route_table_association_id *string `lyra:"tf-gen.ignore"`
		Route_table_id                    string
		Subnet_id                         string
	}

	Template_deployment struct {
		Template_deployment_id *string `lyra:"tf-gen.ignore"`
		Deployment_mode        string
		Name                   string
		Outputs                *map[string]string
		Parameters             *map[string]string
		Parameters_body        *string
		Resource_group_name    string
		Template_body          *string
	}

	Traffic_manager_endpoint struct {
		Traffic_manager_endpoint_id *string `lyra:"tf-gen.ignore"`
		Endpoint_location           *string
		Endpoint_monitor_status     *string
		Endpoint_status             *string
		Geo_mappings                *[]string
		Min_child_endpoints         *int64
		Name                        string
		Priority                    *int64
		Profile_name                string
		Resource_group_name         string
		Target                      *string
		Target_resource_id          *string
		Type                        string
		Weight                      *int64
	}

	Traffic_manager_profile struct {
		Traffic_manager_profile_id *string                  `lyra:"tf-gen.ignore"`
		Dns_config                 []map[string]interface{} `puppet:"type => Array[Struct[relative_name=>String,ttl=>Integer]]"`
		Fqdn                       *string
		Monitor_config             []map[string]interface{} `puppet:"type => Array[Struct[Optional[path]=>String,port=>Integer,protocol=>String]]"`
		Name                       string
		Profile_status             *string
		Resource_group_name        string
		Tags                       *map[string]string
		Traffic_routing_method     string
	}

	User_assigned_identity struct {
		User_assigned_identity_id *string `lyra:"tf-gen.ignore"`
		Client_id                 *string
		Location                  string
		Name                      string
		Principal_id              *string
		Resource_group_name       string
		Tags                      *map[string]string
	}

	Virtual_machine struct {
		Virtual_machine_id               *string `lyra:"tf-gen.ignore"`
		Availability_set_id              *string
		Boot_diagnostics                 *[]map[string]interface{} `puppet:"type => Optional[Array[Struct[enabled=>Boolean,storage_uri=>String]]]"`
		Delete_data_disks_on_termination bool                      `puppet:"value=>false"`
		Delete_os_disk_on_termination    bool                      `puppet:"value=>false"`
		Identity                         *[]map[string]interface{} `puppet:"type => Optional[Array[Struct[Optional[identity_ids]=>Array[String],Optional[principal_id]=>String,type=>String]]]"`
		License_type                     *string
		Location                         string
		Name                             string
		Network_interface_ids            []string
		Os_profile                       *[]map[string]string      `puppet:"type => Optional[Array[Struct[Optional[admin_password]=>String,admin_username=>String,computer_name=>String,Optional[custom_data]=>String]]]"`
		Os_profile_linux_config          *[]map[string]interface{} `puppet:"type => Optional[Array[Struct[disable_password_authentication=>Boolean,Optional[ssh_keys]=>Array[Struct[key_data=>String,path=>String]]]]]"`
		Os_profile_secrets               *[]map[string]interface{} `puppet:"type => Optional[Array[Struct[source_vault_id=>String,Optional[vault_certificates]=>Array[Struct[Optional[certificate_store]=>String,certificate_url=>String]]]]]"`
		Os_profile_windows_config        *[]map[string]interface{} `puppet:"type => Optional[Array[Struct[Optional[additional_unattend_config]=>Array[Struct[component=>String,content=>String,pass=>String,setting_name=>String]],Optional[enable_automatic_upgrades]=>Boolean,Optional[provision_vm_agent]=>Boolean,Optional[timezone]=>String,Optional[winrm]=>Array[Struct[Optional[certificate_url]=>String,protocol=>String]]]]]"`
		Plan                             *[]map[string]string      `puppet:"type => Optional[Array[Struct[name=>String,product=>String,publisher=>String]]]"`
		Primary_network_interface_id     *string
		Resource_group_name              string
		Storage_data_disk                *[]map[string]interface{} `puppet:"type => Optional[Array[Struct[Optional[caching]=>String,create_option=>String,Optional[disk_size_gb]=>Integer,lun=>Integer,Optional[managed_disk_id]=>String,Optional[managed_disk_type]=>String,name=>String,Optional[vhd_uri]=>String,Optional[write_accelerator_enabled]=>Boolean]]]"`
		Storage_image_reference          *[]map[string]string      `puppet:"type => Optional[Array[Struct[Optional[id]=>String,Optional[offer]=>String,Optional[publisher]=>String,Optional[sku]=>String,Optional[version]=>String]]]"`
		Storage_os_disk                  []map[string]interface{}  `puppet:"type => Array[Struct[Optional[caching]=>String,create_option=>String,Optional[disk_size_gb]=>Integer,Optional[image_uri]=>String,Optional[managed_disk_id]=>String,Optional[managed_disk_type]=>String,name=>String,Optional[os_type]=>String,Optional[vhd_uri]=>String,Optional[write_accelerator_enabled]=>Boolean]]"`
		Tags                             *map[string]string
		Vm_size                          string
		Zones                            *[]string
	}

	Virtual_machine_data_disk_attachment struct {
		Virtual_machine_data_disk_attachment_id *string `lyra:"tf-gen.ignore"`
		Caching                                 string
		Create_option                           string `puppet:"value=>'Attach'"`
		Lun                                     int64
		Managed_disk_id                         string
		Virtual_machine_id                      string
		Write_accelerator_enabled               bool `puppet:"value=>false"`
	}

	Virtual_machine_extension struct {
		Virtual_machine_extension_id *string `lyra:"tf-gen.ignore"`
		Auto_upgrade_minor_version   *bool
		Location                     string
		Name                         string
		Protected_settings           *string
		Publisher                    string
		Resource_group_name          string
		Settings                     *string
		Tags                         *map[string]string
		Type                         string
		Type_handler_version         string
		Virtual_machine_name         string
	}

	Virtual_machine_scale_set struct {
		Virtual_machine_scale_set_id    *string                   `lyra:"tf-gen.ignore"`
		Automatic_os_upgrade            bool                      `puppet:"value=>false"`
		Boot_diagnostics                *[]map[string]interface{} `puppet:"type => Optional[Array[Struct[Optional[enabled]=>Boolean,storage_uri=>String]]]"`
		Eviction_policy                 *string
		Extension                       *[]map[string]interface{} `puppet:"type => Optional[Array[Struct[Optional[auto_upgrade_minor_version]=>Boolean,name=>String,Optional[protected_settings]=>String,publisher=>String,Optional[settings]=>String,type=>String,type_handler_version=>String]]]"`
		Health_probe_id                 *string
		Identity                        *[]map[string]interface{} `puppet:"type => Optional[Array[Struct[Optional[identity_ids]=>Array[String],Optional[principal_id]=>String,type=>String]]]"`
		License_type                    *string
		Location                        string
		Name                            string
		Network_profile                 []map[string]interface{}  `puppet:"type => Array[Struct[Optional[accelerated_networking]=>Boolean,Optional[dns_settings]=>Array[Struct[dns_servers=>Array[String]]],ip_configuration=>Array[Struct[Optional[application_gateway_backend_address_pool_ids]=>Array[String],Optional[application_security_group_ids]=>Array[String],Optional[load_balancer_backend_address_pool_ids]=>Array[String],Optional[load_balancer_inbound_nat_rules_ids]=>Array[String],name=>String,primary=>Boolean,Optional[public_ip_address_configuration]=>Array[Struct[domain_name_label=>String,idle_timeout=>Integer,name=>String]],subnet_id=>String]],Optional[ip_forwarding]=>Boolean,name=>String,Optional[network_security_group_id]=>String,primary=>Boolean]]"`
		Os_profile                      []map[string]string       `puppet:"type => Array[Struct[Optional[admin_password]=>String,admin_username=>String,computer_name_prefix=>String,Optional[custom_data]=>String]]"`
		Os_profile_linux_config         *[]map[string]interface{} `puppet:"type => Optional[Array[Struct[Optional[disable_password_authentication]=>Boolean,Optional[ssh_keys]=>Array[Struct[Optional[key_data]=>String,path=>String]]]]]"`
		Os_profile_secrets              *[]map[string]interface{} `puppet:"type => Optional[Array[Struct[source_vault_id=>String,Optional[vault_certificates]=>Array[Struct[Optional[certificate_store]=>String,certificate_url=>String]]]]]"`
		Os_profile_windows_config       *[]map[string]interface{} `puppet:"type => Optional[Array[Struct[Optional[additional_unattend_config]=>Array[Struct[component=>String,content=>String,pass=>String,setting_name=>String]],Optional[enable_automatic_upgrades]=>Boolean,Optional[provision_vm_agent]=>Boolean,Optional[winrm]=>Array[Struct[Optional[certificate_url]=>String,protocol=>String]]]]]"`
		Overprovision                   bool                      `puppet:"value=>true"`
		Plan                            *[]map[string]string      `puppet:"type => Optional[Array[Struct[name=>String,product=>String,publisher=>String]]]"`
		Priority                        *string
		Resource_group_name             string
		Rolling_upgrade_policy          *[]map[string]interface{} `puppet:"type => Optional[Array[Struct[Optional[max_batch_instance_percent]=>Integer,Optional[max_unhealthy_instance_percent]=>Integer,Optional[max_unhealthy_upgraded_instance_percent]=>Integer,Optional[pause_time_between_batches]=>String]]]"`
		Single_placement_group          bool                      `puppet:"value=>true"`
		Sku                             []map[string]interface{}  `puppet:"type => Array[Struct[capacity=>Integer,name=>String,Optional[tier]=>String]]"`
		Storage_profile_data_disk       *[]map[string]interface{} `puppet:"type => Optional[Array[Struct[Optional[caching]=>String,create_option=>String,Optional[disk_size_gb]=>Integer,lun=>Integer,Optional[managed_disk_type]=>String]]]"`
		Storage_profile_image_reference *[]map[string]string      `puppet:"type => Optional[Array[Struct[Optional[id]=>String,Optional[offer]=>String,Optional[publisher]=>String,Optional[sku]=>String,Optional[version]=>String]]]"`
		Storage_profile_os_disk         []map[string]interface{}  `puppet:"type => Array[Struct[Optional[caching]=>String,create_option=>String,Optional[image]=>String,Optional[managed_disk_type]=>String,Optional[name]=>String,Optional[os_type]=>String,Optional[vhd_containers]=>Array[String]]]"`
		Tags                            *map[string]string
		Upgrade_policy_mode             string
		Zones                           *[]string
	}

	Virtual_network struct {
		Virtual_network_id  *string `lyra:"tf-gen.ignore"`
		Address_space       []string
		Dns_servers         *[]string
		Location            string
		Name                string
		Resource_group_name string
		Subnet              *[]map[string]string `puppet:"type => Optional[Array[Struct[address_prefix=>String,Optional[id]=>String,name=>String,Optional[security_group]=>String]]]"`
		Tags                *map[string]string
	}

	Virtual_network_gateway struct {
		Virtual_network_gateway_id       *string `lyra:"tf-gen.ignore"`
		Active_active                    *bool
		Bgp_settings                     *[]map[string]interface{} `puppet:"type => Optional[Array[Struct[Optional[asn]=>Integer,Optional[peer_weight]=>Integer,Optional[peering_address]=>String]]]"`
		Default_local_network_gateway_id *string
		Enable_bgp                       *bool
		Ip_configuration                 []map[string]string `puppet:"type => Array[Struct[Optional[name]=>String,Optional[private_ip_address_allocation]=>String,Optional[public_ip_address_id]=>String,subnet_id=>String]]"`
		Location                         string
		Name                             string
		Resource_group_name              string
		Sku                              string
		Tags                             *map[string]string
		Type                             string
		Vpn_client_configuration         *[]map[string]interface{} `puppet:"type => Optional[Array[Struct[address_space=>Array[String],Optional[radius_server_address]=>String,Optional[radius_server_secret]=>String,Optional[revoked_certificate]=>Array[Struct[name=>String,thumbprint=>String]],Optional[root_certificate]=>Array[Struct[name=>String,public_cert_data=>String]],Optional[vpn_client_protocols]=>Array[String]]]]"`
		Vpn_type                         string                    `puppet:"value=>'RouteBased'"`
	}

	Virtual_network_gateway_connection struct {
		Virtual_network_gateway_connection_id *string `lyra:"tf-gen.ignore"`
		Authorization_key                     *string
		Enable_bgp                            *bool
		Express_route_circuit_id              *string
		Ipsec_policy                          *[]map[string]interface{} `puppet:"type => Optional[Array[Struct[dh_group=>String,ike_encryption=>String,ike_integrity=>String,ipsec_encryption=>String,ipsec_integrity=>String,pfs_group=>String,Optional[sa_datasize]=>Integer,Optional[sa_lifetime]=>Integer]]]"`
		Local_network_gateway_id              *string
		Location                              string
		Name                                  string
		Peer_virtual_network_gateway_id       *string
		Resource_group_name                   string
		Routing_weight                        *int64
		Shared_key                            *string
		Tags                                  *map[string]string
		Type                                  string
		Use_policy_based_traffic_selectors    *bool
		Virtual_network_gateway_id            string
	}

	Virtual_network_peering struct {
		Virtual_network_peering_id   *string `lyra:"tf-gen.ignore"`
		Allow_forwarded_traffic      *bool
		Allow_gateway_transit        *bool
		Allow_virtual_network_access *bool
		Name                         string
		Remote_virtual_network_id    string
		Resource_group_name          string
		Use_remote_gateways          *bool
		Virtual_network_name         string
	}
)

func Initialize(sb *service.Builder, p *schema.Provider) {
	// Generic handler API
	sb.RegisterAPI("TerraformAzureRM::GenericHandler", bridge.NewTFHandler(nil, nil, "", ""))

	// Registration of resource types with handler
	var rt px.Type
	rt = sb.RegisterTypes("TerraformAzureRM", sb.BuildResource(&Api_management{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("api_management_id", "gateway_regional_url", "gateway_url", "hostname_configuration", "management_api_url", "notification_sender_email", "portal_url", "public_ip_addresses", "scm_url", "security", "tags")
		b.ImmutableAttributes("location", "name", "resource_group_name")
	}))[0]
	sb.RegisterHandler("TerraformAzureRM::Api_managementHandler", bridge.NewTFHandler(p, rt, "api_management_id", "azurerm_api_management"), rt)

	rt = sb.RegisterTypes("TerraformAzureRM", sb.BuildResource(&App_service{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("app_service_id", "app_settings", "client_affinity_enabled", "connection_string", "default_site_hostname", "identity", "outbound_ip_addresses", "possible_outbound_ip_addresses", "site_config", "site_credential", "source_control", "tags")
		b.ImmutableAttributes("app_service_plan_id", "location", "name", "resource_group_name")
	}))[0]
	sb.RegisterHandler("TerraformAzureRM::App_serviceHandler", bridge.NewTFHandler(p, rt, "app_service_id", "azurerm_app_service"), rt)

	rt = sb.RegisterTypes("TerraformAzureRM", sb.BuildResource(&App_service_active_slot{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("app_service_active_slot_id")
		b.ImmutableAttributes("app_service_name", "resource_group_name")
	}))[0]
	sb.RegisterHandler("TerraformAzureRM::App_service_active_slotHandler", bridge.NewTFHandler(p, rt, "app_service_active_slot_id", "azurerm_app_service_active_slot"), rt)

	rt = sb.RegisterTypes("TerraformAzureRM", sb.BuildResource(&App_service_custom_hostname_binding{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("app_service_custom_hostname_binding_id")
		b.ImmutableAttributes("app_service_name", "hostname", "resource_group_name")
	}))[0]
	sb.RegisterHandler("TerraformAzureRM::App_service_custom_hostname_bindingHandler", bridge.NewTFHandler(p, rt, "app_service_custom_hostname_binding_id", "azurerm_app_service_custom_hostname_binding"), rt)

	rt = sb.RegisterTypes("TerraformAzureRM", sb.BuildResource(&App_service_plan{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("app_service_plan_id", "app_service_environment_id", "maximum_number_of_workers", "per_site_scaling", "properties", "reserved", "tags")
		b.ImmutableAttributes("app_service_environment_id", "kind", "location", "name", "resource_group_name")
	}))[0]
	sb.RegisterHandler("TerraformAzureRM::App_service_planHandler", bridge.NewTFHandler(p, rt, "app_service_plan_id", "azurerm_app_service_plan"), rt)

	rt = sb.RegisterTypes("TerraformAzureRM", sb.BuildResource(&App_service_slot{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("app_service_slot_id", "app_settings", "client_affinity_enabled", "connection_string", "default_site_hostname", "site_config", "tags")
		b.ImmutableAttributes("app_service_name", "app_service_plan_id", "identity", "location", "name", "resource_group_name")
	}))[0]
	sb.RegisterHandler("TerraformAzureRM::App_service_slotHandler", bridge.NewTFHandler(p, rt, "app_service_slot_id", "azurerm_app_service_slot"), rt)

	rt = sb.RegisterTypes("TerraformAzureRM", sb.BuildResource(&Application_gateway{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("application_gateway_id", "tags")
		b.ImmutableAttributes("location", "name", "resource_group_name")
	}))[0]
	sb.RegisterHandler("TerraformAzureRM::Application_gatewayHandler", bridge.NewTFHandler(p, rt, "application_gateway_id", "azurerm_application_gateway"), rt)

	rt = sb.RegisterTypes("TerraformAzureRM", sb.BuildResource(&Application_insights{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("application_insights_id", "app_id", "instrumentation_key", "tags")
		b.ImmutableAttributes("application_type", "location", "name", "resource_group_name")
	}))[0]
	sb.RegisterHandler("TerraformAzureRM::Application_insightsHandler", bridge.NewTFHandler(p, rt, "application_insights_id", "azurerm_application_insights"), rt)

	rt = sb.RegisterTypes("TerraformAzureRM", sb.BuildResource(&Application_insights_api_key{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("application_insights_api_key_id", "api_key")
		b.ImmutableAttributes("application_insights_id", "name", "read_permissions", "write_permissions")
	}))[0]
	sb.RegisterHandler("TerraformAzureRM::Application_insights_api_keyHandler", bridge.NewTFHandler(p, rt, "application_insights_api_key_id", "azurerm_application_insights_api_key"), rt)

	rt = sb.RegisterTypes("TerraformAzureRM", sb.BuildResource(&Application_security_group{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("application_security_group_id", "tags")
		b.ImmutableAttributes("location", "name", "resource_group_name")
	}))[0]
	sb.RegisterHandler("TerraformAzureRM::Application_security_groupHandler", bridge.NewTFHandler(p, rt, "application_security_group_id", "azurerm_application_security_group"), rt)

	rt = sb.RegisterTypes("TerraformAzureRM", sb.BuildResource(&Automation_account{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("automation_account_id", "dsc_primary_access_key", "dsc_secondary_access_key", "dsc_server_endpoint", "tags")
		b.ImmutableAttributes("location", "name", "resource_group_name")
	}))[0]
	sb.RegisterHandler("TerraformAzureRM::Automation_accountHandler", bridge.NewTFHandler(p, rt, "automation_account_id", "azurerm_automation_account"), rt)

	rt = sb.RegisterTypes("TerraformAzureRM", sb.BuildResource(&Automation_credential{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("automation_credential_id")
		b.ImmutableAttributes("account_name", "name", "resource_group_name")
	}))[0]
	sb.RegisterHandler("TerraformAzureRM::Automation_credentialHandler", bridge.NewTFHandler(p, rt, "automation_credential_id", "azurerm_automation_credential"), rt)

	rt = sb.RegisterTypes("TerraformAzureRM", sb.BuildResource(&Automation_dsc_configuration{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("automation_dsc_configuration_id", "state")
		b.ImmutableAttributes("automation_account_name", "location", "name", "resource_group_name")
	}))[0]
	sb.RegisterHandler("TerraformAzureRM::Automation_dsc_configurationHandler", bridge.NewTFHandler(p, rt, "automation_dsc_configuration_id", "azurerm_automation_dsc_configuration"), rt)

	rt = sb.RegisterTypes("TerraformAzureRM", sb.BuildResource(&Automation_dsc_nodeconfiguration{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("automation_dsc_nodeconfiguration_id", "configuration_name")
		b.ImmutableAttributes("automation_account_name", "name", "resource_group_name")
	}))[0]
	sb.RegisterHandler("TerraformAzureRM::Automation_dsc_nodeconfigurationHandler", bridge.NewTFHandler(p, rt, "automation_dsc_nodeconfiguration_id", "azurerm_automation_dsc_nodeconfiguration"), rt)

	rt = sb.RegisterTypes("TerraformAzureRM", sb.BuildResource(&Automation_module{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("automation_module_id")
		b.ImmutableAttributes("automation_account_name", "name", "resource_group_name")
	}))[0]
	sb.RegisterHandler("TerraformAzureRM::Automation_moduleHandler", bridge.NewTFHandler(p, rt, "automation_module_id", "azurerm_automation_module"), rt)

	rt = sb.RegisterTypes("TerraformAzureRM", sb.BuildResource(&Automation_runbook{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("automation_runbook_id", "content", "tags")
		b.ImmutableAttributes("account_name", "location", "name", "resource_group_name", "runbook_type")
	}))[0]
	sb.RegisterHandler("TerraformAzureRM::Automation_runbookHandler", bridge.NewTFHandler(p, rt, "automation_runbook_id", "azurerm_automation_runbook"), rt)

	rt = sb.RegisterTypes("TerraformAzureRM", sb.BuildResource(&Automation_schedule{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("automation_schedule_id", "account_name", "automation_account_name", "expiry_time", "interval", "start_time")
		b.ImmutableAttributes("name", "resource_group_name")
	}))[0]
	sb.RegisterHandler("TerraformAzureRM::Automation_scheduleHandler", bridge.NewTFHandler(p, rt, "automation_schedule_id", "azurerm_automation_schedule"), rt)

	rt = sb.RegisterTypes("TerraformAzureRM", sb.BuildResource(&Autoscale_setting{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("autoscale_setting_id", "tags")
		b.ImmutableAttributes("location", "name", "resource_group_name", "target_resource_id")
	}))[0]
	sb.RegisterHandler("TerraformAzureRM::Autoscale_settingHandler", bridge.NewTFHandler(p, rt, "autoscale_setting_id", "azurerm_autoscale_setting"), rt)

	rt = sb.RegisterTypes("TerraformAzureRM", sb.BuildResource(&Availability_set{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("availability_set_id", "tags")
		b.ImmutableAttributes("location", "managed", "name", "platform_fault_domain_count", "platform_update_domain_count", "resource_group_name")
	}))[0]
	sb.RegisterHandler("TerraformAzureRM::Availability_setHandler", bridge.NewTFHandler(p, rt, "availability_set_id", "azurerm_availability_set"), rt)

	rt = sb.RegisterTypes("TerraformAzureRM", sb.BuildResource(&Azuread_application{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("azuread_application_id", "application_id", "homepage", "identifier_uris", "reply_urls")
	}))[0]
	sb.RegisterHandler("TerraformAzureRM::Azuread_applicationHandler", bridge.NewTFHandler(p, rt, "azuread_application_id", "azurerm_azuread_application"), rt)

	rt = sb.RegisterTypes("TerraformAzureRM", sb.BuildResource(&Azuread_service_principal{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("azuread_service_principal_id", "display_name")
		b.ImmutableAttributes("application_id")
	}))[0]
	sb.RegisterHandler("TerraformAzureRM::Azuread_service_principalHandler", bridge.NewTFHandler(p, rt, "azuread_service_principal_id", "azurerm_azuread_service_principal"), rt)

	rt = sb.RegisterTypes("TerraformAzureRM", sb.BuildResource(&Azuread_service_principal_password{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("azuread_service_principal_password_id", "key_id", "start_date")
		b.ImmutableAttributes("end_date", "key_id", "service_principal_id", "start_date", "value")
	}))[0]
	sb.RegisterHandler("TerraformAzureRM::Azuread_service_principal_passwordHandler", bridge.NewTFHandler(p, rt, "azuread_service_principal_password_id", "azurerm_azuread_service_principal_password"), rt)

	rt = sb.RegisterTypes("TerraformAzureRM", sb.BuildResource(&Batch_account{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("batch_account_id", "storage_account_id", "tags")
		b.ImmutableAttributes("location", "name", "resource_group_name")
	}))[0]
	sb.RegisterHandler("TerraformAzureRM::Batch_accountHandler", bridge.NewTFHandler(p, rt, "batch_account_id", "azurerm_batch_account"), rt)

	rt = sb.RegisterTypes("TerraformAzureRM", sb.BuildResource(&Batch_pool{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("batch_pool_id")
		b.ImmutableAttributes("account_name", "display_name", "name", "node_agent_sku_id", "resource_group_name", "storage_image_reference", "vm_size")
	}))[0]
	sb.RegisterHandler("TerraformAzureRM::Batch_poolHandler", bridge.NewTFHandler(p, rt, "batch_pool_id", "azurerm_batch_pool"), rt)

	rt = sb.RegisterTypes("TerraformAzureRM", sb.BuildResource(&Cdn_endpoint{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("cdn_endpoint_id", "content_types_to_compress", "host_name", "origin_host_header", "origin_path", "probe_path", "tags")
		b.ImmutableAttributes("location", "name", "origin", "profile_name", "resource_group_name")
	}))[0]
	sb.RegisterHandler("TerraformAzureRM::Cdn_endpointHandler", bridge.NewTFHandler(p, rt, "cdn_endpoint_id", "azurerm_cdn_endpoint"), rt)

	rt = sb.RegisterTypes("TerraformAzureRM", sb.BuildResource(&Cdn_profile{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("cdn_profile_id", "tags")
		b.ImmutableAttributes("location", "name", "resource_group_name", "sku")
	}))[0]
	sb.RegisterHandler("TerraformAzureRM::Cdn_profileHandler", bridge.NewTFHandler(p, rt, "cdn_profile_id", "azurerm_cdn_profile"), rt)

	rt = sb.RegisterTypes("TerraformAzureRM", sb.BuildResource(&Cognitive_account{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("cognitive_account_id", "endpoint", "tags")
		b.ImmutableAttributes("kind", "location", "name", "resource_group_name")
	}))[0]
	sb.RegisterHandler("TerraformAzureRM::Cognitive_accountHandler", bridge.NewTFHandler(p, rt, "cognitive_account_id", "azurerm_cognitive_account"), rt)

	rt = sb.RegisterTypes("TerraformAzureRM", sb.BuildResource(&Container_group{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("container_group_id", "fqdn", "ip_address", "tags")
		b.ImmutableAttributes("container", "dns_name_label", "image_registry_credential", "ip_address_type", "location", "name", "os_type", "resource_group_name", "restart_policy", "tags")
	}))[0]
	sb.RegisterHandler("TerraformAzureRM::Container_groupHandler", bridge.NewTFHandler(p, rt, "container_group_id", "azurerm_container_group"), rt)

	rt = sb.RegisterTypes("TerraformAzureRM", sb.BuildResource(&Container_registry{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("container_registry_id", "admin_password", "admin_username", "login_server", "tags")
		b.ImmutableAttributes("location", "name", "resource_group_name")
	}))[0]
	sb.RegisterHandler("TerraformAzureRM::Container_registryHandler", bridge.NewTFHandler(p, rt, "container_registry_id", "azurerm_container_registry"), rt)

	rt = sb.RegisterTypes("TerraformAzureRM", sb.BuildResource(&Container_service{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("container_service_id", "tags")
		b.ImmutableAttributes("location", "name", "orchestration_platform", "resource_group_name")
	}))[0]
	sb.RegisterHandler("TerraformAzureRM::Container_serviceHandler", bridge.NewTFHandler(p, rt, "container_service_id", "azurerm_container_service"), rt)

	rt = sb.RegisterTypes("TerraformAzureRM", sb.BuildResource(&Cosmosdb_account{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("cosmosdb_account_id", "connection_strings", "endpoint", "geo_location", "primary_master_key", "primary_readonly_master_key", "read_endpoints", "secondary_master_key", "secondary_readonly_master_key", "tags", "write_endpoints")
		b.ImmutableAttributes("kind", "location", "name", "resource_group_name")
	}))[0]
	sb.RegisterHandler("TerraformAzureRM::Cosmosdb_accountHandler", bridge.NewTFHandler(p, rt, "cosmosdb_account_id", "azurerm_cosmosdb_account"), rt)

	rt = sb.RegisterTypes("TerraformAzureRM", sb.BuildResource(&Data_lake_analytics_account{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("data_lake_analytics_account_id", "tags")
		b.ImmutableAttributes("default_store_account_name", "location", "name", "resource_group_name")
	}))[0]
	sb.RegisterHandler("TerraformAzureRM::Data_lake_analytics_accountHandler", bridge.NewTFHandler(p, rt, "data_lake_analytics_account_id", "azurerm_data_lake_analytics_account"), rt)

	rt = sb.RegisterTypes("TerraformAzureRM", sb.BuildResource(&Data_lake_analytics_firewall_rule{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("data_lake_analytics_firewall_rule_id")
		b.ImmutableAttributes("account_name", "name", "resource_group_name")
	}))[0]
	sb.RegisterHandler("TerraformAzureRM::Data_lake_analytics_firewall_ruleHandler", bridge.NewTFHandler(p, rt, "data_lake_analytics_firewall_rule_id", "azurerm_data_lake_analytics_firewall_rule"), rt)

	rt = sb.RegisterTypes("TerraformAzureRM", sb.BuildResource(&Data_lake_store{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("data_lake_store_id", "encryption_type", "endpoint", "tags")
		b.ImmutableAttributes("encryption_state", "encryption_type", "location", "name", "resource_group_name")
	}))[0]
	sb.RegisterHandler("TerraformAzureRM::Data_lake_storeHandler", bridge.NewTFHandler(p, rt, "data_lake_store_id", "azurerm_data_lake_store"), rt)

	rt = sb.RegisterTypes("TerraformAzureRM", sb.BuildResource(&Data_lake_store_file{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("data_lake_store_file_id")
		b.ImmutableAttributes("account_name", "local_file_path", "remote_file_path")
	}))[0]
	sb.RegisterHandler("TerraformAzureRM::Data_lake_store_fileHandler", bridge.NewTFHandler(p, rt, "data_lake_store_file_id", "azurerm_data_lake_store_file"), rt)

	rt = sb.RegisterTypes("TerraformAzureRM", sb.BuildResource(&Data_lake_store_firewall_rule{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("data_lake_store_firewall_rule_id")
		b.ImmutableAttributes("account_name", "name", "resource_group_name")
	}))[0]
	sb.RegisterHandler("TerraformAzureRM::Data_lake_store_firewall_ruleHandler", bridge.NewTFHandler(p, rt, "data_lake_store_firewall_rule_id", "azurerm_data_lake_store_firewall_rule"), rt)

	rt = sb.RegisterTypes("TerraformAzureRM", sb.BuildResource(&Databricks_workspace{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("databricks_workspace_id", "managed_resource_group_id", "managed_resource_group_name", "tags")
		b.ImmutableAttributes("location", "managed_resource_group_name", "name", "resource_group_name", "sku")
	}))[0]
	sb.RegisterHandler("TerraformAzureRM::Databricks_workspaceHandler", bridge.NewTFHandler(p, rt, "databricks_workspace_id", "azurerm_databricks_workspace"), rt)

	rt = sb.RegisterTypes("TerraformAzureRM", sb.BuildResource(&Dev_test_lab{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("dev_test_lab_id", "artifacts_storage_account_id", "default_premium_storage_account_id", "default_storage_account_id", "key_vault_id", "premium_data_disk_storage_account_id", "tags", "unique_identifier")
		b.ImmutableAttributes("location", "name", "resource_group_name")
	}))[0]
	sb.RegisterHandler("TerraformAzureRM::Dev_test_labHandler", bridge.NewTFHandler(p, rt, "dev_test_lab_id", "azurerm_dev_test_lab"), rt)

	rt = sb.RegisterTypes("TerraformAzureRM", sb.BuildResource(&Dev_test_linux_virtual_machine{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("dev_test_linux_virtual_machine_id", "fqdn", "tags", "unique_identifier")
		b.ImmutableAttributes("disallow_public_ip_address", "inbound_nat_rule", "lab_name", "lab_subnet_name", "lab_virtual_network_id", "location", "name", "password", "resource_group_name", "size", "ssh_key", "username")
	}))[0]
	sb.RegisterHandler("TerraformAzureRM::Dev_test_linux_virtual_machineHandler", bridge.NewTFHandler(p, rt, "dev_test_linux_virtual_machine_id", "azurerm_dev_test_linux_virtual_machine"), rt)

	rt = sb.RegisterTypes("TerraformAzureRM", sb.BuildResource(&Dev_test_policy{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("dev_test_policy_id", "tags")
		b.ImmutableAttributes("evaluator_type", "lab_name", "name", "policy_set_name", "resource_group_name")
	}))[0]
	sb.RegisterHandler("TerraformAzureRM::Dev_test_policyHandler", bridge.NewTFHandler(p, rt, "dev_test_policy_id", "azurerm_dev_test_policy"), rt)

	rt = sb.RegisterTypes("TerraformAzureRM", sb.BuildResource(&Dev_test_virtual_network{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("dev_test_virtual_network_id", "subnet", "tags", "unique_identifier")
		b.ImmutableAttributes("lab_name", "name", "resource_group_name")
	}))[0]
	sb.RegisterHandler("TerraformAzureRM::Dev_test_virtual_networkHandler", bridge.NewTFHandler(p, rt, "dev_test_virtual_network_id", "azurerm_dev_test_virtual_network"), rt)

	rt = sb.RegisterTypes("TerraformAzureRM", sb.BuildResource(&Dev_test_windows_virtual_machine{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("dev_test_windows_virtual_machine_id", "fqdn", "tags", "unique_identifier")
		b.ImmutableAttributes("disallow_public_ip_address", "inbound_nat_rule", "lab_name", "lab_subnet_name", "lab_virtual_network_id", "location", "name", "password", "resource_group_name", "size", "username")
	}))[0]
	sb.RegisterHandler("TerraformAzureRM::Dev_test_windows_virtual_machineHandler", bridge.NewTFHandler(p, rt, "dev_test_windows_virtual_machine_id", "azurerm_dev_test_windows_virtual_machine"), rt)

	rt = sb.RegisterTypes("TerraformAzureRM", sb.BuildResource(&Devspace_controller{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("devspace_controller_id", "data_plane_fqdn", "tags")
		b.ImmutableAttributes("host_suffix", "location", "name", "resource_group_name", "sku", "target_container_host_credentials_base64", "target_container_host_resource_id")
	}))[0]
	sb.RegisterHandler("TerraformAzureRM::Devspace_controllerHandler", bridge.NewTFHandler(p, rt, "devspace_controller_id", "azurerm_devspace_controller"), rt)

	rt = sb.RegisterTypes("TerraformAzureRM", sb.BuildResource(&Dns_a_record{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("dns_a_record_id", "tags")
		b.ImmutableAttributes("name", "resource_group_name")
	}))[0]
	sb.RegisterHandler("TerraformAzureRM::Dns_a_recordHandler", bridge.NewTFHandler(p, rt, "dns_a_record_id", "azurerm_dns_a_record"), rt)

	rt = sb.RegisterTypes("TerraformAzureRM", sb.BuildResource(&Dns_aaaa_record{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("dns_aaaa_record_id", "tags")
		b.ImmutableAttributes("name", "resource_group_name")
	}))[0]
	sb.RegisterHandler("TerraformAzureRM::Dns_aaaa_recordHandler", bridge.NewTFHandler(p, rt, "dns_aaaa_record_id", "azurerm_dns_aaaa_record"), rt)

	rt = sb.RegisterTypes("TerraformAzureRM", sb.BuildResource(&Dns_caa_record{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("dns_caa_record_id", "tags")
		b.ImmutableAttributes("name", "resource_group_name")
	}))[0]
	sb.RegisterHandler("TerraformAzureRM::Dns_caa_recordHandler", bridge.NewTFHandler(p, rt, "dns_caa_record_id", "azurerm_dns_caa_record"), rt)

	rt = sb.RegisterTypes("TerraformAzureRM", sb.BuildResource(&Dns_cname_record{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("dns_cname_record_id", "tags")
		b.ImmutableAttributes("name", "resource_group_name")
	}))[0]
	sb.RegisterHandler("TerraformAzureRM::Dns_cname_recordHandler", bridge.NewTFHandler(p, rt, "dns_cname_record_id", "azurerm_dns_cname_record"), rt)

	rt = sb.RegisterTypes("TerraformAzureRM", sb.BuildResource(&Dns_mx_record{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("dns_mx_record_id", "tags")
		b.ImmutableAttributes("name", "resource_group_name")
	}))[0]
	sb.RegisterHandler("TerraformAzureRM::Dns_mx_recordHandler", bridge.NewTFHandler(p, rt, "dns_mx_record_id", "azurerm_dns_mx_record"), rt)

	rt = sb.RegisterTypes("TerraformAzureRM", sb.BuildResource(&Dns_ns_record{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("dns_ns_record_id", "record", "records", "tags")
		b.ImmutableAttributes("name", "resource_group_name")
	}))[0]
	sb.RegisterHandler("TerraformAzureRM::Dns_ns_recordHandler", bridge.NewTFHandler(p, rt, "dns_ns_record_id", "azurerm_dns_ns_record"), rt)

	rt = sb.RegisterTypes("TerraformAzureRM", sb.BuildResource(&Dns_ptr_record{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("dns_ptr_record_id", "tags")
		b.ImmutableAttributes("name", "resource_group_name")
	}))[0]
	sb.RegisterHandler("TerraformAzureRM::Dns_ptr_recordHandler", bridge.NewTFHandler(p, rt, "dns_ptr_record_id", "azurerm_dns_ptr_record"), rt)

	rt = sb.RegisterTypes("TerraformAzureRM", sb.BuildResource(&Dns_srv_record{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("dns_srv_record_id", "tags")
		b.ImmutableAttributes("name", "resource_group_name")
	}))[0]
	sb.RegisterHandler("TerraformAzureRM::Dns_srv_recordHandler", bridge.NewTFHandler(p, rt, "dns_srv_record_id", "azurerm_dns_srv_record"), rt)

	rt = sb.RegisterTypes("TerraformAzureRM", sb.BuildResource(&Dns_txt_record{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("dns_txt_record_id", "tags")
		b.ImmutableAttributes("name", "resource_group_name")
	}))[0]
	sb.RegisterHandler("TerraformAzureRM::Dns_txt_recordHandler", bridge.NewTFHandler(p, rt, "dns_txt_record_id", "azurerm_dns_txt_record"), rt)

	rt = sb.RegisterTypes("TerraformAzureRM", sb.BuildResource(&Dns_zone{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("dns_zone_id", "max_number_of_record_sets", "name_servers", "number_of_record_sets", "tags")
		b.ImmutableAttributes("name", "resource_group_name")
	}))[0]
	sb.RegisterHandler("TerraformAzureRM::Dns_zoneHandler", bridge.NewTFHandler(p, rt, "dns_zone_id", "azurerm_dns_zone"), rt)

	rt = sb.RegisterTypes("TerraformAzureRM", sb.BuildResource(&Eventgrid_topic{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("eventgrid_topic_id", "endpoint", "primary_access_key", "secondary_access_key", "tags")
		b.ImmutableAttributes("location", "name", "resource_group_name")
	}))[0]
	sb.RegisterHandler("TerraformAzureRM::Eventgrid_topicHandler", bridge.NewTFHandler(p, rt, "eventgrid_topic_id", "azurerm_eventgrid_topic"), rt)

	rt = sb.RegisterTypes("TerraformAzureRM", sb.BuildResource(&Eventhub{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("eventhub_id", "partition_ids")
		b.ImmutableAttributes("location", "name", "namespace_name", "partition_count", "resource_group_name")
	}))[0]
	sb.RegisterHandler("TerraformAzureRM::EventhubHandler", bridge.NewTFHandler(p, rt, "eventhub_id", "azurerm_eventhub"), rt)

	rt = sb.RegisterTypes("TerraformAzureRM", sb.BuildResource(&Eventhub_authorization_rule{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("eventhub_authorization_rule_id", "primary_connection_string", "primary_key", "secondary_connection_string", "secondary_key")
		b.ImmutableAttributes("eventhub_name", "location", "name", "namespace_name", "resource_group_name")
	}))[0]
	sb.RegisterHandler("TerraformAzureRM::Eventhub_authorization_ruleHandler", bridge.NewTFHandler(p, rt, "eventhub_authorization_rule_id", "azurerm_eventhub_authorization_rule"), rt)

	rt = sb.RegisterTypes("TerraformAzureRM", sb.BuildResource(&Eventhub_consumer_group{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("eventhub_consumer_group_id")
		b.ImmutableAttributes("eventhub_name", "location", "name", "namespace_name", "resource_group_name")
	}))[0]
	sb.RegisterHandler("TerraformAzureRM::Eventhub_consumer_groupHandler", bridge.NewTFHandler(p, rt, "eventhub_consumer_group_id", "azurerm_eventhub_consumer_group"), rt)

	rt = sb.RegisterTypes("TerraformAzureRM", sb.BuildResource(&Eventhub_namespace{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("eventhub_namespace_id", "default_primary_connection_string", "default_primary_key", "default_secondary_connection_string", "default_secondary_key", "maximum_throughput_units", "tags")
		b.ImmutableAttributes("location", "name", "resource_group_name")
	}))[0]
	sb.RegisterHandler("TerraformAzureRM::Eventhub_namespaceHandler", bridge.NewTFHandler(p, rt, "eventhub_namespace_id", "azurerm_eventhub_namespace"), rt)

	rt = sb.RegisterTypes("TerraformAzureRM", sb.BuildResource(&Eventhub_namespace_authorization_rule{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("eventhub_namespace_authorization_rule_id", "primary_connection_string", "primary_key", "secondary_connection_string", "secondary_key")
		b.ImmutableAttributes("location", "name", "namespace_name", "resource_group_name")
	}))[0]
	sb.RegisterHandler("TerraformAzureRM::Eventhub_namespace_authorization_ruleHandler", bridge.NewTFHandler(p, rt, "eventhub_namespace_authorization_rule_id", "azurerm_eventhub_namespace_authorization_rule"), rt)

	rt = sb.RegisterTypes("TerraformAzureRM", sb.BuildResource(&Express_route_circuit{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("express_route_circuit_id", "service_key", "service_provider_provisioning_state", "tags")
		b.ImmutableAttributes("location", "name", "peering_location", "resource_group_name", "service_provider_name")
	}))[0]
	sb.RegisterHandler("TerraformAzureRM::Express_route_circuitHandler", bridge.NewTFHandler(p, rt, "express_route_circuit_id", "azurerm_express_route_circuit"), rt)

	rt = sb.RegisterTypes("TerraformAzureRM", sb.BuildResource(&Express_route_circuit_authorization{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("express_route_circuit_authorization_id", "authorization_key", "authorization_use_status")
		b.ImmutableAttributes("express_route_circuit_name", "name", "resource_group_name")
	}))[0]
	sb.RegisterHandler("TerraformAzureRM::Express_route_circuit_authorizationHandler", bridge.NewTFHandler(p, rt, "express_route_circuit_authorization_id", "azurerm_express_route_circuit_authorization"), rt)

	rt = sb.RegisterTypes("TerraformAzureRM", sb.BuildResource(&Express_route_circuit_peering{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("express_route_circuit_peering_id", "azure_asn", "peer_asn", "primary_azure_port", "secondary_azure_port")
		b.ImmutableAttributes("express_route_circuit_name", "resource_group_name")
	}))[0]
	sb.RegisterHandler("TerraformAzureRM::Express_route_circuit_peeringHandler", bridge.NewTFHandler(p, rt, "express_route_circuit_peering_id", "azurerm_express_route_circuit_peering"), rt)

	rt = sb.RegisterTypes("TerraformAzureRM", sb.BuildResource(&Firewall{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("firewall_id", "tags")
		b.ImmutableAttributes("location", "name", "resource_group_name")
	}))[0]
	sb.RegisterHandler("TerraformAzureRM::FirewallHandler", bridge.NewTFHandler(p, rt, "firewall_id", "azurerm_firewall"), rt)

	rt = sb.RegisterTypes("TerraformAzureRM", sb.BuildResource(&Firewall_application_rule_collection{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("firewall_application_rule_collection_id")
		b.ImmutableAttributes("azure_firewall_name", "name", "resource_group_name")
	}))[0]
	sb.RegisterHandler("TerraformAzureRM::Firewall_application_rule_collectionHandler", bridge.NewTFHandler(p, rt, "firewall_application_rule_collection_id", "azurerm_firewall_application_rule_collection"), rt)

	rt = sb.RegisterTypes("TerraformAzureRM", sb.BuildResource(&Firewall_network_rule_collection{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("firewall_network_rule_collection_id")
		b.ImmutableAttributes("azure_firewall_name", "name", "resource_group_name")
	}))[0]
	sb.RegisterHandler("TerraformAzureRM::Firewall_network_rule_collectionHandler", bridge.NewTFHandler(p, rt, "firewall_network_rule_collection_id", "azurerm_firewall_network_rule_collection"), rt)

	rt = sb.RegisterTypes("TerraformAzureRM", sb.BuildResource(&Function_app{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("function_app_id", "client_affinity_enabled", "connection_string", "default_hostname", "identity", "outbound_ip_addresses", "site_config", "site_credential", "tags")
		b.ImmutableAttributes("app_service_plan_id", "location", "name", "resource_group_name", "storage_connection_string")
	}))[0]
	sb.RegisterHandler("TerraformAzureRM::Function_appHandler", bridge.NewTFHandler(p, rt, "function_app_id", "azurerm_function_app"), rt)

	rt = sb.RegisterTypes("TerraformAzureRM", sb.BuildResource(&Image{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("image_id", "tags")
		b.ImmutableAttributes("location", "name", "os_disk", "resource_group_name")
	}))[0]
	sb.RegisterHandler("TerraformAzureRM::ImageHandler", bridge.NewTFHandler(p, rt, "image_id", "azurerm_image"), rt)

	rt = sb.RegisterTypes("TerraformAzureRM", sb.BuildResource(&Iothub{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("iothub_id", "event_hub_events_endpoint", "event_hub_events_path", "event_hub_operations_endpoint", "event_hub_operations_path", "hostname", "shared_access_policy", "tags", "type")
		b.ImmutableAttributes("location", "name", "resource_group_name")
	}))[0]
	sb.RegisterHandler("TerraformAzureRM::IothubHandler", bridge.NewTFHandler(p, rt, "iothub_id", "azurerm_iothub"), rt)

	rt = sb.RegisterTypes("TerraformAzureRM", sb.BuildResource(&Iothub_consumer_group{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("iothub_consumer_group_id")
		b.ImmutableAttributes("eventhub_endpoint_name", "iothub_name", "name", "resource_group_name")
	}))[0]
	sb.RegisterHandler("TerraformAzureRM::Iothub_consumer_groupHandler", bridge.NewTFHandler(p, rt, "iothub_consumer_group_id", "azurerm_iothub_consumer_group"), rt)

	rt = sb.RegisterTypes("TerraformAzureRM", sb.BuildResource(&Key_vault{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("key_vault_id", "access_policy", "tags", "vault_uri")
		b.ImmutableAttributes("location", "name", "resource_group_name")
	}))[0]
	sb.RegisterHandler("TerraformAzureRM::Key_vaultHandler", bridge.NewTFHandler(p, rt, "key_vault_id", "azurerm_key_vault"), rt)

	rt = sb.RegisterTypes("TerraformAzureRM", sb.BuildResource(&Key_vault_access_policy{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("key_vault_access_policy_id")
		b.ImmutableAttributes("application_id", "object_id", "resource_group_name", "tenant_id", "vault_name")
	}))[0]
	sb.RegisterHandler("TerraformAzureRM::Key_vault_access_policyHandler", bridge.NewTFHandler(p, rt, "key_vault_access_policy_id", "azurerm_key_vault_access_policy"), rt)

	rt = sb.RegisterTypes("TerraformAzureRM", sb.BuildResource(&Key_vault_certificate{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("key_vault_certificate_id", "certificate_data", "secret_id", "tags", "thumbprint", "version")
		b.ImmutableAttributes("certificate", "certificate_policy", "name", "vault_uri")
	}))[0]
	sb.RegisterHandler("TerraformAzureRM::Key_vault_certificateHandler", bridge.NewTFHandler(p, rt, "key_vault_certificate_id", "azurerm_key_vault_certificate"), rt)

	rt = sb.RegisterTypes("TerraformAzureRM", sb.BuildResource(&Key_vault_key{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("key_vault_key_id", "e", "n", "tags", "version")
		b.ImmutableAttributes("key_size", "key_type", "name", "vault_uri")
	}))[0]
	sb.RegisterHandler("TerraformAzureRM::Key_vault_keyHandler", bridge.NewTFHandler(p, rt, "key_vault_key_id", "azurerm_key_vault_key"), rt)

	rt = sb.RegisterTypes("TerraformAzureRM", sb.BuildResource(&Key_vault_secret{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("key_vault_secret_id", "tags", "version")
		b.ImmutableAttributes("name", "vault_uri")
	}))[0]
	sb.RegisterHandler("TerraformAzureRM::Key_vault_secretHandler", bridge.NewTFHandler(p, rt, "key_vault_secret_id", "azurerm_key_vault_secret"), rt)

	rt = sb.RegisterTypes("TerraformAzureRM", sb.BuildResource(&Kubernetes_cluster{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("kubernetes_cluster_id", "addon_profile", "fqdn", "kube_admin_config", "kube_admin_config_raw", "kube_config", "kube_config_raw", "kubernetes_version", "network_profile", "node_resource_group", "role_based_access_control", "tags")
		b.ImmutableAttributes("dns_prefix", "location", "name", "network_profile", "resource_group_name", "role_based_access_control")
	}))[0]
	sb.RegisterHandler("TerraformAzureRM::Kubernetes_clusterHandler", bridge.NewTFHandler(p, rt, "kubernetes_cluster_id", "azurerm_kubernetes_cluster"), rt)

	rt = sb.RegisterTypes("TerraformAzureRM", sb.BuildResource(&Lb{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("lb_id", "private_ip_address", "private_ip_addresses", "tags")
		b.ImmutableAttributes("location", "name", "resource_group_name", "sku")
	}))[0]
	sb.RegisterHandler("TerraformAzureRM::LbHandler", bridge.NewTFHandler(p, rt, "lb_id", "azurerm_lb"), rt)

	rt = sb.RegisterTypes("TerraformAzureRM", sb.BuildResource(&Lb_backend_address_pool{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("lb_backend_address_pool_id", "backend_ip_configurations", "load_balancing_rules")
		b.ImmutableAttributes("loadbalancer_id", "location", "name", "resource_group_name")
	}))[0]
	sb.RegisterHandler("TerraformAzureRM::Lb_backend_address_poolHandler", bridge.NewTFHandler(p, rt, "lb_backend_address_pool_id", "azurerm_lb_backend_address_pool"), rt)

	rt = sb.RegisterTypes("TerraformAzureRM", sb.BuildResource(&Lb_nat_pool{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("lb_nat_pool_id", "frontend_ip_configuration_id")
		b.ImmutableAttributes("loadbalancer_id", "location", "name", "resource_group_name")
	}))[0]
	sb.RegisterHandler("TerraformAzureRM::Lb_nat_poolHandler", bridge.NewTFHandler(p, rt, "lb_nat_pool_id", "azurerm_lb_nat_pool"), rt)

	rt = sb.RegisterTypes("TerraformAzureRM", sb.BuildResource(&Lb_nat_rule{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("lb_nat_rule_id", "backend_ip_configuration_id", "enable_floating_ip", "frontend_ip_configuration_id")
		b.ImmutableAttributes("loadbalancer_id", "location", "name", "resource_group_name")
	}))[0]
	sb.RegisterHandler("TerraformAzureRM::Lb_nat_ruleHandler", bridge.NewTFHandler(p, rt, "lb_nat_rule_id", "azurerm_lb_nat_rule"), rt)

	rt = sb.RegisterTypes("TerraformAzureRM", sb.BuildResource(&Lb_probe{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("lb_probe_id", "load_balancer_rules", "protocol")
		b.ImmutableAttributes("loadbalancer_id", "location", "name", "resource_group_name")
	}))[0]
	sb.RegisterHandler("TerraformAzureRM::Lb_probeHandler", bridge.NewTFHandler(p, rt, "lb_probe_id", "azurerm_lb_probe"), rt)

	rt = sb.RegisterTypes("TerraformAzureRM", sb.BuildResource(&Lb_rule{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("lb_rule_id", "backend_address_pool_id", "frontend_ip_configuration_id", "idle_timeout_in_minutes", "load_distribution", "probe_id")
		b.ImmutableAttributes("loadbalancer_id", "location", "name", "resource_group_name")
	}))[0]
	sb.RegisterHandler("TerraformAzureRM::Lb_ruleHandler", bridge.NewTFHandler(p, rt, "lb_rule_id", "azurerm_lb_rule"), rt)

	rt = sb.RegisterTypes("TerraformAzureRM", sb.BuildResource(&Local_network_gateway{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("local_network_gateway_id", "tags")
		b.ImmutableAttributes("location", "name", "resource_group_name")
	}))[0]
	sb.RegisterHandler("TerraformAzureRM::Local_network_gatewayHandler", bridge.NewTFHandler(p, rt, "local_network_gateway_id", "azurerm_local_network_gateway"), rt)

	rt = sb.RegisterTypes("TerraformAzureRM", sb.BuildResource(&Log_analytics_solution{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("log_analytics_solution_id")
		b.ImmutableAttributes("location", "resource_group_name", "solution_name", "workspace_name", "workspace_resource_id")
	}))[0]
	sb.RegisterHandler("TerraformAzureRM::Log_analytics_solutionHandler", bridge.NewTFHandler(p, rt, "log_analytics_solution_id", "azurerm_log_analytics_solution"), rt)

	rt = sb.RegisterTypes("TerraformAzureRM", sb.BuildResource(&Log_analytics_workspace{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("log_analytics_workspace_id", "portal_url", "primary_shared_key", "retention_in_days", "secondary_shared_key", "tags", "workspace_id")
		b.ImmutableAttributes("location", "name", "resource_group_name", "sku")
	}))[0]
	sb.RegisterHandler("TerraformAzureRM::Log_analytics_workspaceHandler", bridge.NewTFHandler(p, rt, "log_analytics_workspace_id", "azurerm_log_analytics_workspace"), rt)

	rt = sb.RegisterTypes("TerraformAzureRM", sb.BuildResource(&Log_analytics_workspace_linked_service{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("log_analytics_workspace_linked_service_id", "name", "tags")
		b.ImmutableAttributes("linked_service_name", "linked_service_properties", "resource_group_name", "workspace_name")
	}))[0]
	sb.RegisterHandler("TerraformAzureRM::Log_analytics_workspace_linked_serviceHandler", bridge.NewTFHandler(p, rt, "log_analytics_workspace_linked_service_id", "azurerm_log_analytics_workspace_linked_service"), rt)

	rt = sb.RegisterTypes("TerraformAzureRM", sb.BuildResource(&Logic_app_action_custom{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("logic_app_action_custom_id")
		b.ImmutableAttributes("logic_app_id", "name")
	}))[0]
	sb.RegisterHandler("TerraformAzureRM::Logic_app_action_customHandler", bridge.NewTFHandler(p, rt, "logic_app_action_custom_id", "azurerm_logic_app_action_custom"), rt)

	rt = sb.RegisterTypes("TerraformAzureRM", sb.BuildResource(&Logic_app_action_http{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("logic_app_action_http_id")
		b.ImmutableAttributes("logic_app_id", "name")
	}))[0]
	sb.RegisterHandler("TerraformAzureRM::Logic_app_action_httpHandler", bridge.NewTFHandler(p, rt, "logic_app_action_http_id", "azurerm_logic_app_action_http"), rt)

	rt = sb.RegisterTypes("TerraformAzureRM", sb.BuildResource(&Logic_app_trigger_custom{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("logic_app_trigger_custom_id")
		b.ImmutableAttributes("logic_app_id", "name")
	}))[0]
	sb.RegisterHandler("TerraformAzureRM::Logic_app_trigger_customHandler", bridge.NewTFHandler(p, rt, "logic_app_trigger_custom_id", "azurerm_logic_app_trigger_custom"), rt)

	rt = sb.RegisterTypes("TerraformAzureRM", sb.BuildResource(&Logic_app_trigger_http_request{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("logic_app_trigger_http_request_id")
		b.ImmutableAttributes("logic_app_id", "name")
	}))[0]
	sb.RegisterHandler("TerraformAzureRM::Logic_app_trigger_http_requestHandler", bridge.NewTFHandler(p, rt, "logic_app_trigger_http_request_id", "azurerm_logic_app_trigger_http_request"), rt)

	rt = sb.RegisterTypes("TerraformAzureRM", sb.BuildResource(&Logic_app_trigger_recurrence{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("logic_app_trigger_recurrence_id")
		b.ImmutableAttributes("logic_app_id", "name")
	}))[0]
	sb.RegisterHandler("TerraformAzureRM::Logic_app_trigger_recurrenceHandler", bridge.NewTFHandler(p, rt, "logic_app_trigger_recurrence_id", "azurerm_logic_app_trigger_recurrence"), rt)

	rt = sb.RegisterTypes("TerraformAzureRM", sb.BuildResource(&Logic_app_workflow{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("logic_app_workflow_id", "access_endpoint", "tags")
		b.ImmutableAttributes("location", "name", "resource_group_name", "workflow_schema", "workflow_version")
	}))[0]
	sb.RegisterHandler("TerraformAzureRM::Logic_app_workflowHandler", bridge.NewTFHandler(p, rt, "logic_app_workflow_id", "azurerm_logic_app_workflow"), rt)

	rt = sb.RegisterTypes("TerraformAzureRM", sb.BuildResource(&Managed_disk{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("managed_disk_id", "disk_size_gb", "source_uri", "tags")
		b.ImmutableAttributes("create_option", "image_reference_id", "location", "name", "resource_group_name", "source_resource_id", "source_uri", "zones")
	}))[0]
	sb.RegisterHandler("TerraformAzureRM::Managed_diskHandler", bridge.NewTFHandler(p, rt, "managed_disk_id", "azurerm_managed_disk"), rt)

	rt = sb.RegisterTypes("TerraformAzureRM", sb.BuildResource(&Management_group{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("management_group_id", "display_name", "group_id", "parent_management_group_id")
		b.ImmutableAttributes("group_id")
	}))[0]
	sb.RegisterHandler("TerraformAzureRM::Management_groupHandler", bridge.NewTFHandler(p, rt, "management_group_id", "azurerm_management_group"), rt)

	rt = sb.RegisterTypes("TerraformAzureRM", sb.BuildResource(&Management_lock{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("management_lock_id")
		b.ImmutableAttributes("lock_level", "name", "notes", "scope")
	}))[0]
	sb.RegisterHandler("TerraformAzureRM::Management_lockHandler", bridge.NewTFHandler(p, rt, "management_lock_id", "azurerm_management_lock"), rt)

	rt = sb.RegisterTypes("TerraformAzureRM", sb.BuildResource(&Mariadb_database{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("mariadb_database_id")
		b.ImmutableAttributes("charset", "collation", "name", "resource_group_name", "server_name")
	}))[0]
	sb.RegisterHandler("TerraformAzureRM::Mariadb_databaseHandler", bridge.NewTFHandler(p, rt, "mariadb_database_id", "azurerm_mariadb_database"), rt)

	rt = sb.RegisterTypes("TerraformAzureRM", sb.BuildResource(&Mariadb_server{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("mariadb_server_id", "fqdn", "tags")
		b.ImmutableAttributes("administrator_login", "location", "name", "resource_group_name", "version")
	}))[0]
	sb.RegisterHandler("TerraformAzureRM::Mariadb_serverHandler", bridge.NewTFHandler(p, rt, "mariadb_server_id", "azurerm_mariadb_server"), rt)

	rt = sb.RegisterTypes("TerraformAzureRM", sb.BuildResource(&Metric_alertrule{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("metric_alertrule_id", "description", "email_action", "tags", "webhook_action")
		b.ImmutableAttributes("location", "name", "resource_group_name")
	}))[0]
	sb.RegisterHandler("TerraformAzureRM::Metric_alertruleHandler", bridge.NewTFHandler(p, rt, "metric_alertrule_id", "azurerm_metric_alertrule"), rt)

	rt = sb.RegisterTypes("TerraformAzureRM", sb.BuildResource(&Monitor_action_group{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("monitor_action_group_id", "tags")
		b.ImmutableAttributes("name", "resource_group_name")
	}))[0]
	sb.RegisterHandler("TerraformAzureRM::Monitor_action_groupHandler", bridge.NewTFHandler(p, rt, "monitor_action_group_id", "azurerm_monitor_action_group"), rt)

	rt = sb.RegisterTypes("TerraformAzureRM", sb.BuildResource(&Monitor_activity_log_alert{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("monitor_activity_log_alert_id", "tags")
		b.ImmutableAttributes("name", "resource_group_name")
	}))[0]
	sb.RegisterHandler("TerraformAzureRM::Monitor_activity_log_alertHandler", bridge.NewTFHandler(p, rt, "monitor_activity_log_alert_id", "azurerm_monitor_activity_log_alert"), rt)

	rt = sb.RegisterTypes("TerraformAzureRM", sb.BuildResource(&Monitor_diagnostic_setting{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("monitor_diagnostic_setting_id")
		b.ImmutableAttributes("eventhub_authorization_rule_id", "eventhub_name", "log_analytics_workspace_id", "name", "storage_account_id", "target_resource_id")
	}))[0]
	sb.RegisterHandler("TerraformAzureRM::Monitor_diagnostic_settingHandler", bridge.NewTFHandler(p, rt, "monitor_diagnostic_setting_id", "azurerm_monitor_diagnostic_setting"), rt)

	rt = sb.RegisterTypes("TerraformAzureRM", sb.BuildResource(&Monitor_log_profile{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("monitor_log_profile_id")
		b.ImmutableAttributes("name")
	}))[0]
	sb.RegisterHandler("TerraformAzureRM::Monitor_log_profileHandler", bridge.NewTFHandler(p, rt, "monitor_log_profile_id", "azurerm_monitor_log_profile"), rt)

	rt = sb.RegisterTypes("TerraformAzureRM", sb.BuildResource(&Monitor_metric_alert{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("monitor_metric_alert_id", "tags")
		b.ImmutableAttributes("name", "resource_group_name")
	}))[0]
	sb.RegisterHandler("TerraformAzureRM::Monitor_metric_alertHandler", bridge.NewTFHandler(p, rt, "monitor_metric_alert_id", "azurerm_monitor_metric_alert"), rt)

	rt = sb.RegisterTypes("TerraformAzureRM", sb.BuildResource(&Mssql_elasticpool{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("mssql_elasticpool_id", "elastic_pool_properties", "max_size_bytes", "tags", "zone_redundant")
		b.ImmutableAttributes("location", "name", "resource_group_name", "server_name")
	}))[0]
	sb.RegisterHandler("TerraformAzureRM::Mssql_elasticpoolHandler", bridge.NewTFHandler(p, rt, "mssql_elasticpool_id", "azurerm_mssql_elasticpool"), rt)

	rt = sb.RegisterTypes("TerraformAzureRM", sb.BuildResource(&Mysql_configuration{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("mysql_configuration_id")
		b.ImmutableAttributes("name", "resource_group_name", "server_name", "value")
	}))[0]
	sb.RegisterHandler("TerraformAzureRM::Mysql_configurationHandler", bridge.NewTFHandler(p, rt, "mysql_configuration_id", "azurerm_mysql_configuration"), rt)

	rt = sb.RegisterTypes("TerraformAzureRM", sb.BuildResource(&Mysql_database{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("mysql_database_id")
		b.ImmutableAttributes("charset", "collation", "name", "resource_group_name", "server_name")
	}))[0]
	sb.RegisterHandler("TerraformAzureRM::Mysql_databaseHandler", bridge.NewTFHandler(p, rt, "mysql_database_id", "azurerm_mysql_database"), rt)

	rt = sb.RegisterTypes("TerraformAzureRM", sb.BuildResource(&Mysql_firewall_rule{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("mysql_firewall_rule_id")
		b.ImmutableAttributes("name", "resource_group_name", "server_name")
	}))[0]
	sb.RegisterHandler("TerraformAzureRM::Mysql_firewall_ruleHandler", bridge.NewTFHandler(p, rt, "mysql_firewall_rule_id", "azurerm_mysql_firewall_rule"), rt)

	rt = sb.RegisterTypes("TerraformAzureRM", sb.BuildResource(&Mysql_server{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("mysql_server_id", "fqdn", "tags")
		b.ImmutableAttributes("administrator_login", "location", "name", "resource_group_name", "version")
	}))[0]
	sb.RegisterHandler("TerraformAzureRM::Mysql_serverHandler", bridge.NewTFHandler(p, rt, "mysql_server_id", "azurerm_mysql_server"), rt)

	rt = sb.RegisterTypes("TerraformAzureRM", sb.BuildResource(&Mysql_virtual_network_rule{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("mysql_virtual_network_rule_id")
		b.ImmutableAttributes("name", "resource_group_name", "server_name")
	}))[0]
	sb.RegisterHandler("TerraformAzureRM::Mysql_virtual_network_ruleHandler", bridge.NewTFHandler(p, rt, "mysql_virtual_network_rule_id", "azurerm_mysql_virtual_network_rule"), rt)

	rt = sb.RegisterTypes("TerraformAzureRM", sb.BuildResource(&Network_interface{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("network_interface_id", "applied_dns_servers", "dns_servers", "internal_dns_name_label", "internal_fqdn", "mac_address", "private_ip_address", "private_ip_addresses", "tags", "virtual_machine_id")
		b.ImmutableAttributes("location", "name", "resource_group_name")
	}))[0]
	sb.RegisterHandler("TerraformAzureRM::Network_interfaceHandler", bridge.NewTFHandler(p, rt, "network_interface_id", "azurerm_network_interface"), rt)

	rt = sb.RegisterTypes("TerraformAzureRM", sb.BuildResource(&Network_interface_application_gateway_backend_address_pool_association{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("network_interface_application_gateway_backend_address_pool_association_id")
		b.ImmutableAttributes("backend_address_pool_id", "ip_configuration_name", "network_interface_id")
	}))[0]
	sb.RegisterHandler("TerraformAzureRM::Network_interface_application_gateway_backend_address_pool_associationHandler", bridge.NewTFHandler(p, rt, "network_interface_application_gateway_backend_address_pool_association_id", "azurerm_network_interface_application_gateway_backend_address_pool_association"), rt)

	rt = sb.RegisterTypes("TerraformAzureRM", sb.BuildResource(&Network_interface_backend_address_pool_association{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("network_interface_backend_address_pool_association_id")
		b.ImmutableAttributes("backend_address_pool_id", "ip_configuration_name", "network_interface_id")
	}))[0]
	sb.RegisterHandler("TerraformAzureRM::Network_interface_backend_address_pool_associationHandler", bridge.NewTFHandler(p, rt, "network_interface_backend_address_pool_association_id", "azurerm_network_interface_backend_address_pool_association"), rt)

	rt = sb.RegisterTypes("TerraformAzureRM", sb.BuildResource(&Network_interface_nat_rule_association{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("network_interface_nat_rule_association_id")
		b.ImmutableAttributes("ip_configuration_name", "nat_rule_id", "network_interface_id")
	}))[0]
	sb.RegisterHandler("TerraformAzureRM::Network_interface_nat_rule_associationHandler", bridge.NewTFHandler(p, rt, "network_interface_nat_rule_association_id", "azurerm_network_interface_nat_rule_association"), rt)

	rt = sb.RegisterTypes("TerraformAzureRM", sb.BuildResource(&Network_security_group{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("network_security_group_id", "security_rule", "tags")
		b.ImmutableAttributes("location", "name", "resource_group_name")
	}))[0]
	sb.RegisterHandler("TerraformAzureRM::Network_security_groupHandler", bridge.NewTFHandler(p, rt, "network_security_group_id", "azurerm_network_security_group"), rt)

	rt = sb.RegisterTypes("TerraformAzureRM", sb.BuildResource(&Network_security_rule{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("network_security_rule_id")
		b.ImmutableAttributes("name", "network_security_group_name", "resource_group_name")
	}))[0]
	sb.RegisterHandler("TerraformAzureRM::Network_security_ruleHandler", bridge.NewTFHandler(p, rt, "network_security_rule_id", "azurerm_network_security_rule"), rt)

	rt = sb.RegisterTypes("TerraformAzureRM", sb.BuildResource(&Network_watcher{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("network_watcher_id", "tags")
		b.ImmutableAttributes("location", "name", "resource_group_name")
	}))[0]
	sb.RegisterHandler("TerraformAzureRM::Network_watcherHandler", bridge.NewTFHandler(p, rt, "network_watcher_id", "azurerm_network_watcher"), rt)

	rt = sb.RegisterTypes("TerraformAzureRM", sb.BuildResource(&Notification_hub{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("notification_hub_id")
		b.ImmutableAttributes("location", "name", "namespace_name", "resource_group_name")
	}))[0]
	sb.RegisterHandler("TerraformAzureRM::Notification_hubHandler", bridge.NewTFHandler(p, rt, "notification_hub_id", "azurerm_notification_hub"), rt)

	rt = sb.RegisterTypes("TerraformAzureRM", sb.BuildResource(&Notification_hub_authorization_rule{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("notification_hub_authorization_rule_id", "primary_access_key", "secondary_access_key")
		b.ImmutableAttributes("name", "namespace_name", "notification_hub_name", "resource_group_name")
	}))[0]
	sb.RegisterHandler("TerraformAzureRM::Notification_hub_authorization_ruleHandler", bridge.NewTFHandler(p, rt, "notification_hub_authorization_rule_id", "azurerm_notification_hub_authorization_rule"), rt)

	rt = sb.RegisterTypes("TerraformAzureRM", sb.BuildResource(&Notification_hub_namespace{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("notification_hub_namespace_id", "servicebus_endpoint")
		b.ImmutableAttributes("location", "name", "resource_group_name")
	}))[0]
	sb.RegisterHandler("TerraformAzureRM::Notification_hub_namespaceHandler", bridge.NewTFHandler(p, rt, "notification_hub_namespace_id", "azurerm_notification_hub_namespace"), rt)

	rt = sb.RegisterTypes("TerraformAzureRM", sb.BuildResource(&Packet_capture{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("packet_capture_id")
		b.ImmutableAttributes("filter", "maximum_bytes_per_packet", "maximum_bytes_per_session", "maximum_capture_duration", "name", "network_watcher_name", "resource_group_name", "storage_location", "target_resource_id")
	}))[0]
	sb.RegisterHandler("TerraformAzureRM::Packet_captureHandler", bridge.NewTFHandler(p, rt, "packet_capture_id", "azurerm_packet_capture"), rt)

	rt = sb.RegisterTypes("TerraformAzureRM", sb.BuildResource(&Policy_assignment{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("policy_assignment_id", "identity")
		b.ImmutableAttributes("location", "name", "parameters", "policy_definition_id", "scope")
	}))[0]
	sb.RegisterHandler("TerraformAzureRM::Policy_assignmentHandler", bridge.NewTFHandler(p, rt, "policy_assignment_id", "azurerm_policy_assignment"), rt)

	rt = sb.RegisterTypes("TerraformAzureRM", sb.BuildResource(&Policy_definition{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("policy_definition_id")
		b.ImmutableAttributes("management_group_id", "mode", "name", "policy_type")
	}))[0]
	sb.RegisterHandler("TerraformAzureRM::Policy_definitionHandler", bridge.NewTFHandler(p, rt, "policy_definition_id", "azurerm_policy_definition"), rt)

	rt = sb.RegisterTypes("TerraformAzureRM", sb.BuildResource(&Policy_set_definition{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("policy_set_definition_id")
		b.ImmutableAttributes("management_group_id", "name", "policy_type")
	}))[0]
	sb.RegisterHandler("TerraformAzureRM::Policy_set_definitionHandler", bridge.NewTFHandler(p, rt, "policy_set_definition_id", "azurerm_policy_set_definition"), rt)

	rt = sb.RegisterTypes("TerraformAzureRM", sb.BuildResource(&Postgresql_configuration{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("postgresql_configuration_id")
		b.ImmutableAttributes("name", "resource_group_name", "server_name", "value")
	}))[0]
	sb.RegisterHandler("TerraformAzureRM::Postgresql_configurationHandler", bridge.NewTFHandler(p, rt, "postgresql_configuration_id", "azurerm_postgresql_configuration"), rt)

	rt = sb.RegisterTypes("TerraformAzureRM", sb.BuildResource(&Postgresql_database{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("postgresql_database_id")
		b.ImmutableAttributes("charset", "collation", "name", "resource_group_name", "server_name")
	}))[0]
	sb.RegisterHandler("TerraformAzureRM::Postgresql_databaseHandler", bridge.NewTFHandler(p, rt, "postgresql_database_id", "azurerm_postgresql_database"), rt)

	rt = sb.RegisterTypes("TerraformAzureRM", sb.BuildResource(&Postgresql_firewall_rule{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("postgresql_firewall_rule_id")
		b.ImmutableAttributes("end_ip_address", "name", "resource_group_name", "server_name", "start_ip_address")
	}))[0]
	sb.RegisterHandler("TerraformAzureRM::Postgresql_firewall_ruleHandler", bridge.NewTFHandler(p, rt, "postgresql_firewall_rule_id", "azurerm_postgresql_firewall_rule"), rt)

	rt = sb.RegisterTypes("TerraformAzureRM", sb.BuildResource(&Postgresql_server{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("postgresql_server_id", "fqdn", "tags")
		b.ImmutableAttributes("administrator_login", "location", "name", "resource_group_name", "version")
	}))[0]
	sb.RegisterHandler("TerraformAzureRM::Postgresql_serverHandler", bridge.NewTFHandler(p, rt, "postgresql_server_id", "azurerm_postgresql_server"), rt)

	rt = sb.RegisterTypes("TerraformAzureRM", sb.BuildResource(&Postgresql_virtual_network_rule{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("postgresql_virtual_network_rule_id")
		b.ImmutableAttributes("name", "resource_group_name", "server_name")
	}))[0]
	sb.RegisterHandler("TerraformAzureRM::Postgresql_virtual_network_ruleHandler", bridge.NewTFHandler(p, rt, "postgresql_virtual_network_rule_id", "azurerm_postgresql_virtual_network_rule"), rt)

	rt = sb.RegisterTypes("TerraformAzureRM", sb.BuildResource(&Public_ip{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("public_ip_id", "allocation_method", "fqdn", "ip_address", "public_ip_address_allocation", "tags")
		b.ImmutableAttributes("ip_version", "location", "name", "resource_group_name", "sku", "zones")
	}))[0]
	sb.RegisterHandler("TerraformAzureRM::Public_ipHandler", bridge.NewTFHandler(p, rt, "public_ip_id", "azurerm_public_ip"), rt)

	rt = sb.RegisterTypes("TerraformAzureRM", sb.BuildResource(&Recovery_services_protected_vm{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("recovery_services_protected_vm_id", "tags")
		b.ImmutableAttributes("backup_policy_id", "recovery_vault_name", "resource_group_name", "source_vm_id")
	}))[0]
	sb.RegisterHandler("TerraformAzureRM::Recovery_services_protected_vmHandler", bridge.NewTFHandler(p, rt, "recovery_services_protected_vm_id", "azurerm_recovery_services_protected_vm"), rt)

	rt = sb.RegisterTypes("TerraformAzureRM", sb.BuildResource(&Recovery_services_protection_policy_vm{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("recovery_services_protection_policy_vm_id", "tags")
		b.ImmutableAttributes("name", "recovery_vault_name", "resource_group_name")
	}))[0]
	sb.RegisterHandler("TerraformAzureRM::Recovery_services_protection_policy_vmHandler", bridge.NewTFHandler(p, rt, "recovery_services_protection_policy_vm_id", "azurerm_recovery_services_protection_policy_vm"), rt)

	rt = sb.RegisterTypes("TerraformAzureRM", sb.BuildResource(&Recovery_services_vault{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("recovery_services_vault_id", "tags")
		b.ImmutableAttributes("location", "name", "resource_group_name")
	}))[0]
	sb.RegisterHandler("TerraformAzureRM::Recovery_services_vaultHandler", bridge.NewTFHandler(p, rt, "recovery_services_vault_id", "azurerm_recovery_services_vault"), rt)

	rt = sb.RegisterTypes("TerraformAzureRM", sb.BuildResource(&Redis_cache{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("redis_cache_id", "hostname", "port", "primary_access_key", "private_static_ip_address", "secondary_access_key", "ssl_port", "tags")
		b.ImmutableAttributes("location", "name", "private_static_ip_address", "resource_group_name", "subnet_id", "zones")
	}))[0]
	sb.RegisterHandler("TerraformAzureRM::Redis_cacheHandler", bridge.NewTFHandler(p, rt, "redis_cache_id", "azurerm_redis_cache"), rt)

	rt = sb.RegisterTypes("TerraformAzureRM", sb.BuildResource(&Redis_firewall_rule{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("redis_firewall_rule_id")
		b.ImmutableAttributes("name", "redis_cache_name", "resource_group_name")
	}))[0]
	sb.RegisterHandler("TerraformAzureRM::Redis_firewall_ruleHandler", bridge.NewTFHandler(p, rt, "redis_firewall_rule_id", "azurerm_redis_firewall_rule"), rt)

	rt = sb.RegisterTypes("TerraformAzureRM", sb.BuildResource(&Relay_namespace{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("relay_namespace_id", "metric_id", "primary_connection_string", "primary_key", "secondary_connection_string", "secondary_key", "tags")
		b.ImmutableAttributes("location", "name", "resource_group_name")
	}))[0]
	sb.RegisterHandler("TerraformAzureRM::Relay_namespaceHandler", bridge.NewTFHandler(p, rt, "relay_namespace_id", "azurerm_relay_namespace"), rt)

	rt = sb.RegisterTypes("TerraformAzureRM", sb.BuildResource(&Resource_group{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("resource_group_id", "tags")
		b.ImmutableAttributes("location", "name")
	}))[0]
	sb.RegisterHandler("TerraformAzureRM::Resource_groupHandler", bridge.NewTFHandler(p, rt, "resource_group_id", "azurerm_resource_group"), rt)

	rt = sb.RegisterTypes("TerraformAzureRM", sb.BuildResource(&Role_assignment{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("role_assignment_id", "name", "role_definition_id", "role_definition_name")
		b.ImmutableAttributes("name", "principal_id", "role_definition_id", "role_definition_name", "scope")
	}))[0]
	sb.RegisterHandler("TerraformAzureRM::Role_assignmentHandler", bridge.NewTFHandler(p, rt, "role_assignment_id", "azurerm_role_assignment"), rt)

	rt = sb.RegisterTypes("TerraformAzureRM", sb.BuildResource(&Role_definition{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("role_definition_lyra_id", "role_definition_id")
		b.ImmutableAttributes("role_definition_id", "scope")
	}))[0]
	sb.RegisterHandler("TerraformAzureRM::Role_definitionHandler", bridge.NewTFHandler(p, rt, "role_definition_lyra_id", "azurerm_role_definition"), rt)

	rt = sb.RegisterTypes("TerraformAzureRM", sb.BuildResource(&Route{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("route_id")
		b.ImmutableAttributes("name", "resource_group_name", "route_table_name")
	}))[0]
	sb.RegisterHandler("TerraformAzureRM::RouteHandler", bridge.NewTFHandler(p, rt, "route_id", "azurerm_route"), rt)

	rt = sb.RegisterTypes("TerraformAzureRM", sb.BuildResource(&Route_table{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("route_table_id", "route", "subnets", "tags")
		b.ImmutableAttributes("location", "name", "resource_group_name")
	}))[0]
	sb.RegisterHandler("TerraformAzureRM::Route_tableHandler", bridge.NewTFHandler(p, rt, "route_table_id", "azurerm_route_table"), rt)

	rt = sb.RegisterTypes("TerraformAzureRM", sb.BuildResource(&Scheduler_job{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("scheduler_job_id", "start_time", "state")
		b.ImmutableAttributes("job_collection_name", "name", "resource_group_name")
	}))[0]
	sb.RegisterHandler("TerraformAzureRM::Scheduler_jobHandler", bridge.NewTFHandler(p, rt, "scheduler_job_id", "azurerm_scheduler_job"), rt)

	rt = sb.RegisterTypes("TerraformAzureRM", sb.BuildResource(&Scheduler_job_collection{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("scheduler_job_collection_id", "tags")
		b.ImmutableAttributes("location", "name", "resource_group_name")
	}))[0]
	sb.RegisterHandler("TerraformAzureRM::Scheduler_job_collectionHandler", bridge.NewTFHandler(p, rt, "scheduler_job_collection_id", "azurerm_scheduler_job_collection"), rt)

	rt = sb.RegisterTypes("TerraformAzureRM", sb.BuildResource(&Search_service{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("search_service_id", "partition_count", "primary_key", "replica_count", "secondary_key", "tags")
		b.ImmutableAttributes("location", "name", "partition_count", "replica_count", "resource_group_name", "sku", "tags")
	}))[0]
	sb.RegisterHandler("TerraformAzureRM::Search_serviceHandler", bridge.NewTFHandler(p, rt, "search_service_id", "azurerm_search_service"), rt)

	rt = sb.RegisterTypes("TerraformAzureRM", sb.BuildResource(&Security_center_contact{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("security_center_contact_id")
	}))[0]
	sb.RegisterHandler("TerraformAzureRM::Security_center_contactHandler", bridge.NewTFHandler(p, rt, "security_center_contact_id", "azurerm_security_center_contact"), rt)

	rt = sb.RegisterTypes("TerraformAzureRM", sb.BuildResource(&Security_center_subscription_pricing{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("security_center_subscription_pricing_id")
	}))[0]
	sb.RegisterHandler("TerraformAzureRM::Security_center_subscription_pricingHandler", bridge.NewTFHandler(p, rt, "security_center_subscription_pricing_id", "azurerm_security_center_subscription_pricing"), rt)

	rt = sb.RegisterTypes("TerraformAzureRM", sb.BuildResource(&Security_center_workspace{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("security_center_workspace_id")
	}))[0]
	sb.RegisterHandler("TerraformAzureRM::Security_center_workspaceHandler", bridge.NewTFHandler(p, rt, "security_center_workspace_id", "azurerm_security_center_workspace"), rt)

	rt = sb.RegisterTypes("TerraformAzureRM", sb.BuildResource(&Service_fabric_cluster{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("service_fabric_cluster_id", "cluster_code_version", "cluster_endpoint", "tags")
		b.ImmutableAttributes("azure_active_directory", "diagnostics_config", "location", "management_endpoint", "name", "resource_group_name", "vm_image")
	}))[0]
	sb.RegisterHandler("TerraformAzureRM::Service_fabric_clusterHandler", bridge.NewTFHandler(p, rt, "service_fabric_cluster_id", "azurerm_service_fabric_cluster"), rt)

	rt = sb.RegisterTypes("TerraformAzureRM", sb.BuildResource(&Servicebus_namespace{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("servicebus_namespace_id", "default_primary_connection_string", "default_primary_key", "default_secondary_connection_string", "default_secondary_key", "tags")
		b.ImmutableAttributes("location", "name", "resource_group_name", "sku")
	}))[0]
	sb.RegisterHandler("TerraformAzureRM::Servicebus_namespaceHandler", bridge.NewTFHandler(p, rt, "servicebus_namespace_id", "azurerm_servicebus_namespace"), rt)

	rt = sb.RegisterTypes("TerraformAzureRM", sb.BuildResource(&Servicebus_namespace_authorization_rule{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("servicebus_namespace_authorization_rule_id", "primary_connection_string", "primary_key", "secondary_connection_string", "secondary_key")
		b.ImmutableAttributes("name", "namespace_name", "resource_group_name")
	}))[0]
	sb.RegisterHandler("TerraformAzureRM::Servicebus_namespace_authorization_ruleHandler", bridge.NewTFHandler(p, rt, "servicebus_namespace_authorization_rule_id", "azurerm_servicebus_namespace_authorization_rule"), rt)

	rt = sb.RegisterTypes("TerraformAzureRM", sb.BuildResource(&Servicebus_queue{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("servicebus_queue_id", "auto_delete_on_idle", "default_message_ttl", "duplicate_detection_history_time_window", "lock_duration", "max_size_in_megabytes")
		b.ImmutableAttributes("enable_partitioning", "location", "name", "namespace_name", "requires_duplicate_detection", "requires_session", "resource_group_name")
	}))[0]
	sb.RegisterHandler("TerraformAzureRM::Servicebus_queueHandler", bridge.NewTFHandler(p, rt, "servicebus_queue_id", "azurerm_servicebus_queue"), rt)

	rt = sb.RegisterTypes("TerraformAzureRM", sb.BuildResource(&Servicebus_queue_authorization_rule{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("servicebus_queue_authorization_rule_id", "primary_connection_string", "primary_key", "secondary_connection_string", "secondary_key")
		b.ImmutableAttributes("name", "namespace_name", "queue_name", "resource_group_name")
	}))[0]
	sb.RegisterHandler("TerraformAzureRM::Servicebus_queue_authorization_ruleHandler", bridge.NewTFHandler(p, rt, "servicebus_queue_authorization_rule_id", "azurerm_servicebus_queue_authorization_rule"), rt)

	rt = sb.RegisterTypes("TerraformAzureRM", sb.BuildResource(&Servicebus_subscription{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("servicebus_subscription_id", "auto_delete_on_idle", "default_message_ttl", "lock_duration")
		b.ImmutableAttributes("location", "name", "namespace_name", "requires_session", "resource_group_name", "topic_name")
	}))[0]
	sb.RegisterHandler("TerraformAzureRM::Servicebus_subscriptionHandler", bridge.NewTFHandler(p, rt, "servicebus_subscription_id", "azurerm_servicebus_subscription"), rt)

	rt = sb.RegisterTypes("TerraformAzureRM", sb.BuildResource(&Servicebus_subscription_rule{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("servicebus_subscription_rule_id")
		b.ImmutableAttributes("name", "namespace_name", "resource_group_name", "subscription_name", "topic_name")
	}))[0]
	sb.RegisterHandler("TerraformAzureRM::Servicebus_subscription_ruleHandler", bridge.NewTFHandler(p, rt, "servicebus_subscription_rule_id", "azurerm_servicebus_subscription_rule"), rt)

	rt = sb.RegisterTypes("TerraformAzureRM", sb.BuildResource(&Servicebus_topic{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("servicebus_topic_id", "auto_delete_on_idle", "default_message_ttl", "duplicate_detection_history_time_window", "max_size_in_megabytes")
		b.ImmutableAttributes("enable_partitioning", "location", "name", "namespace_name", "requires_duplicate_detection", "resource_group_name")
	}))[0]
	sb.RegisterHandler("TerraformAzureRM::Servicebus_topicHandler", bridge.NewTFHandler(p, rt, "servicebus_topic_id", "azurerm_servicebus_topic"), rt)

	rt = sb.RegisterTypes("TerraformAzureRM", sb.BuildResource(&Servicebus_topic_authorization_rule{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("servicebus_topic_authorization_rule_id", "primary_connection_string", "primary_key", "secondary_connection_string", "secondary_key")
		b.ImmutableAttributes("name", "namespace_name", "resource_group_name", "topic_name")
	}))[0]
	sb.RegisterHandler("TerraformAzureRM::Servicebus_topic_authorization_ruleHandler", bridge.NewTFHandler(p, rt, "servicebus_topic_authorization_rule_id", "azurerm_servicebus_topic_authorization_rule"), rt)

	rt = sb.RegisterTypes("TerraformAzureRM", sb.BuildResource(&Shared_image{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("shared_image_id", "tags")
		b.ImmutableAttributes("gallery_name", "location", "name", "resource_group_name")
	}))[0]
	sb.RegisterHandler("TerraformAzureRM::Shared_imageHandler", bridge.NewTFHandler(p, rt, "shared_image_id", "azurerm_shared_image"), rt)

	rt = sb.RegisterTypes("TerraformAzureRM", sb.BuildResource(&Shared_image_gallery{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("shared_image_gallery_id", "tags", "unique_name")
		b.ImmutableAttributes("location", "name", "resource_group_name")
	}))[0]
	sb.RegisterHandler("TerraformAzureRM::Shared_image_galleryHandler", bridge.NewTFHandler(p, rt, "shared_image_gallery_id", "azurerm_shared_image_gallery"), rt)

	rt = sb.RegisterTypes("TerraformAzureRM", sb.BuildResource(&Shared_image_version{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("shared_image_version_id", "tags")
		b.ImmutableAttributes("gallery_name", "image_name", "location", "managed_image_id", "name", "resource_group_name")
	}))[0]
	sb.RegisterHandler("TerraformAzureRM::Shared_image_versionHandler", bridge.NewTFHandler(p, rt, "shared_image_version_id", "azurerm_shared_image_version"), rt)

	rt = sb.RegisterTypes("TerraformAzureRM", sb.BuildResource(&Signalr_service{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("signalr_service_id", "hostname", "ip_address", "public_port", "server_port", "tags")
		b.ImmutableAttributes("location", "name", "resource_group_name")
	}))[0]
	sb.RegisterHandler("TerraformAzureRM::Signalr_serviceHandler", bridge.NewTFHandler(p, rt, "signalr_service_id", "azurerm_signalr_service"), rt)

	rt = sb.RegisterTypes("TerraformAzureRM", sb.BuildResource(&Snapshot{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("snapshot_id", "disk_size_gb", "tags")
		b.ImmutableAttributes("location", "name", "resource_group_name", "source_resource_id", "source_uri", "storage_account_id")
	}))[0]
	sb.RegisterHandler("TerraformAzureRM::SnapshotHandler", bridge.NewTFHandler(p, rt, "snapshot_id", "azurerm_snapshot"), rt)

	rt = sb.RegisterTypes("TerraformAzureRM", sb.BuildResource(&Sql_active_directory_administrator{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("sql_active_directory_administrator_id")
		b.ImmutableAttributes("resource_group_name", "server_name")
	}))[0]
	sb.RegisterHandler("TerraformAzureRM::Sql_active_directory_administratorHandler", bridge.NewTFHandler(p, rt, "sql_active_directory_administrator_id", "azurerm_sql_active_directory_administrator"), rt)

	rt = sb.RegisterTypes("TerraformAzureRM", sb.BuildResource(&Sql_database{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("sql_database_id", "collation", "creation_date", "default_secondary_location", "edition", "elastic_pool_name", "encryption", "max_size_bytes", "requested_service_objective_id", "requested_service_objective_name", "restore_point_in_time", "source_database_deletion_date", "source_database_id", "tags", "threat_detection_policy")
		b.ImmutableAttributes("collation", "location", "name", "resource_group_name", "server_name")
	}))[0]
	sb.RegisterHandler("TerraformAzureRM::Sql_databaseHandler", bridge.NewTFHandler(p, rt, "sql_database_id", "azurerm_sql_database"), rt)

	rt = sb.RegisterTypes("TerraformAzureRM", sb.BuildResource(&Sql_elasticpool{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("sql_elasticpool_id", "creation_date", "db_dtu_max", "db_dtu_min", "pool_size", "tags")
		b.ImmutableAttributes("edition", "location", "name", "resource_group_name", "server_name")
	}))[0]
	sb.RegisterHandler("TerraformAzureRM::Sql_elasticpoolHandler", bridge.NewTFHandler(p, rt, "sql_elasticpool_id", "azurerm_sql_elasticpool"), rt)

	rt = sb.RegisterTypes("TerraformAzureRM", sb.BuildResource(&Sql_firewall_rule{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("sql_firewall_rule_id")
		b.ImmutableAttributes("name", "resource_group_name", "server_name")
	}))[0]
	sb.RegisterHandler("TerraformAzureRM::Sql_firewall_ruleHandler", bridge.NewTFHandler(p, rt, "sql_firewall_rule_id", "azurerm_sql_firewall_rule"), rt)

	rt = sb.RegisterTypes("TerraformAzureRM", sb.BuildResource(&Sql_server{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("sql_server_id", "fully_qualified_domain_name", "tags")
		b.ImmutableAttributes("administrator_login", "location", "name", "resource_group_name", "version")
	}))[0]
	sb.RegisterHandler("TerraformAzureRM::Sql_serverHandler", bridge.NewTFHandler(p, rt, "sql_server_id", "azurerm_sql_server"), rt)

	rt = sb.RegisterTypes("TerraformAzureRM", sb.BuildResource(&Sql_virtual_network_rule{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("sql_virtual_network_rule_id")
		b.ImmutableAttributes("name", "resource_group_name", "server_name")
	}))[0]
	sb.RegisterHandler("TerraformAzureRM::Sql_virtual_network_ruleHandler", bridge.NewTFHandler(p, rt, "sql_virtual_network_rule_id", "azurerm_sql_virtual_network_rule"), rt)

	rt = sb.RegisterTypes("TerraformAzureRM", sb.BuildResource(&Storage_account{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("storage_account_id", "access_tier", "account_type", "identity", "primary_access_key", "primary_blob_connection_string", "primary_blob_endpoint", "primary_connection_string", "primary_file_endpoint", "primary_location", "primary_queue_endpoint", "primary_table_endpoint", "secondary_access_key", "secondary_blob_connection_string", "secondary_blob_endpoint", "secondary_connection_string", "secondary_location", "secondary_queue_endpoint", "secondary_table_endpoint", "tags")
		b.ImmutableAttributes("account_kind", "account_tier", "location", "name", "resource_group_name")
	}))[0]
	sb.RegisterHandler("TerraformAzureRM::Storage_accountHandler", bridge.NewTFHandler(p, rt, "storage_account_id", "azurerm_storage_account"), rt)

	rt = sb.RegisterTypes("TerraformAzureRM", sb.BuildResource(&Storage_blob{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("storage_blob_id", "url")
		b.ImmutableAttributes("attempts", "name", "parallelism", "resource_group_name", "size", "source", "source_uri", "storage_account_name", "storage_container_name", "type")
	}))[0]
	sb.RegisterHandler("TerraformAzureRM::Storage_blobHandler", bridge.NewTFHandler(p, rt, "storage_blob_id", "azurerm_storage_blob"), rt)

	rt = sb.RegisterTypes("TerraformAzureRM", sb.BuildResource(&Storage_container{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("storage_container_id", "properties")
		b.ImmutableAttributes("name", "resource_group_name", "storage_account_name")
	}))[0]
	sb.RegisterHandler("TerraformAzureRM::Storage_containerHandler", bridge.NewTFHandler(p, rt, "storage_container_id", "azurerm_storage_container"), rt)

	rt = sb.RegisterTypes("TerraformAzureRM", sb.BuildResource(&Storage_queue{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("storage_queue_id")
		b.ImmutableAttributes("name", "resource_group_name", "storage_account_name")
	}))[0]
	sb.RegisterHandler("TerraformAzureRM::Storage_queueHandler", bridge.NewTFHandler(p, rt, "storage_queue_id", "azurerm_storage_queue"), rt)

	rt = sb.RegisterTypes("TerraformAzureRM", sb.BuildResource(&Storage_share{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("storage_share_id", "url")
		b.ImmutableAttributes("name", "resource_group_name", "storage_account_name")
	}))[0]
	sb.RegisterHandler("TerraformAzureRM::Storage_shareHandler", bridge.NewTFHandler(p, rt, "storage_share_id", "azurerm_storage_share"), rt)

	rt = sb.RegisterTypes("TerraformAzureRM", sb.BuildResource(&Storage_table{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("storage_table_id")
		b.ImmutableAttributes("name", "resource_group_name", "storage_account_name")
	}))[0]
	sb.RegisterHandler("TerraformAzureRM::Storage_tableHandler", bridge.NewTFHandler(p, rt, "storage_table_id", "azurerm_storage_table"), rt)

	rt = sb.RegisterTypes("TerraformAzureRM", sb.BuildResource(&Subnet{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("subnet_id", "ip_configurations")
		b.ImmutableAttributes("name", "resource_group_name", "virtual_network_name")
	}))[0]
	sb.RegisterHandler("TerraformAzureRM::SubnetHandler", bridge.NewTFHandler(p, rt, "subnet_id", "azurerm_subnet"), rt)

	rt = sb.RegisterTypes("TerraformAzureRM", sb.BuildResource(&Subnet_network_security_group_association{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("subnet_network_security_group_association_id")
		b.ImmutableAttributes("network_security_group_id", "subnet_id")
	}))[0]
	sb.RegisterHandler("TerraformAzureRM::Subnet_network_security_group_associationHandler", bridge.NewTFHandler(p, rt, "subnet_network_security_group_association_id", "azurerm_subnet_network_security_group_association"), rt)

	rt = sb.RegisterTypes("TerraformAzureRM", sb.BuildResource(&Subnet_route_table_association{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("subnet_route_table_association_id")
		b.ImmutableAttributes("route_table_id", "subnet_id")
	}))[0]
	sb.RegisterHandler("TerraformAzureRM::Subnet_route_table_associationHandler", bridge.NewTFHandler(p, rt, "subnet_route_table_association_id", "azurerm_subnet_route_table_association"), rt)

	rt = sb.RegisterTypes("TerraformAzureRM", sb.BuildResource(&Template_deployment{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("template_deployment_id", "outputs", "template_body")
		b.ImmutableAttributes("name", "resource_group_name")
	}))[0]
	sb.RegisterHandler("TerraformAzureRM::Template_deploymentHandler", bridge.NewTFHandler(p, rt, "template_deployment_id", "azurerm_template_deployment"), rt)

	rt = sb.RegisterTypes("TerraformAzureRM", sb.BuildResource(&Traffic_manager_endpoint{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("traffic_manager_endpoint_id", "endpoint_location", "endpoint_monitor_status", "endpoint_status", "priority", "target", "weight")
		b.ImmutableAttributes("name", "profile_name", "resource_group_name", "type")
	}))[0]
	sb.RegisterHandler("TerraformAzureRM::Traffic_manager_endpointHandler", bridge.NewTFHandler(p, rt, "traffic_manager_endpoint_id", "azurerm_traffic_manager_endpoint"), rt)

	rt = sb.RegisterTypes("TerraformAzureRM", sb.BuildResource(&Traffic_manager_profile{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("traffic_manager_profile_id", "fqdn", "profile_status", "tags")
		b.ImmutableAttributes("name", "resource_group_name")
	}))[0]
	sb.RegisterHandler("TerraformAzureRM::Traffic_manager_profileHandler", bridge.NewTFHandler(p, rt, "traffic_manager_profile_id", "azurerm_traffic_manager_profile"), rt)

	rt = sb.RegisterTypes("TerraformAzureRM", sb.BuildResource(&User_assigned_identity{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("user_assigned_identity_id", "client_id", "principal_id", "tags")
		b.ImmutableAttributes("location", "name", "resource_group_name")
	}))[0]
	sb.RegisterHandler("TerraformAzureRM::User_assigned_identityHandler", bridge.NewTFHandler(p, rt, "user_assigned_identity_id", "azurerm_user_assigned_identity"), rt)

	rt = sb.RegisterTypes("TerraformAzureRM", sb.BuildResource(&Virtual_machine{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("virtual_machine_id", "availability_set_id", "identity", "license_type", "storage_data_disk", "storage_image_reference", "tags")
		b.ImmutableAttributes("availability_set_id", "location", "name", "resource_group_name", "storage_image_reference", "zones")
	}))[0]
	sb.RegisterHandler("TerraformAzureRM::Virtual_machineHandler", bridge.NewTFHandler(p, rt, "virtual_machine_id", "azurerm_virtual_machine"), rt)

	rt = sb.RegisterTypes("TerraformAzureRM", sb.BuildResource(&Virtual_machine_data_disk_attachment{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("virtual_machine_data_disk_attachment_id")
		b.ImmutableAttributes("create_option", "lun", "managed_disk_id", "virtual_machine_id")
	}))[0]
	sb.RegisterHandler("TerraformAzureRM::Virtual_machine_data_disk_attachmentHandler", bridge.NewTFHandler(p, rt, "virtual_machine_data_disk_attachment_id", "azurerm_virtual_machine_data_disk_attachment"), rt)

	rt = sb.RegisterTypes("TerraformAzureRM", sb.BuildResource(&Virtual_machine_extension{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("virtual_machine_extension_id", "tags")
		b.ImmutableAttributes("location", "name", "resource_group_name", "virtual_machine_name")
	}))[0]
	sb.RegisterHandler("TerraformAzureRM::Virtual_machine_extensionHandler", bridge.NewTFHandler(p, rt, "virtual_machine_extension_id", "azurerm_virtual_machine_extension"), rt)

	rt = sb.RegisterTypes("TerraformAzureRM", sb.BuildResource(&Virtual_machine_scale_set{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("virtual_machine_scale_set_id", "identity", "license_type", "os_profile_linux_config", "storage_profile_image_reference", "tags")
		b.ImmutableAttributes("eviction_policy", "location", "name", "priority", "resource_group_name", "single_placement_group", "zones")
	}))[0]
	sb.RegisterHandler("TerraformAzureRM::Virtual_machine_scale_setHandler", bridge.NewTFHandler(p, rt, "virtual_machine_scale_set_id", "azurerm_virtual_machine_scale_set"), rt)

	rt = sb.RegisterTypes("TerraformAzureRM", sb.BuildResource(&Virtual_network{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("virtual_network_id", "subnet", "tags")
		b.ImmutableAttributes("location", "name", "resource_group_name")
	}))[0]
	sb.RegisterHandler("TerraformAzureRM::Virtual_networkHandler", bridge.NewTFHandler(p, rt, "virtual_network_id", "azurerm_virtual_network"), rt)

	rt = sb.RegisterTypes("TerraformAzureRM", sb.BuildResource(&Virtual_network_gateway{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("virtual_network_gateway_id", "active_active", "bgp_settings", "enable_bgp", "tags")
		b.ImmutableAttributes("location", "name", "resource_group_name", "type", "vpn_type")
	}))[0]
	sb.RegisterHandler("TerraformAzureRM::Virtual_network_gatewayHandler", bridge.NewTFHandler(p, rt, "virtual_network_gateway_id", "azurerm_virtual_network_gateway"), rt)

	rt = sb.RegisterTypes("TerraformAzureRM", sb.BuildResource(&Virtual_network_gateway_connection{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("virtual_network_gateway_connection_id", "enable_bgp", "routing_weight", "tags", "use_policy_based_traffic_selectors")
		b.ImmutableAttributes("express_route_circuit_id", "location", "name", "peer_virtual_network_gateway_id", "resource_group_name", "type", "virtual_network_gateway_id")
	}))[0]
	sb.RegisterHandler("TerraformAzureRM::Virtual_network_gateway_connectionHandler", bridge.NewTFHandler(p, rt, "virtual_network_gateway_connection_id", "azurerm_virtual_network_gateway_connection"), rt)

	rt = sb.RegisterTypes("TerraformAzureRM", sb.BuildResource(&Virtual_network_peering{}, func(b service.ResourceTypeBuilder) {
		b.ProvidedAttributes("virtual_network_peering_id", "allow_forwarded_traffic", "allow_gateway_transit", "allow_virtual_network_access", "use_remote_gateways")
		b.ImmutableAttributes("name", "remote_virtual_network_id", "resource_group_name", "virtual_network_name")
	}))[0]
	sb.RegisterHandler("TerraformAzureRM::Virtual_network_peeringHandler", bridge.NewTFHandler(p, rt, "virtual_network_peering_id", "azurerm_virtual_network_peering"), rt)

}
